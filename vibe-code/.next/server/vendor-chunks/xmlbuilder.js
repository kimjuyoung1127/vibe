"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/xmlbuilder";
exports.ids = ["vendor-chunks/xmlbuilder"];
exports.modules = {

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/DocumentPosition.js":
/*!*********************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/DocumentPosition.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    module.exports = {\n        Disconnected: 1,\n        Preceding: 2,\n        Following: 4,\n        Contains: 8,\n        ContainedBy: 16,\n        ImplementationSpecific: 32\n    };\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9Eb2N1bWVudFBvc2l0aW9uLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxtQ0FBbUM7QUFDbEM7SUFDQ0EsT0FBT0MsT0FBTyxHQUFHO1FBQ2ZDLGNBQWM7UUFDZEMsV0FBVztRQUNYQyxXQUFXO1FBQ1hDLFVBQVU7UUFDVkMsYUFBYTtRQUNiQyx3QkFBd0I7SUFDMUI7QUFFRixHQUFHQyxJQUFJLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLWNvZGUvLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvRG9jdW1lbnRQb3NpdGlvbi5qcz8wOThlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIERpc2Nvbm5lY3RlZDogMSxcbiAgICBQcmVjZWRpbmc6IDIsXG4gICAgRm9sbG93aW5nOiA0LFxuICAgIENvbnRhaW5zOiA4LFxuICAgIENvbnRhaW5lZEJ5OiAxNixcbiAgICBJbXBsZW1lbnRhdGlvblNwZWNpZmljOiAzMlxuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJEaXNjb25uZWN0ZWQiLCJQcmVjZWRpbmciLCJGb2xsb3dpbmciLCJDb250YWlucyIsIkNvbnRhaW5lZEJ5IiwiSW1wbGVtZW50YXRpb25TcGVjaWZpYyIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/DocumentPosition.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js":
/*!*************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/NodeType.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    module.exports = {\n        Element: 1,\n        Attribute: 2,\n        Text: 3,\n        CData: 4,\n        EntityReference: 5,\n        EntityDeclaration: 6,\n        ProcessingInstruction: 7,\n        Comment: 8,\n        Document: 9,\n        DocType: 10,\n        DocumentFragment: 11,\n        NotationDeclaration: 12,\n        Declaration: 201,\n        Raw: 202,\n        AttributeDeclaration: 203,\n        ElementDeclaration: 204,\n        Dummy: 205\n    };\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9Ob2RlVHlwZS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsbUNBQW1DO0FBQ2xDO0lBQ0NBLE9BQU9DLE9BQU8sR0FBRztRQUNmQyxTQUFTO1FBQ1RDLFdBQVc7UUFDWEMsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLGlCQUFpQjtRQUNqQkMsbUJBQW1CO1FBQ25CQyx1QkFBdUI7UUFDdkJDLFNBQVM7UUFDVEMsVUFBVTtRQUNWQyxTQUFTO1FBQ1RDLGtCQUFrQjtRQUNsQkMscUJBQXFCO1FBQ3JCQyxhQUFhO1FBQ2JDLEtBQUs7UUFDTEMsc0JBQXNCO1FBQ3RCQyxvQkFBb0I7UUFDcEJDLE9BQU87SUFDVDtBQUVGLEdBQUdDLElBQUksQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpYmUtY29kZS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9Ob2RlVHlwZS5qcz80MmE5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIEVsZW1lbnQ6IDEsXG4gICAgQXR0cmlidXRlOiAyLFxuICAgIFRleHQ6IDMsXG4gICAgQ0RhdGE6IDQsXG4gICAgRW50aXR5UmVmZXJlbmNlOiA1LFxuICAgIEVudGl0eURlY2xhcmF0aW9uOiA2LFxuICAgIFByb2Nlc3NpbmdJbnN0cnVjdGlvbjogNyxcbiAgICBDb21tZW50OiA4LFxuICAgIERvY3VtZW50OiA5LFxuICAgIERvY1R5cGU6IDEwLFxuICAgIERvY3VtZW50RnJhZ21lbnQ6IDExLFxuICAgIE5vdGF0aW9uRGVjbGFyYXRpb246IDEyLFxuICAgIERlY2xhcmF0aW9uOiAyMDEsXG4gICAgUmF3OiAyMDIsXG4gICAgQXR0cmlidXRlRGVjbGFyYXRpb246IDIwMyxcbiAgICBFbGVtZW50RGVjbGFyYXRpb246IDIwNCxcbiAgICBEdW1teTogMjA1XG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkVsZW1lbnQiLCJBdHRyaWJ1dGUiLCJUZXh0IiwiQ0RhdGEiLCJFbnRpdHlSZWZlcmVuY2UiLCJFbnRpdHlEZWNsYXJhdGlvbiIsIlByb2Nlc3NpbmdJbnN0cnVjdGlvbiIsIkNvbW1lbnQiLCJEb2N1bWVudCIsIkRvY1R5cGUiLCJEb2N1bWVudEZyYWdtZW50IiwiTm90YXRpb25EZWNsYXJhdGlvbiIsIkRlY2xhcmF0aW9uIiwiUmF3IiwiQXR0cmlidXRlRGVjbGFyYXRpb24iLCJFbGVtZW50RGVjbGFyYXRpb24iLCJEdW1teSIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/Utility.js":
/*!************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/Utility.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var assign, getValue, isArray, isEmpty, isFunction, isObject, isPlainObject, slice = [].slice, hasProp = {}.hasOwnProperty;\n    assign = function() {\n        var i, key, len, source, sources, target;\n        target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n        if (isFunction(Object.assign)) {\n            Object.assign.apply(null, arguments);\n        } else {\n            for(i = 0, len = sources.length; i < len; i++){\n                source = sources[i];\n                if (source != null) {\n                    for(key in source){\n                        if (!hasProp.call(source, key)) continue;\n                        target[key] = source[key];\n                    }\n                }\n            }\n        }\n        return target;\n    };\n    isFunction = function(val) {\n        return !!val && Object.prototype.toString.call(val) === \"[object Function]\";\n    };\n    isObject = function(val) {\n        var ref;\n        return !!val && ((ref = typeof val) === \"function\" || ref === \"object\");\n    };\n    isArray = function(val) {\n        if (isFunction(Array.isArray)) {\n            return Array.isArray(val);\n        } else {\n            return Object.prototype.toString.call(val) === \"[object Array]\";\n        }\n    };\n    isEmpty = function(val) {\n        var key;\n        if (isArray(val)) {\n            return !val.length;\n        } else {\n            for(key in val){\n                if (!hasProp.call(val, key)) continue;\n                return false;\n            }\n            return true;\n        }\n    };\n    isPlainObject = function(val) {\n        var ctor, proto;\n        return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && typeof ctor === \"function\" && ctor instanceof ctor && Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object);\n    };\n    getValue = function(obj) {\n        if (isFunction(obj.valueOf)) {\n            return obj.valueOf();\n        } else {\n            return obj;\n        }\n    };\n    module.exports.assign = assign;\n    module.exports.isFunction = isFunction;\n    module.exports.isObject = isObject;\n    module.exports.isArray = isArray;\n    module.exports.isEmpty = isEmpty;\n    module.exports.isPlainObject = isPlainObject;\n    module.exports.getValue = getValue;\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9VdGlsaXR5LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxtQ0FBbUM7QUFDbEM7SUFDQyxJQUFJQSxRQUFRQyxVQUFVQyxTQUFTQyxTQUFTQyxZQUFZQyxVQUFVQyxlQUM1REMsUUFBUSxFQUFFLENBQUNBLEtBQUssRUFDaEJDLFVBQVUsQ0FBQyxFQUFFQyxjQUFjO0lBRTdCVCxTQUFTO1FBQ1AsSUFBSVUsR0FBR0MsS0FBS0MsS0FBS0MsUUFBUUMsU0FBU0M7UUFDbENBLFNBQVNDLFNBQVMsQ0FBQyxFQUFFLEVBQUVGLFVBQVUsS0FBS0UsVUFBVUMsTUFBTSxHQUFHVixNQUFNVyxJQUFJLENBQUNGLFdBQVcsS0FBSyxFQUFFO1FBQ3RGLElBQUlaLFdBQVdlLE9BQU9uQixNQUFNLEdBQUc7WUFDN0JtQixPQUFPbkIsTUFBTSxDQUFDb0IsS0FBSyxDQUFDLE1BQU1KO1FBQzVCLE9BQU87WUFDTCxJQUFLTixJQUFJLEdBQUdFLE1BQU1FLFFBQVFHLE1BQU0sRUFBRVAsSUFBSUUsS0FBS0YsSUFBSztnQkFDOUNHLFNBQVNDLE9BQU8sQ0FBQ0osRUFBRTtnQkFDbkIsSUFBSUcsVUFBVSxNQUFNO29CQUNsQixJQUFLRixPQUFPRSxPQUFRO3dCQUNsQixJQUFJLENBQUNMLFFBQVFVLElBQUksQ0FBQ0wsUUFBUUYsTUFBTTt3QkFDaENJLE1BQU0sQ0FBQ0osSUFBSSxHQUFHRSxNQUFNLENBQUNGLElBQUk7b0JBQzNCO2dCQUNGO1lBQ0Y7UUFDRjtRQUNBLE9BQU9JO0lBQ1Q7SUFFQVgsYUFBYSxTQUFTaUIsR0FBRztRQUN2QixPQUFPLENBQUMsQ0FBQ0EsT0FBT0YsT0FBT0csU0FBUyxDQUFDQyxRQUFRLENBQUNMLElBQUksQ0FBQ0csU0FBUztJQUMxRDtJQUVBaEIsV0FBVyxTQUFTZ0IsR0FBRztRQUNyQixJQUFJRztRQUNKLE9BQU8sQ0FBQyxDQUFDSCxPQUFRLEVBQUNHLE1BQU0sT0FBT0gsR0FBRSxNQUFPLGNBQWNHLFFBQVEsUUFBTztJQUN2RTtJQUVBdEIsVUFBVSxTQUFTbUIsR0FBRztRQUNwQixJQUFJakIsV0FBV3FCLE1BQU12QixPQUFPLEdBQUc7WUFDN0IsT0FBT3VCLE1BQU12QixPQUFPLENBQUNtQjtRQUN2QixPQUFPO1lBQ0wsT0FBT0YsT0FBT0csU0FBUyxDQUFDQyxRQUFRLENBQUNMLElBQUksQ0FBQ0csU0FBUztRQUNqRDtJQUNGO0lBRUFsQixVQUFVLFNBQVNrQixHQUFHO1FBQ3BCLElBQUlWO1FBQ0osSUFBSVQsUUFBUW1CLE1BQU07WUFDaEIsT0FBTyxDQUFDQSxJQUFJSixNQUFNO1FBQ3BCLE9BQU87WUFDTCxJQUFLTixPQUFPVSxJQUFLO2dCQUNmLElBQUksQ0FBQ2IsUUFBUVUsSUFBSSxDQUFDRyxLQUFLVixNQUFNO2dCQUM3QixPQUFPO1lBQ1Q7WUFDQSxPQUFPO1FBQ1Q7SUFDRjtJQUVBTCxnQkFBZ0IsU0FBU2UsR0FBRztRQUMxQixJQUFJSyxNQUFNQztRQUNWLE9BQU90QixTQUFTZ0IsUUFBU00sQ0FBQUEsUUFBUVIsT0FBT1MsY0FBYyxDQUFDUCxJQUFHLEtBQU9LLENBQUFBLE9BQU9DLE1BQU1FLFdBQVcsS0FBTSxPQUFPSCxTQUFTLGNBQWdCQSxnQkFBZ0JBLFFBQVVJLFNBQVNSLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDTCxJQUFJLENBQUNRLFVBQVVJLFNBQVNSLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDTCxJQUFJLENBQUNDO0lBQ3ZPO0lBRUFsQixXQUFXLFNBQVM4QixHQUFHO1FBQ3JCLElBQUkzQixXQUFXMkIsSUFBSUMsT0FBTyxHQUFHO1lBQzNCLE9BQU9ELElBQUlDLE9BQU87UUFDcEIsT0FBTztZQUNMLE9BQU9EO1FBQ1Q7SUFDRjtJQUVBRSxxQkFBcUIsR0FBR2pDO0lBRXhCaUMseUJBQXlCLEdBQUc3QjtJQUU1QjZCLHVCQUF1QixHQUFHNUI7SUFFMUI0QixzQkFBc0IsR0FBRy9CO0lBRXpCK0Isc0JBQXNCLEdBQUc5QjtJQUV6QjhCLDRCQUE0QixHQUFHM0I7SUFFL0IyQix1QkFBdUIsR0FBR2hDO0FBRTVCLEdBQUdpQixJQUFJLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLWNvZGUvLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvVXRpbGl0eS5qcz9mY2FhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBhc3NpZ24sIGdldFZhbHVlLCBpc0FycmF5LCBpc0VtcHR5LCBpc0Z1bmN0aW9uLCBpc09iamVjdCwgaXNQbGFpbk9iamVjdCxcbiAgICBzbGljZSA9IFtdLnNsaWNlLFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBhc3NpZ24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwga2V5LCBsZW4sIHNvdXJjZSwgc291cmNlcywgdGFyZ2V0O1xuICAgIHRhcmdldCA9IGFyZ3VtZW50c1swXSwgc291cmNlcyA9IDIgPD0gYXJndW1lbnRzLmxlbmd0aCA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSA6IFtdO1xuICAgIGlmIChpc0Z1bmN0aW9uKE9iamVjdC5hc3NpZ24pKSB7XG4gICAgICBPYmplY3QuYXNzaWduLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHNvdXJjZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgc291cmNlID0gc291cmNlc1tpXTtcbiAgICAgICAgaWYgKHNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgICAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICBpc0Z1bmN0aW9uID0gZnVuY3Rpb24odmFsKSB7XG4gICAgcmV0dXJuICEhdmFsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuICB9O1xuXG4gIGlzT2JqZWN0ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgdmFyIHJlZjtcbiAgICByZXR1cm4gISF2YWwgJiYgKChyZWYgPSB0eXBlb2YgdmFsKSA9PT0gJ2Z1bmN0aW9uJyB8fCByZWYgPT09ICdvYmplY3QnKTtcbiAgfTtcblxuICBpc0FycmF5ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oQXJyYXkuaXNBcnJheSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICB9XG4gIH07XG5cbiAgaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHZhciBrZXk7XG4gICAgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmV0dXJuICF2YWwubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGtleSBpbiB2YWwpIHtcbiAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwodmFsLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xuXG4gIGlzUGxhaW5PYmplY3QgPSBmdW5jdGlvbih2YWwpIHtcbiAgICB2YXIgY3RvciwgcHJvdG87XG4gICAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgKHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCkpICYmIChjdG9yID0gcHJvdG8uY29uc3RydWN0b3IpICYmICh0eXBlb2YgY3RvciA9PT0gJ2Z1bmN0aW9uJykgJiYgKGN0b3IgaW5zdGFuY2VvZiBjdG9yKSAmJiAoRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoY3RvcikgPT09IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKE9iamVjdCkpO1xuICB9O1xuXG4gIGdldFZhbHVlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24ob2JqLnZhbHVlT2YpKSB7XG4gICAgICByZXR1cm4gb2JqLnZhbHVlT2YoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHMuYXNzaWduID0gYXNzaWduO1xuXG4gIG1vZHVsZS5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG4gIG1vZHVsZS5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbiAgbW9kdWxlLmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbiAgbW9kdWxlLmV4cG9ydHMuaXNFbXB0eSA9IGlzRW1wdHk7XG5cbiAgbW9kdWxlLmV4cG9ydHMuaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG5cbiAgbW9kdWxlLmV4cG9ydHMuZ2V0VmFsdWUgPSBnZXRWYWx1ZTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJhc3NpZ24iLCJnZXRWYWx1ZSIsImlzQXJyYXkiLCJpc0VtcHR5IiwiaXNGdW5jdGlvbiIsImlzT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsInNsaWNlIiwiaGFzUHJvcCIsImhhc093blByb3BlcnR5IiwiaSIsImtleSIsImxlbiIsInNvdXJjZSIsInNvdXJjZXMiLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJjYWxsIiwiT2JqZWN0IiwiYXBwbHkiLCJ2YWwiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsInJlZiIsIkFycmF5IiwiY3RvciIsInByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJjb25zdHJ1Y3RvciIsIkZ1bmN0aW9uIiwib2JqIiwidmFsdWVPZiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/Utility.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/WriterState.js":
/*!****************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/WriterState.js ***!
  \****************************************************/
/***/ ((module) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    module.exports = {\n        None: 0,\n        OpenTag: 1,\n        InsideTag: 2,\n        CloseTag: 3\n    };\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9Xcml0ZXJTdGF0ZS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsbUNBQW1DO0FBQ2xDO0lBQ0NBLE9BQU9DLE9BQU8sR0FBRztRQUNmQyxNQUFNO1FBQ05DLFNBQVM7UUFDVEMsV0FBVztRQUNYQyxVQUFVO0lBQ1o7QUFFRixHQUFHQyxJQUFJLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLWNvZGUvLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvV3JpdGVyU3RhdGUuanM/NTljYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBOb25lOiAwLFxuICAgIE9wZW5UYWc6IDEsXG4gICAgSW5zaWRlVGFnOiAyLFxuICAgIENsb3NlVGFnOiAzXG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIk5vbmUiLCJPcGVuVGFnIiwiSW5zaWRlVGFnIiwiQ2xvc2VUYWciLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/WriterState.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLAttribute.js":
/*!*****************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLAttribute.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLAttribute, XMLNode;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    module.exports = XMLAttribute = function() {\n        function XMLAttribute(parent, name, value) {\n            this.parent = parent;\n            if (this.parent) {\n                this.options = this.parent.options;\n                this.stringify = this.parent.stringify;\n            }\n            if (name == null) {\n                throw new Error(\"Missing attribute name. \" + this.debugInfo(name));\n            }\n            this.name = this.stringify.name(name);\n            this.value = this.stringify.attValue(value);\n            this.type = NodeType.Attribute;\n            this.isId = false;\n            this.schemaTypeInfo = null;\n        }\n        Object.defineProperty(XMLAttribute.prototype, \"nodeType\", {\n            get: function() {\n                return this.type;\n            }\n        });\n        Object.defineProperty(XMLAttribute.prototype, \"ownerElement\", {\n            get: function() {\n                return this.parent;\n            }\n        });\n        Object.defineProperty(XMLAttribute.prototype, \"textContent\", {\n            get: function() {\n                return this.value;\n            },\n            set: function(value) {\n                return this.value = value || \"\";\n            }\n        });\n        Object.defineProperty(XMLAttribute.prototype, \"namespaceURI\", {\n            get: function() {\n                return \"\";\n            }\n        });\n        Object.defineProperty(XMLAttribute.prototype, \"prefix\", {\n            get: function() {\n                return \"\";\n            }\n        });\n        Object.defineProperty(XMLAttribute.prototype, \"localName\", {\n            get: function() {\n                return this.name;\n            }\n        });\n        Object.defineProperty(XMLAttribute.prototype, \"specified\", {\n            get: function() {\n                return true;\n            }\n        });\n        XMLAttribute.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLAttribute.prototype.toString = function(options) {\n            return this.options.writer.attribute(this, this.options.writer.filterOptions(options));\n        };\n        XMLAttribute.prototype.debugInfo = function(name) {\n            name = name || this.name;\n            if (name == null) {\n                return \"parent: <\" + this.parent.name + \">\";\n            } else {\n                return \"attribute: {\" + name + \"}, parent: <\" + this.parent.name + \">\";\n            }\n        };\n        XMLAttribute.prototype.isEqualNode = function(node) {\n            if (node.namespaceURI !== this.namespaceURI) {\n                return false;\n            }\n            if (node.prefix !== this.prefix) {\n                return false;\n            }\n            if (node.localName !== this.localName) {\n                return false;\n            }\n            if (node.value !== this.value) {\n                return false;\n            }\n            return true;\n        };\n        return XMLAttribute;\n    }();\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxBdHRyaWJ1dGUuanMiLCJtYXBwaW5ncyI6IjtBQUFBLG1DQUFtQztBQUNsQztJQUNDLElBQUlBLFVBQVVDLGNBQWNDO0lBRTVCRixXQUFXRyxtQkFBT0EsQ0FBQztJQUVuQkQsVUFBVUMsbUJBQU9BLENBQUM7SUFFbEJDLE9BQU9DLE9BQU8sR0FBR0osZUFBZTtRQUM5QixTQUFTQSxhQUFhSyxNQUFNLEVBQUVDLElBQUksRUFBRUMsS0FBSztZQUN2QyxJQUFJLENBQUNGLE1BQU0sR0FBR0E7WUFDZCxJQUFJLElBQUksQ0FBQ0EsTUFBTSxFQUFFO2dCQUNmLElBQUksQ0FBQ0csT0FBTyxHQUFHLElBQUksQ0FBQ0gsTUFBTSxDQUFDRyxPQUFPO2dCQUNsQyxJQUFJLENBQUNDLFNBQVMsR0FBRyxJQUFJLENBQUNKLE1BQU0sQ0FBQ0ksU0FBUztZQUN4QztZQUNBLElBQUlILFFBQVEsTUFBTTtnQkFDaEIsTUFBTSxJQUFJSSxNQUFNLDZCQUE2QixJQUFJLENBQUNDLFNBQVMsQ0FBQ0w7WUFDOUQ7WUFDQSxJQUFJLENBQUNBLElBQUksR0FBRyxJQUFJLENBQUNHLFNBQVMsQ0FBQ0gsSUFBSSxDQUFDQTtZQUNoQyxJQUFJLENBQUNDLEtBQUssR0FBRyxJQUFJLENBQUNFLFNBQVMsQ0FBQ0csUUFBUSxDQUFDTDtZQUNyQyxJQUFJLENBQUNNLElBQUksR0FBR2QsU0FBU2UsU0FBUztZQUM5QixJQUFJLENBQUNDLElBQUksR0FBRztZQUNaLElBQUksQ0FBQ0MsY0FBYyxHQUFHO1FBQ3hCO1FBRUFDLE9BQU9DLGNBQWMsQ0FBQ2xCLGFBQWFtQixTQUFTLEVBQUUsWUFBWTtZQUN4REMsS0FBSztnQkFDSCxPQUFPLElBQUksQ0FBQ1AsSUFBSTtZQUNsQjtRQUNGO1FBRUFJLE9BQU9DLGNBQWMsQ0FBQ2xCLGFBQWFtQixTQUFTLEVBQUUsZ0JBQWdCO1lBQzVEQyxLQUFLO2dCQUNILE9BQU8sSUFBSSxDQUFDZixNQUFNO1lBQ3BCO1FBQ0Y7UUFFQVksT0FBT0MsY0FBYyxDQUFDbEIsYUFBYW1CLFNBQVMsRUFBRSxlQUFlO1lBQzNEQyxLQUFLO2dCQUNILE9BQU8sSUFBSSxDQUFDYixLQUFLO1lBQ25CO1lBQ0FjLEtBQUssU0FBU2QsS0FBSztnQkFDakIsT0FBTyxJQUFJLENBQUNBLEtBQUssR0FBR0EsU0FBUztZQUMvQjtRQUNGO1FBRUFVLE9BQU9DLGNBQWMsQ0FBQ2xCLGFBQWFtQixTQUFTLEVBQUUsZ0JBQWdCO1lBQzVEQyxLQUFLO2dCQUNILE9BQU87WUFDVDtRQUNGO1FBRUFILE9BQU9DLGNBQWMsQ0FBQ2xCLGFBQWFtQixTQUFTLEVBQUUsVUFBVTtZQUN0REMsS0FBSztnQkFDSCxPQUFPO1lBQ1Q7UUFDRjtRQUVBSCxPQUFPQyxjQUFjLENBQUNsQixhQUFhbUIsU0FBUyxFQUFFLGFBQWE7WUFDekRDLEtBQUs7Z0JBQ0gsT0FBTyxJQUFJLENBQUNkLElBQUk7WUFDbEI7UUFDRjtRQUVBVyxPQUFPQyxjQUFjLENBQUNsQixhQUFhbUIsU0FBUyxFQUFFLGFBQWE7WUFDekRDLEtBQUs7Z0JBQ0gsT0FBTztZQUNUO1FBQ0Y7UUFFQXBCLGFBQWFtQixTQUFTLENBQUNHLEtBQUssR0FBRztZQUM3QixPQUFPTCxPQUFPTSxNQUFNLENBQUMsSUFBSTtRQUMzQjtRQUVBdkIsYUFBYW1CLFNBQVMsQ0FBQ0ssUUFBUSxHQUFHLFNBQVNoQixPQUFPO1lBQ2hELE9BQU8sSUFBSSxDQUFDQSxPQUFPLENBQUNpQixNQUFNLENBQUNDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDbEIsT0FBTyxDQUFDaUIsTUFBTSxDQUFDRSxhQUFhLENBQUNuQjtRQUMvRTtRQUVBUixhQUFhbUIsU0FBUyxDQUFDUixTQUFTLEdBQUcsU0FBU0wsSUFBSTtZQUM5Q0EsT0FBT0EsUUFBUSxJQUFJLENBQUNBLElBQUk7WUFDeEIsSUFBSUEsUUFBUSxNQUFNO2dCQUNoQixPQUFPLGNBQWMsSUFBSSxDQUFDRCxNQUFNLENBQUNDLElBQUksR0FBRztZQUMxQyxPQUFPO2dCQUNMLE9BQU8saUJBQWlCQSxPQUFPLGlCQUFpQixJQUFJLENBQUNELE1BQU0sQ0FBQ0MsSUFBSSxHQUFHO1lBQ3JFO1FBQ0Y7UUFFQU4sYUFBYW1CLFNBQVMsQ0FBQ1MsV0FBVyxHQUFHLFNBQVNDLElBQUk7WUFDaEQsSUFBSUEsS0FBS0MsWUFBWSxLQUFLLElBQUksQ0FBQ0EsWUFBWSxFQUFFO2dCQUMzQyxPQUFPO1lBQ1Q7WUFDQSxJQUFJRCxLQUFLRSxNQUFNLEtBQUssSUFBSSxDQUFDQSxNQUFNLEVBQUU7Z0JBQy9CLE9BQU87WUFDVDtZQUNBLElBQUlGLEtBQUtHLFNBQVMsS0FBSyxJQUFJLENBQUNBLFNBQVMsRUFBRTtnQkFDckMsT0FBTztZQUNUO1lBQ0EsSUFBSUgsS0FBS3RCLEtBQUssS0FBSyxJQUFJLENBQUNBLEtBQUssRUFBRTtnQkFDN0IsT0FBTztZQUNUO1lBQ0EsT0FBTztRQUNUO1FBRUEsT0FBT1A7SUFFVDtBQUVGLEdBQUdpQyxJQUFJLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLWNvZGUvLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MQXR0cmlidXRlLmpzP2UxZDEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxBdHRyaWJ1dGUsIFhNTE5vZGU7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MQXR0cmlidXRlID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFhNTEF0dHJpYnV0ZShwYXJlbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLnBhcmVudC5vcHRpb25zO1xuICAgICAgICB0aGlzLnN0cmluZ2lmeSA9IHRoaXMucGFyZW50LnN0cmluZ2lmeTtcbiAgICAgIH1cbiAgICAgIGlmIChuYW1lID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBhdHRyaWJ1dGUgbmFtZS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhuYW1lKSk7XG4gICAgICB9XG4gICAgICB0aGlzLm5hbWUgPSB0aGlzLnN0cmluZ2lmeS5uYW1lKG5hbWUpO1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc3RyaW5naWZ5LmF0dFZhbHVlKHZhbHVlKTtcbiAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLkF0dHJpYnV0ZTtcbiAgICAgIHRoaXMuaXNJZCA9IGZhbHNlO1xuICAgICAgdGhpcy5zY2hlbWFUeXBlSW5mbyA9IG51bGw7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUsICdub2RlVHlwZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MQXR0cmlidXRlLnByb3RvdHlwZSwgJ293bmVyRWxlbWVudCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxBdHRyaWJ1dGUucHJvdG90eXBlLCAndGV4dENvbnRlbnQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlID0gdmFsdWUgfHwgJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MQXR0cmlidXRlLnByb3RvdHlwZSwgJ25hbWVzcGFjZVVSSScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxBdHRyaWJ1dGUucHJvdG90eXBlLCAncHJlZml4Jywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUsICdsb2NhbE5hbWUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUsICdzcGVjaWZpZWQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH07XG5cbiAgICBYTUxBdHRyaWJ1dGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuYXR0cmlidXRlKHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUuZGVidWdJbmZvID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgbmFtZSA9IG5hbWUgfHwgdGhpcy5uYW1lO1xuICAgICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gXCJwYXJlbnQ6IDxcIiArIHRoaXMucGFyZW50Lm5hbWUgKyBcIj5cIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcImF0dHJpYnV0ZToge1wiICsgbmFtZSArIFwifSwgcGFyZW50OiA8XCIgKyB0aGlzLnBhcmVudC5uYW1lICsgXCI+XCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUuaXNFcXVhbE5vZGUgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAobm9kZS5uYW1lc3BhY2VVUkkgIT09IHRoaXMubmFtZXNwYWNlVVJJKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLnByZWZpeCAhPT0gdGhpcy5wcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUubG9jYWxOYW1lICE9PSB0aGlzLmxvY2FsTmFtZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS52YWx1ZSAhPT0gdGhpcy52YWx1ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTEF0dHJpYnV0ZTtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIk5vZGVUeXBlIiwiWE1MQXR0cmlidXRlIiwiWE1MTm9kZSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwicGFyZW50IiwibmFtZSIsInZhbHVlIiwib3B0aW9ucyIsInN0cmluZ2lmeSIsIkVycm9yIiwiZGVidWdJbmZvIiwiYXR0VmFsdWUiLCJ0eXBlIiwiQXR0cmlidXRlIiwiaXNJZCIsInNjaGVtYVR5cGVJbmZvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJwcm90b3R5cGUiLCJnZXQiLCJzZXQiLCJjbG9uZSIsImNyZWF0ZSIsInRvU3RyaW5nIiwid3JpdGVyIiwiYXR0cmlidXRlIiwiZmlsdGVyT3B0aW9ucyIsImlzRXF1YWxOb2RlIiwibm9kZSIsIm5hbWVzcGFjZVVSSSIsInByZWZpeCIsImxvY2FsTmFtZSIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLAttribute.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLCData.js":
/*!*************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLCData.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLCData, XMLCharacterData, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLCharacterData = __webpack_require__(/*! ./XMLCharacterData */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLCharacterData.js\");\n    module.exports = XMLCData = function(superClass) {\n        extend(XMLCData, superClass);\n        function XMLCData(parent, text) {\n            XMLCData.__super__.constructor.call(this, parent);\n            if (text == null) {\n                throw new Error(\"Missing CDATA text. \" + this.debugInfo());\n            }\n            this.name = \"#cdata-section\";\n            this.type = NodeType.CData;\n            this.value = this.stringify.cdata(text);\n        }\n        XMLCData.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLCData.prototype.toString = function(options) {\n            return this.options.writer.cdata(this, this.options.writer.filterOptions(options));\n        };\n        return XMLCData;\n    }(XMLCharacterData);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxDRGF0YS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsbUNBQW1DO0FBQ2xDO0lBQ0MsSUFBSUEsVUFBVUMsVUFBVUMsa0JBQ3RCQyxTQUFTLFNBQVNDLEtBQUssRUFBRUMsTUFBTTtRQUFJLElBQUssSUFBSUMsT0FBT0QsT0FBUTtZQUFFLElBQUlFLFFBQVFDLElBQUksQ0FBQ0gsUUFBUUMsTUFBTUYsS0FBSyxDQUFDRSxJQUFJLEdBQUdELE1BQU0sQ0FBQ0MsSUFBSTtRQUFFO1FBQUUsU0FBU0c7WUFBUyxJQUFJLENBQUNDLFdBQVcsR0FBR047UUFBTztRQUFFSyxLQUFLRSxTQUFTLEdBQUdOLE9BQU9NLFNBQVM7UUFBRVAsTUFBTU8sU0FBUyxHQUFHLElBQUlGO1FBQVFMLE1BQU1RLFNBQVMsR0FBR1AsT0FBT00sU0FBUztRQUFFLE9BQU9QO0lBQU8sR0FDelJHLFVBQVUsQ0FBQyxFQUFFTSxjQUFjO0lBRTdCYixXQUFXYyxtQkFBT0EsQ0FBQztJQUVuQlosbUJBQW1CWSxtQkFBT0EsQ0FBQztJQUUzQkMsT0FBT0MsT0FBTyxHQUFHZixXQUFXLFNBQVVnQixVQUFVO1FBQzlDZCxPQUFPRixVQUFVZ0I7UUFFakIsU0FBU2hCLFNBQVNJLE1BQU0sRUFBRWEsSUFBSTtZQUM1QmpCLFNBQVNXLFNBQVMsQ0FBQ0YsV0FBVyxDQUFDRixJQUFJLENBQUMsSUFBSSxFQUFFSDtZQUMxQyxJQUFJYSxRQUFRLE1BQU07Z0JBQ2hCLE1BQU0sSUFBSUMsTUFBTSx5QkFBeUIsSUFBSSxDQUFDQyxTQUFTO1lBQ3pEO1lBQ0EsSUFBSSxDQUFDQyxJQUFJLEdBQUc7WUFDWixJQUFJLENBQUNDLElBQUksR0FBR3RCLFNBQVN1QixLQUFLO1lBQzFCLElBQUksQ0FBQ0MsS0FBSyxHQUFHLElBQUksQ0FBQ0MsU0FBUyxDQUFDQyxLQUFLLENBQUNSO1FBQ3BDO1FBRUFqQixTQUFTVSxTQUFTLENBQUNnQixLQUFLLEdBQUc7WUFDekIsT0FBT0MsT0FBT0MsTUFBTSxDQUFDLElBQUk7UUFDM0I7UUFFQTVCLFNBQVNVLFNBQVMsQ0FBQ21CLFFBQVEsR0FBRyxTQUFTQyxPQUFPO1lBQzVDLE9BQU8sSUFBSSxDQUFDQSxPQUFPLENBQUNDLE1BQU0sQ0FBQ04sS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUNLLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxhQUFhLENBQUNGO1FBQzNFO1FBRUEsT0FBTzlCO0lBRVQsRUFBR0M7QUFFTCxHQUFHTSxJQUFJLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLWNvZGUvLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MQ0RhdGEuanM/MDBiMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFhNTENEYXRhLCBYTUxDaGFyYWN0ZXJEYXRhLFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MQ2hhcmFjdGVyRGF0YSA9IHJlcXVpcmUoJy4vWE1MQ2hhcmFjdGVyRGF0YScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MQ0RhdGEgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxDRGF0YSwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxDRGF0YShwYXJlbnQsIHRleHQpIHtcbiAgICAgIFhNTENEYXRhLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAodGV4dCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgQ0RBVEEgdGV4dC4gXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubmFtZSA9IFwiI2NkYXRhLXNlY3Rpb25cIjtcbiAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLkNEYXRhO1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc3RyaW5naWZ5LmNkYXRhKHRleHQpO1xuICAgIH1cblxuICAgIFhNTENEYXRhLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfTtcblxuICAgIFhNTENEYXRhLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLmNkYXRhKHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxDRGF0YTtcblxuICB9KShYTUxDaGFyYWN0ZXJEYXRhKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJOb2RlVHlwZSIsIlhNTENEYXRhIiwiWE1MQ2hhcmFjdGVyRGF0YSIsImV4dGVuZCIsImNoaWxkIiwicGFyZW50Iiwia2V5IiwiaGFzUHJvcCIsImNhbGwiLCJjdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfX3N1cGVyX18iLCJoYXNPd25Qcm9wZXJ0eSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic3VwZXJDbGFzcyIsInRleHQiLCJFcnJvciIsImRlYnVnSW5mbyIsIm5hbWUiLCJ0eXBlIiwiQ0RhdGEiLCJ2YWx1ZSIsInN0cmluZ2lmeSIsImNkYXRhIiwiY2xvbmUiLCJPYmplY3QiLCJjcmVhdGUiLCJ0b1N0cmluZyIsIm9wdGlvbnMiLCJ3cml0ZXIiLCJmaWx0ZXJPcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLCData.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLCharacterData.js":
/*!*********************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLCharacterData.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var XMLCharacterData, XMLNode, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    module.exports = XMLCharacterData = function(superClass) {\n        extend(XMLCharacterData, superClass);\n        function XMLCharacterData(parent) {\n            XMLCharacterData.__super__.constructor.call(this, parent);\n            this.value = \"\";\n        }\n        Object.defineProperty(XMLCharacterData.prototype, \"data\", {\n            get: function() {\n                return this.value;\n            },\n            set: function(value) {\n                return this.value = value || \"\";\n            }\n        });\n        Object.defineProperty(XMLCharacterData.prototype, \"length\", {\n            get: function() {\n                return this.value.length;\n            }\n        });\n        Object.defineProperty(XMLCharacterData.prototype, \"textContent\", {\n            get: function() {\n                return this.value;\n            },\n            set: function(value) {\n                return this.value = value || \"\";\n            }\n        });\n        XMLCharacterData.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLCharacterData.prototype.substringData = function(offset, count) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLCharacterData.prototype.appendData = function(arg) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLCharacterData.prototype.insertData = function(offset, arg) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLCharacterData.prototype.deleteData = function(offset, count) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLCharacterData.prototype.replaceData = function(offset, count, arg) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLCharacterData.prototype.isEqualNode = function(node) {\n            if (!XMLCharacterData.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n                return false;\n            }\n            if (node.data !== this.data) {\n                return false;\n            }\n            return true;\n        };\n        return XMLCharacterData;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxDaGFyYWN0ZXJEYXRhLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxtQ0FBbUM7QUFDbEM7SUFDQyxJQUFJQSxrQkFBa0JDLFNBQ3BCQyxTQUFTLFNBQVNDLEtBQUssRUFBRUMsTUFBTTtRQUFJLElBQUssSUFBSUMsT0FBT0QsT0FBUTtZQUFFLElBQUlFLFFBQVFDLElBQUksQ0FBQ0gsUUFBUUMsTUFBTUYsS0FBSyxDQUFDRSxJQUFJLEdBQUdELE1BQU0sQ0FBQ0MsSUFBSTtRQUFFO1FBQUUsU0FBU0c7WUFBUyxJQUFJLENBQUNDLFdBQVcsR0FBR047UUFBTztRQUFFSyxLQUFLRSxTQUFTLEdBQUdOLE9BQU9NLFNBQVM7UUFBRVAsTUFBTU8sU0FBUyxHQUFHLElBQUlGO1FBQVFMLE1BQU1RLFNBQVMsR0FBR1AsT0FBT00sU0FBUztRQUFFLE9BQU9QO0lBQU8sR0FDelJHLFVBQVUsQ0FBQyxFQUFFTSxjQUFjO0lBRTdCWCxVQUFVWSxtQkFBT0EsQ0FBQztJQUVsQkMsT0FBT0MsT0FBTyxHQUFHZixtQkFBbUIsU0FBVWdCLFVBQVU7UUFDdERkLE9BQU9GLGtCQUFrQmdCO1FBRXpCLFNBQVNoQixpQkFBaUJJLE1BQU07WUFDOUJKLGlCQUFpQlcsU0FBUyxDQUFDRixXQUFXLENBQUNGLElBQUksQ0FBQyxJQUFJLEVBQUVIO1lBQ2xELElBQUksQ0FBQ2EsS0FBSyxHQUFHO1FBQ2Y7UUFFQUMsT0FBT0MsY0FBYyxDQUFDbkIsaUJBQWlCVSxTQUFTLEVBQUUsUUFBUTtZQUN4RFUsS0FBSztnQkFDSCxPQUFPLElBQUksQ0FBQ0gsS0FBSztZQUNuQjtZQUNBSSxLQUFLLFNBQVNKLEtBQUs7Z0JBQ2pCLE9BQU8sSUFBSSxDQUFDQSxLQUFLLEdBQUdBLFNBQVM7WUFDL0I7UUFDRjtRQUVBQyxPQUFPQyxjQUFjLENBQUNuQixpQkFBaUJVLFNBQVMsRUFBRSxVQUFVO1lBQzFEVSxLQUFLO2dCQUNILE9BQU8sSUFBSSxDQUFDSCxLQUFLLENBQUNLLE1BQU07WUFDMUI7UUFDRjtRQUVBSixPQUFPQyxjQUFjLENBQUNuQixpQkFBaUJVLFNBQVMsRUFBRSxlQUFlO1lBQy9EVSxLQUFLO2dCQUNILE9BQU8sSUFBSSxDQUFDSCxLQUFLO1lBQ25CO1lBQ0FJLEtBQUssU0FBU0osS0FBSztnQkFDakIsT0FBTyxJQUFJLENBQUNBLEtBQUssR0FBR0EsU0FBUztZQUMvQjtRQUNGO1FBRUFqQixpQkFBaUJVLFNBQVMsQ0FBQ2EsS0FBSyxHQUFHO1lBQ2pDLE9BQU9MLE9BQU9NLE1BQU0sQ0FBQyxJQUFJO1FBQzNCO1FBRUF4QixpQkFBaUJVLFNBQVMsQ0FBQ2UsYUFBYSxHQUFHLFNBQVNDLE1BQU0sRUFBRUMsS0FBSztZQUMvRCxNQUFNLElBQUlDLE1BQU0sd0NBQXdDLElBQUksQ0FBQ0MsU0FBUztRQUN4RTtRQUVBN0IsaUJBQWlCVSxTQUFTLENBQUNvQixVQUFVLEdBQUcsU0FBU0MsR0FBRztZQUNsRCxNQUFNLElBQUlILE1BQU0sd0NBQXdDLElBQUksQ0FBQ0MsU0FBUztRQUN4RTtRQUVBN0IsaUJBQWlCVSxTQUFTLENBQUNzQixVQUFVLEdBQUcsU0FBU04sTUFBTSxFQUFFSyxHQUFHO1lBQzFELE1BQU0sSUFBSUgsTUFBTSx3Q0FBd0MsSUFBSSxDQUFDQyxTQUFTO1FBQ3hFO1FBRUE3QixpQkFBaUJVLFNBQVMsQ0FBQ3VCLFVBQVUsR0FBRyxTQUFTUCxNQUFNLEVBQUVDLEtBQUs7WUFDNUQsTUFBTSxJQUFJQyxNQUFNLHdDQUF3QyxJQUFJLENBQUNDLFNBQVM7UUFDeEU7UUFFQTdCLGlCQUFpQlUsU0FBUyxDQUFDd0IsV0FBVyxHQUFHLFNBQVNSLE1BQU0sRUFBRUMsS0FBSyxFQUFFSSxHQUFHO1lBQ2xFLE1BQU0sSUFBSUgsTUFBTSx3Q0FBd0MsSUFBSSxDQUFDQyxTQUFTO1FBQ3hFO1FBRUE3QixpQkFBaUJVLFNBQVMsQ0FBQ3lCLFdBQVcsR0FBRyxTQUFTQyxJQUFJO1lBQ3BELElBQUksQ0FBQ3BDLGlCQUFpQlcsU0FBUyxDQUFDd0IsV0FBVyxDQUFDRSxLQUFLLENBQUMsSUFBSSxFQUFFQyxXQUFXSCxXQUFXLENBQUNDLE9BQU87Z0JBQ3BGLE9BQU87WUFDVDtZQUNBLElBQUlBLEtBQUtHLElBQUksS0FBSyxJQUFJLENBQUNBLElBQUksRUFBRTtnQkFDM0IsT0FBTztZQUNUO1lBQ0EsT0FBTztRQUNUO1FBRUEsT0FBT3ZDO0lBRVQsRUFBR0M7QUFFTCxHQUFHTSxJQUFJLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLWNvZGUvLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MQ2hhcmFjdGVyRGF0YS5qcz9hN2RhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxDaGFyYWN0ZXJEYXRhLCBYTUxOb2RlLFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MQ2hhcmFjdGVyRGF0YSA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTENoYXJhY3RlckRhdGEsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MQ2hhcmFjdGVyRGF0YShwYXJlbnQpIHtcbiAgICAgIFhNTENoYXJhY3RlckRhdGEuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIHRoaXMudmFsdWUgPSAnJztcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MQ2hhcmFjdGVyRGF0YS5wcm90b3R5cGUsICdkYXRhJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA9IHZhbHVlIHx8ICcnO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLCAnbGVuZ3RoJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUubGVuZ3RoO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLCAndGV4dENvbnRlbnQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlID0gdmFsdWUgfHwgJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxDaGFyYWN0ZXJEYXRhLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfTtcblxuICAgIFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLnN1YnN0cmluZ0RhdGEgPSBmdW5jdGlvbihvZmZzZXQsIGNvdW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLmFwcGVuZERhdGEgPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MQ2hhcmFjdGVyRGF0YS5wcm90b3R5cGUuaW5zZXJ0RGF0YSA9IGZ1bmN0aW9uKG9mZnNldCwgYXJnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLmRlbGV0ZURhdGEgPSBmdW5jdGlvbihvZmZzZXQsIGNvdW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLnJlcGxhY2VEYXRhID0gZnVuY3Rpb24ob2Zmc2V0LCBjb3VudCwgYXJnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLmlzRXF1YWxOb2RlID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKCFYTUxDaGFyYWN0ZXJEYXRhLl9fc3VwZXJfXy5pc0VxdWFsTm9kZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLmlzRXF1YWxOb2RlKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLmRhdGEgIT09IHRoaXMuZGF0YSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTENoYXJhY3RlckRhdGE7XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiWE1MQ2hhcmFjdGVyRGF0YSIsIlhNTE5vZGUiLCJleHRlbmQiLCJjaGlsZCIsInBhcmVudCIsImtleSIsImhhc1Byb3AiLCJjYWxsIiwiY3RvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX19zdXBlcl9fIiwiaGFzT3duUHJvcGVydHkiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInN1cGVyQ2xhc3MiLCJ2YWx1ZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0Iiwic2V0IiwibGVuZ3RoIiwiY2xvbmUiLCJjcmVhdGUiLCJzdWJzdHJpbmdEYXRhIiwib2Zmc2V0IiwiY291bnQiLCJFcnJvciIsImRlYnVnSW5mbyIsImFwcGVuZERhdGEiLCJhcmciLCJpbnNlcnREYXRhIiwiZGVsZXRlRGF0YSIsInJlcGxhY2VEYXRhIiwiaXNFcXVhbE5vZGUiLCJub2RlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLCharacterData.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLComment.js":
/*!***************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLComment.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLCharacterData, XMLComment, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLCharacterData = __webpack_require__(/*! ./XMLCharacterData */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLCharacterData.js\");\n    module.exports = XMLComment = function(superClass) {\n        extend(XMLComment, superClass);\n        function XMLComment(parent, text) {\n            XMLComment.__super__.constructor.call(this, parent);\n            if (text == null) {\n                throw new Error(\"Missing comment text. \" + this.debugInfo());\n            }\n            this.name = \"#comment\";\n            this.type = NodeType.Comment;\n            this.value = this.stringify.comment(text);\n        }\n        XMLComment.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLComment.prototype.toString = function(options) {\n            return this.options.writer.comment(this, this.options.writer.filterOptions(options));\n        };\n        return XMLComment;\n    }(XMLCharacterData);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxDb21tZW50LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxtQ0FBbUM7QUFDbEM7SUFDQyxJQUFJQSxVQUFVQyxrQkFBa0JDLFlBQzlCQyxTQUFTLFNBQVNDLEtBQUssRUFBRUMsTUFBTTtRQUFJLElBQUssSUFBSUMsT0FBT0QsT0FBUTtZQUFFLElBQUlFLFFBQVFDLElBQUksQ0FBQ0gsUUFBUUMsTUFBTUYsS0FBSyxDQUFDRSxJQUFJLEdBQUdELE1BQU0sQ0FBQ0MsSUFBSTtRQUFFO1FBQUUsU0FBU0c7WUFBUyxJQUFJLENBQUNDLFdBQVcsR0FBR047UUFBTztRQUFFSyxLQUFLRSxTQUFTLEdBQUdOLE9BQU9NLFNBQVM7UUFBRVAsTUFBTU8sU0FBUyxHQUFHLElBQUlGO1FBQVFMLE1BQU1RLFNBQVMsR0FBR1AsT0FBT00sU0FBUztRQUFFLE9BQU9QO0lBQU8sR0FDelJHLFVBQVUsQ0FBQyxFQUFFTSxjQUFjO0lBRTdCYixXQUFXYyxtQkFBT0EsQ0FBQztJQUVuQmIsbUJBQW1CYSxtQkFBT0EsQ0FBQztJQUUzQkMsT0FBT0MsT0FBTyxHQUFHZCxhQUFhLFNBQVVlLFVBQVU7UUFDaERkLE9BQU9ELFlBQVllO1FBRW5CLFNBQVNmLFdBQVdHLE1BQU0sRUFBRWEsSUFBSTtZQUM5QmhCLFdBQVdVLFNBQVMsQ0FBQ0YsV0FBVyxDQUFDRixJQUFJLENBQUMsSUFBSSxFQUFFSDtZQUM1QyxJQUFJYSxRQUFRLE1BQU07Z0JBQ2hCLE1BQU0sSUFBSUMsTUFBTSwyQkFBMkIsSUFBSSxDQUFDQyxTQUFTO1lBQzNEO1lBQ0EsSUFBSSxDQUFDQyxJQUFJLEdBQUc7WUFDWixJQUFJLENBQUNDLElBQUksR0FBR3RCLFNBQVN1QixPQUFPO1lBQzVCLElBQUksQ0FBQ0MsS0FBSyxHQUFHLElBQUksQ0FBQ0MsU0FBUyxDQUFDQyxPQUFPLENBQUNSO1FBQ3RDO1FBRUFoQixXQUFXUyxTQUFTLENBQUNnQixLQUFLLEdBQUc7WUFDM0IsT0FBT0MsT0FBT0MsTUFBTSxDQUFDLElBQUk7UUFDM0I7UUFFQTNCLFdBQVdTLFNBQVMsQ0FBQ21CLFFBQVEsR0FBRyxTQUFTQyxPQUFPO1lBQzlDLE9BQU8sSUFBSSxDQUFDQSxPQUFPLENBQUNDLE1BQU0sQ0FBQ04sT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUNLLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxhQUFhLENBQUNGO1FBQzdFO1FBRUEsT0FBTzdCO0lBRVQsRUFBR0Q7QUFFTCxHQUFHTyxJQUFJLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLWNvZGUvLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MQ29tbWVudC5qcz84MDZiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MQ2hhcmFjdGVyRGF0YSwgWE1MQ29tbWVudCxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIFhNTENoYXJhY3RlckRhdGEgPSByZXF1aXJlKCcuL1hNTENoYXJhY3RlckRhdGEnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTENvbW1lbnQgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxDb21tZW50LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTENvbW1lbnQocGFyZW50LCB0ZXh0KSB7XG4gICAgICBYTUxDb21tZW50Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAodGV4dCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgY29tbWVudCB0ZXh0LiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgdGhpcy5uYW1lID0gXCIjY29tbWVudFwiO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuQ29tbWVudDtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5jb21tZW50KHRleHQpO1xuICAgIH1cblxuICAgIFhNTENvbW1lbnQucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgWE1MQ29tbWVudC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5jb21tZW50KHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxDb21tZW50O1xuXG4gIH0pKFhNTENoYXJhY3RlckRhdGEpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIk5vZGVUeXBlIiwiWE1MQ2hhcmFjdGVyRGF0YSIsIlhNTENvbW1lbnQiLCJleHRlbmQiLCJjaGlsZCIsInBhcmVudCIsImtleSIsImhhc1Byb3AiLCJjYWxsIiwiY3RvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX19zdXBlcl9fIiwiaGFzT3duUHJvcGVydHkiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInN1cGVyQ2xhc3MiLCJ0ZXh0IiwiRXJyb3IiLCJkZWJ1Z0luZm8iLCJuYW1lIiwidHlwZSIsIkNvbW1lbnQiLCJ2YWx1ZSIsInN0cmluZ2lmeSIsImNvbW1lbnQiLCJjbG9uZSIsIk9iamVjdCIsImNyZWF0ZSIsInRvU3RyaW5nIiwib3B0aW9ucyIsIndyaXRlciIsImZpbHRlck9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLComment.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLDOMConfiguration.js":
/*!************************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLDOMConfiguration.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var XMLDOMConfiguration, XMLDOMErrorHandler, XMLDOMStringList;\n    XMLDOMErrorHandler = __webpack_require__(/*! ./XMLDOMErrorHandler */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js\");\n    XMLDOMStringList = __webpack_require__(/*! ./XMLDOMStringList */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDOMStringList.js\");\n    module.exports = XMLDOMConfiguration = function() {\n        function XMLDOMConfiguration() {\n            var clonedSelf;\n            this.defaultParams = {\n                \"canonical-form\": false,\n                \"cdata-sections\": false,\n                \"comments\": false,\n                \"datatype-normalization\": false,\n                \"element-content-whitespace\": true,\n                \"entities\": true,\n                \"error-handler\": new XMLDOMErrorHandler(),\n                \"infoset\": true,\n                \"validate-if-schema\": false,\n                \"namespaces\": true,\n                \"namespace-declarations\": true,\n                \"normalize-characters\": false,\n                \"schema-location\": \"\",\n                \"schema-type\": \"\",\n                \"split-cdata-sections\": true,\n                \"validate\": false,\n                \"well-formed\": true\n            };\n            this.params = clonedSelf = Object.create(this.defaultParams);\n        }\n        Object.defineProperty(XMLDOMConfiguration.prototype, \"parameterNames\", {\n            get: function() {\n                return new XMLDOMStringList(Object.keys(this.defaultParams));\n            }\n        });\n        XMLDOMConfiguration.prototype.getParameter = function(name) {\n            if (this.params.hasOwnProperty(name)) {\n                return this.params[name];\n            } else {\n                return null;\n            }\n        };\n        XMLDOMConfiguration.prototype.canSetParameter = function(name, value) {\n            return true;\n        };\n        XMLDOMConfiguration.prototype.setParameter = function(name, value) {\n            if (value != null) {\n                return this.params[name] = value;\n            } else {\n                return delete this.params[name];\n            }\n        };\n        return XMLDOMConfiguration;\n    }();\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxET01Db25maWd1cmF0aW9uLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxtQ0FBbUM7QUFDbEM7SUFDQyxJQUFJQSxxQkFBcUJDLG9CQUFvQkM7SUFFN0NELHFCQUFxQkUsbUJBQU9BLENBQUM7SUFFN0JELG1CQUFtQkMsbUJBQU9BLENBQUM7SUFFM0JDLE9BQU9DLE9BQU8sR0FBR0wsc0JBQXNCO1FBQ3JDLFNBQVNBO1lBQ1AsSUFBSU07WUFDSixJQUFJLENBQUNDLGFBQWEsR0FBRztnQkFDbkIsa0JBQWtCO2dCQUNsQixrQkFBa0I7Z0JBQ2xCLFlBQVk7Z0JBQ1osMEJBQTBCO2dCQUMxQiw4QkFBOEI7Z0JBQzlCLFlBQVk7Z0JBQ1osaUJBQWlCLElBQUlOO2dCQUNyQixXQUFXO2dCQUNYLHNCQUFzQjtnQkFDdEIsY0FBYztnQkFDZCwwQkFBMEI7Z0JBQzFCLHdCQUF3QjtnQkFDeEIsbUJBQW1CO2dCQUNuQixlQUFlO2dCQUNmLHdCQUF3QjtnQkFDeEIsWUFBWTtnQkFDWixlQUFlO1lBQ2pCO1lBQ0EsSUFBSSxDQUFDTyxNQUFNLEdBQUdGLGFBQWFHLE9BQU9DLE1BQU0sQ0FBQyxJQUFJLENBQUNILGFBQWE7UUFDN0Q7UUFFQUUsT0FBT0UsY0FBYyxDQUFDWCxvQkFBb0JZLFNBQVMsRUFBRSxrQkFBa0I7WUFDckVDLEtBQUs7Z0JBQ0gsT0FBTyxJQUFJWCxpQkFBaUJPLE9BQU9LLElBQUksQ0FBQyxJQUFJLENBQUNQLGFBQWE7WUFDNUQ7UUFDRjtRQUVBUCxvQkFBb0JZLFNBQVMsQ0FBQ0csWUFBWSxHQUFHLFNBQVNDLElBQUk7WUFDeEQsSUFBSSxJQUFJLENBQUNSLE1BQU0sQ0FBQ1MsY0FBYyxDQUFDRCxPQUFPO2dCQUNwQyxPQUFPLElBQUksQ0FBQ1IsTUFBTSxDQUFDUSxLQUFLO1lBQzFCLE9BQU87Z0JBQ0wsT0FBTztZQUNUO1FBQ0Y7UUFFQWhCLG9CQUFvQlksU0FBUyxDQUFDTSxlQUFlLEdBQUcsU0FBU0YsSUFBSSxFQUFFRyxLQUFLO1lBQ2xFLE9BQU87UUFDVDtRQUVBbkIsb0JBQW9CWSxTQUFTLENBQUNRLFlBQVksR0FBRyxTQUFTSixJQUFJLEVBQUVHLEtBQUs7WUFDL0QsSUFBSUEsU0FBUyxNQUFNO2dCQUNqQixPQUFPLElBQUksQ0FBQ1gsTUFBTSxDQUFDUSxLQUFLLEdBQUdHO1lBQzdCLE9BQU87Z0JBQ0wsT0FBTyxPQUFPLElBQUksQ0FBQ1gsTUFBTSxDQUFDUSxLQUFLO1lBQ2pDO1FBQ0Y7UUFFQSxPQUFPaEI7SUFFVDtBQUVGLEdBQUdxQixJQUFJLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLWNvZGUvLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRE9NQ29uZmlndXJhdGlvbi5qcz8wY2I3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxET01Db25maWd1cmF0aW9uLCBYTUxET01FcnJvckhhbmRsZXIsIFhNTERPTVN0cmluZ0xpc3Q7XG5cbiAgWE1MRE9NRXJyb3JIYW5kbGVyID0gcmVxdWlyZSgnLi9YTUxET01FcnJvckhhbmRsZXInKTtcblxuICBYTUxET01TdHJpbmdMaXN0ID0gcmVxdWlyZSgnLi9YTUxET01TdHJpbmdMaXN0Jyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxET01Db25maWd1cmF0aW9uID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFhNTERPTUNvbmZpZ3VyYXRpb24oKSB7XG4gICAgICB2YXIgY2xvbmVkU2VsZjtcbiAgICAgIHRoaXMuZGVmYXVsdFBhcmFtcyA9IHtcbiAgICAgICAgXCJjYW5vbmljYWwtZm9ybVwiOiBmYWxzZSxcbiAgICAgICAgXCJjZGF0YS1zZWN0aW9uc1wiOiBmYWxzZSxcbiAgICAgICAgXCJjb21tZW50c1wiOiBmYWxzZSxcbiAgICAgICAgXCJkYXRhdHlwZS1ub3JtYWxpemF0aW9uXCI6IGZhbHNlLFxuICAgICAgICBcImVsZW1lbnQtY29udGVudC13aGl0ZXNwYWNlXCI6IHRydWUsXG4gICAgICAgIFwiZW50aXRpZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJlcnJvci1oYW5kbGVyXCI6IG5ldyBYTUxET01FcnJvckhhbmRsZXIoKSxcbiAgICAgICAgXCJpbmZvc2V0XCI6IHRydWUsXG4gICAgICAgIFwidmFsaWRhdGUtaWYtc2NoZW1hXCI6IGZhbHNlLFxuICAgICAgICBcIm5hbWVzcGFjZXNcIjogdHJ1ZSxcbiAgICAgICAgXCJuYW1lc3BhY2UtZGVjbGFyYXRpb25zXCI6IHRydWUsXG4gICAgICAgIFwibm9ybWFsaXplLWNoYXJhY3RlcnNcIjogZmFsc2UsXG4gICAgICAgIFwic2NoZW1hLWxvY2F0aW9uXCI6ICcnLFxuICAgICAgICBcInNjaGVtYS10eXBlXCI6ICcnLFxuICAgICAgICBcInNwbGl0LWNkYXRhLXNlY3Rpb25zXCI6IHRydWUsXG4gICAgICAgIFwidmFsaWRhdGVcIjogZmFsc2UsXG4gICAgICAgIFwid2VsbC1mb3JtZWRcIjogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHRoaXMucGFyYW1zID0gY2xvbmVkU2VsZiA9IE9iamVjdC5jcmVhdGUodGhpcy5kZWZhdWx0UGFyYW1zKTtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRE9NQ29uZmlndXJhdGlvbi5wcm90b3R5cGUsICdwYXJhbWV0ZXJOYW1lcycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgWE1MRE9NU3RyaW5nTGlzdChPYmplY3Qua2V5cyh0aGlzLmRlZmF1bHRQYXJhbXMpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIFhNTERPTUNvbmZpZ3VyYXRpb24ucHJvdG90eXBlLmdldFBhcmFtZXRlciA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIGlmICh0aGlzLnBhcmFtcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJhbXNbbmFtZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MRE9NQ29uZmlndXJhdGlvbi5wcm90b3R5cGUuY2FuU2V0UGFyYW1ldGVyID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICBYTUxET01Db25maWd1cmF0aW9uLnByb3RvdHlwZS5zZXRQYXJhbWV0ZXIgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1zW25hbWVdID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVsZXRlIHRoaXMucGFyYW1zW25hbWVdO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRE9NQ29uZmlndXJhdGlvbjtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIlhNTERPTUNvbmZpZ3VyYXRpb24iLCJYTUxET01FcnJvckhhbmRsZXIiLCJYTUxET01TdHJpbmdMaXN0IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjbG9uZWRTZWxmIiwiZGVmYXVsdFBhcmFtcyIsInBhcmFtcyIsIk9iamVjdCIsImNyZWF0ZSIsImRlZmluZVByb3BlcnR5IiwicHJvdG90eXBlIiwiZ2V0Iiwia2V5cyIsImdldFBhcmFtZXRlciIsIm5hbWUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhblNldFBhcmFtZXRlciIsInZhbHVlIiwic2V0UGFyYW1ldGVyIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLDOMConfiguration.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js":
/*!***********************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var XMLDOMErrorHandler;\n    module.exports = XMLDOMErrorHandler = function() {\n        function XMLDOMErrorHandler() {}\n        XMLDOMErrorHandler.prototype.handleError = function(error) {\n            throw new Error(error);\n        };\n        return XMLDOMErrorHandler;\n    }();\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxET01FcnJvckhhbmRsZXIuanMiLCJtYXBwaW5ncyI6IjtBQUFBLG1DQUFtQztBQUNsQztJQUNDLElBQUlBO0lBRUpDLE9BQU9DLE9BQU8sR0FBR0YscUJBQXFCO1FBQ3BDLFNBQVNBLHNCQUFzQjtRQUUvQkEsbUJBQW1CRyxTQUFTLENBQUNDLFdBQVcsR0FBRyxTQUFTQyxLQUFLO1lBQ3ZELE1BQU0sSUFBSUMsTUFBTUQ7UUFDbEI7UUFFQSxPQUFPTDtJQUVUO0FBRUYsR0FBR08sSUFBSSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmliZS1jb2RlLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERPTUVycm9ySGFuZGxlci5qcz82YjMzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxET01FcnJvckhhbmRsZXI7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxET01FcnJvckhhbmRsZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MRE9NRXJyb3JIYW5kbGVyKCkge31cblxuICAgIFhNTERPTUVycm9ySGFuZGxlci5wcm90b3R5cGUuaGFuZGxlRXJyb3IgPSBmdW5jdGlvbihlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTERPTUVycm9ySGFuZGxlcjtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIlhNTERPTUVycm9ySGFuZGxlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJwcm90b3R5cGUiLCJoYW5kbGVFcnJvciIsImVycm9yIiwiRXJyb3IiLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLDOMImplementation.js":
/*!*************************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLDOMImplementation.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var XMLDOMImplementation;\n    module.exports = XMLDOMImplementation = function() {\n        function XMLDOMImplementation() {}\n        XMLDOMImplementation.prototype.hasFeature = function(feature, version) {\n            return true;\n        };\n        XMLDOMImplementation.prototype.createDocumentType = function(qualifiedName, publicId, systemId) {\n            throw new Error(\"This DOM method is not implemented.\");\n        };\n        XMLDOMImplementation.prototype.createDocument = function(namespaceURI, qualifiedName, doctype) {\n            throw new Error(\"This DOM method is not implemented.\");\n        };\n        XMLDOMImplementation.prototype.createHTMLDocument = function(title) {\n            throw new Error(\"This DOM method is not implemented.\");\n        };\n        XMLDOMImplementation.prototype.getFeature = function(feature, version) {\n            throw new Error(\"This DOM method is not implemented.\");\n        };\n        return XMLDOMImplementation;\n    }();\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxET01JbXBsZW1lbnRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsbUNBQW1DO0FBQ2xDO0lBQ0MsSUFBSUE7SUFFSkMsT0FBT0MsT0FBTyxHQUFHRix1QkFBdUI7UUFDdEMsU0FBU0Esd0JBQXdCO1FBRWpDQSxxQkFBcUJHLFNBQVMsQ0FBQ0MsVUFBVSxHQUFHLFNBQVNDLE9BQU8sRUFBRUMsT0FBTztZQUNuRSxPQUFPO1FBQ1Q7UUFFQU4scUJBQXFCRyxTQUFTLENBQUNJLGtCQUFrQixHQUFHLFNBQVNDLGFBQWEsRUFBRUMsUUFBUSxFQUFFQyxRQUFRO1lBQzVGLE1BQU0sSUFBSUMsTUFBTTtRQUNsQjtRQUVBWCxxQkFBcUJHLFNBQVMsQ0FBQ1MsY0FBYyxHQUFHLFNBQVNDLFlBQVksRUFBRUwsYUFBYSxFQUFFTSxPQUFPO1lBQzNGLE1BQU0sSUFBSUgsTUFBTTtRQUNsQjtRQUVBWCxxQkFBcUJHLFNBQVMsQ0FBQ1ksa0JBQWtCLEdBQUcsU0FBU0MsS0FBSztZQUNoRSxNQUFNLElBQUlMLE1BQU07UUFDbEI7UUFFQVgscUJBQXFCRyxTQUFTLENBQUNjLFVBQVUsR0FBRyxTQUFTWixPQUFPLEVBQUVDLE9BQU87WUFDbkUsTUFBTSxJQUFJSyxNQUFNO1FBQ2xCO1FBRUEsT0FBT1g7SUFFVDtBQUVGLEdBQUdrQixJQUFJLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLWNvZGUvLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRE9NSW1wbGVtZW50YXRpb24uanM/MjEwMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MRE9NSW1wbGVtZW50YXRpb247XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxET01JbXBsZW1lbnRhdGlvbiA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBYTUxET01JbXBsZW1lbnRhdGlvbigpIHt9XG5cbiAgICBYTUxET01JbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUuaGFzRmVhdHVyZSA9IGZ1bmN0aW9uKGZlYXR1cmUsIHZlcnNpb24pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICBYTUxET01JbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUuY3JlYXRlRG9jdW1lbnRUeXBlID0gZnVuY3Rpb24ocXVhbGlmaWVkTmFtZSwgcHVibGljSWQsIHN5c3RlbUlkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICB9O1xuXG4gICAgWE1MRE9NSW1wbGVtZW50YXRpb24ucHJvdG90eXBlLmNyZWF0ZURvY3VtZW50ID0gZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBxdWFsaWZpZWROYW1lLCBkb2N0eXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICB9O1xuXG4gICAgWE1MRE9NSW1wbGVtZW50YXRpb24ucHJvdG90eXBlLmNyZWF0ZUhUTUxEb2N1bWVudCA9IGZ1bmN0aW9uKHRpdGxlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICB9O1xuXG4gICAgWE1MRE9NSW1wbGVtZW50YXRpb24ucHJvdG90eXBlLmdldEZlYXR1cmUgPSBmdW5jdGlvbihmZWF0dXJlLCB2ZXJzaW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTERPTUltcGxlbWVudGF0aW9uO1xuXG4gIH0pKCk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiWE1MRE9NSW1wbGVtZW50YXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwicHJvdG90eXBlIiwiaGFzRmVhdHVyZSIsImZlYXR1cmUiLCJ2ZXJzaW9uIiwiY3JlYXRlRG9jdW1lbnRUeXBlIiwicXVhbGlmaWVkTmFtZSIsInB1YmxpY0lkIiwic3lzdGVtSWQiLCJFcnJvciIsImNyZWF0ZURvY3VtZW50IiwibmFtZXNwYWNlVVJJIiwiZG9jdHlwZSIsImNyZWF0ZUhUTUxEb2N1bWVudCIsInRpdGxlIiwiZ2V0RmVhdHVyZSIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLDOMImplementation.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLDOMStringList.js":
/*!*********************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLDOMStringList.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var XMLDOMStringList;\n    module.exports = XMLDOMStringList = function() {\n        function XMLDOMStringList(arr) {\n            this.arr = arr || [];\n        }\n        Object.defineProperty(XMLDOMStringList.prototype, \"length\", {\n            get: function() {\n                return this.arr.length;\n            }\n        });\n        XMLDOMStringList.prototype.item = function(index) {\n            return this.arr[index] || null;\n        };\n        XMLDOMStringList.prototype.contains = function(str) {\n            return this.arr.indexOf(str) !== -1;\n        };\n        return XMLDOMStringList;\n    }();\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxET01TdHJpbmdMaXN0LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxtQ0FBbUM7QUFDbEM7SUFDQyxJQUFJQTtJQUVKQyxPQUFPQyxPQUFPLEdBQUdGLG1CQUFtQjtRQUNsQyxTQUFTQSxpQkFBaUJHLEdBQUc7WUFDM0IsSUFBSSxDQUFDQSxHQUFHLEdBQUdBLE9BQU8sRUFBRTtRQUN0QjtRQUVBQyxPQUFPQyxjQUFjLENBQUNMLGlCQUFpQk0sU0FBUyxFQUFFLFVBQVU7WUFDMURDLEtBQUs7Z0JBQ0gsT0FBTyxJQUFJLENBQUNKLEdBQUcsQ0FBQ0ssTUFBTTtZQUN4QjtRQUNGO1FBRUFSLGlCQUFpQk0sU0FBUyxDQUFDRyxJQUFJLEdBQUcsU0FBU0MsS0FBSztZQUM5QyxPQUFPLElBQUksQ0FBQ1AsR0FBRyxDQUFDTyxNQUFNLElBQUk7UUFDNUI7UUFFQVYsaUJBQWlCTSxTQUFTLENBQUNLLFFBQVEsR0FBRyxTQUFTQyxHQUFHO1lBQ2hELE9BQU8sSUFBSSxDQUFDVCxHQUFHLENBQUNVLE9BQU8sQ0FBQ0QsU0FBUyxDQUFDO1FBQ3BDO1FBRUEsT0FBT1o7SUFFVDtBQUVGLEdBQUdjLElBQUksQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpYmUtY29kZS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxET01TdHJpbmdMaXN0LmpzPzIzY2IiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTERPTVN0cmluZ0xpc3Q7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxET01TdHJpbmdMaXN0ID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFhNTERPTVN0cmluZ0xpc3QoYXJyKSB7XG4gICAgICB0aGlzLmFyciA9IGFyciB8fCBbXTtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRE9NU3RyaW5nTGlzdC5wcm90b3R5cGUsICdsZW5ndGgnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcnIubGVuZ3RoO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgWE1MRE9NU3RyaW5nTGlzdC5wcm90b3R5cGUuaXRlbSA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICByZXR1cm4gdGhpcy5hcnJbaW5kZXhdIHx8IG51bGw7XG4gICAgfTtcblxuICAgIFhNTERPTVN0cmluZ0xpc3QucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgICByZXR1cm4gdGhpcy5hcnIuaW5kZXhPZihzdHIpICE9PSAtMTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTERPTVN0cmluZ0xpc3Q7XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJYTUxET01TdHJpbmdMaXN0IiwibW9kdWxlIiwiZXhwb3J0cyIsImFyciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwicHJvdG90eXBlIiwiZ2V0IiwibGVuZ3RoIiwiaXRlbSIsImluZGV4IiwiY29udGFpbnMiLCJzdHIiLCJpbmRleE9mIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLDOMStringList.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLDTDAttList.js":
/*!******************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLDTDAttList.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLDTDAttList, XMLNode, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js\");\n    module.exports = XMLDTDAttList = function(superClass) {\n        extend(XMLDTDAttList, superClass);\n        function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n            XMLDTDAttList.__super__.constructor.call(this, parent);\n            if (elementName == null) {\n                throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n            }\n            if (attributeName == null) {\n                throw new Error(\"Missing DTD attribute name. \" + this.debugInfo(elementName));\n            }\n            if (!attributeType) {\n                throw new Error(\"Missing DTD attribute type. \" + this.debugInfo(elementName));\n            }\n            if (!defaultValueType) {\n                throw new Error(\"Missing DTD attribute default. \" + this.debugInfo(elementName));\n            }\n            if (defaultValueType.indexOf(\"#\") !== 0) {\n                defaultValueType = \"#\" + defaultValueType;\n            }\n            if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {\n                throw new Error(\"Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n            }\n            if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {\n                throw new Error(\"Default value only applies to #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n            }\n            this.elementName = this.stringify.name(elementName);\n            this.type = NodeType.AttributeDeclaration;\n            this.attributeName = this.stringify.name(attributeName);\n            this.attributeType = this.stringify.dtdAttType(attributeType);\n            if (defaultValue) {\n                this.defaultValue = this.stringify.dtdAttDefault(defaultValue);\n            }\n            this.defaultValueType = defaultValueType;\n        }\n        XMLDTDAttList.prototype.toString = function(options) {\n            return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));\n        };\n        return XMLDTDAttList;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEVERBdHRMaXN0LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxtQ0FBbUM7QUFDbEM7SUFDQyxJQUFJQSxVQUFVQyxlQUFlQyxTQUMzQkMsU0FBUyxTQUFTQyxLQUFLLEVBQUVDLE1BQU07UUFBSSxJQUFLLElBQUlDLE9BQU9ELE9BQVE7WUFBRSxJQUFJRSxRQUFRQyxJQUFJLENBQUNILFFBQVFDLE1BQU1GLEtBQUssQ0FBQ0UsSUFBSSxHQUFHRCxNQUFNLENBQUNDLElBQUk7UUFBRTtRQUFFLFNBQVNHO1lBQVMsSUFBSSxDQUFDQyxXQUFXLEdBQUdOO1FBQU87UUFBRUssS0FBS0UsU0FBUyxHQUFHTixPQUFPTSxTQUFTO1FBQUVQLE1BQU1PLFNBQVMsR0FBRyxJQUFJRjtRQUFRTCxNQUFNUSxTQUFTLEdBQUdQLE9BQU9NLFNBQVM7UUFBRSxPQUFPUDtJQUFPLEdBQ3pSRyxVQUFVLENBQUMsRUFBRU0sY0FBYztJQUU3QlgsVUFBVVksbUJBQU9BLENBQUM7SUFFbEJkLFdBQVdjLG1CQUFPQSxDQUFDO0lBRW5CQyxPQUFPQyxPQUFPLEdBQUdmLGdCQUFnQixTQUFVZ0IsVUFBVTtRQUNuRGQsT0FBT0YsZUFBZWdCO1FBRXRCLFNBQVNoQixjQUFjSSxNQUFNLEVBQUVhLFdBQVcsRUFBRUMsYUFBYSxFQUFFQyxhQUFhLEVBQUVDLGdCQUFnQixFQUFFQyxZQUFZO1lBQ3RHckIsY0FBY1csU0FBUyxDQUFDRixXQUFXLENBQUNGLElBQUksQ0FBQyxJQUFJLEVBQUVIO1lBQy9DLElBQUlhLGVBQWUsTUFBTTtnQkFDdkIsTUFBTSxJQUFJSyxNQUFNLCtCQUErQixJQUFJLENBQUNDLFNBQVM7WUFDL0Q7WUFDQSxJQUFJTCxpQkFBaUIsTUFBTTtnQkFDekIsTUFBTSxJQUFJSSxNQUFNLGlDQUFpQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ047WUFDbEU7WUFDQSxJQUFJLENBQUNFLGVBQWU7Z0JBQ2xCLE1BQU0sSUFBSUcsTUFBTSxpQ0FBaUMsSUFBSSxDQUFDQyxTQUFTLENBQUNOO1lBQ2xFO1lBQ0EsSUFBSSxDQUFDRyxrQkFBa0I7Z0JBQ3JCLE1BQU0sSUFBSUUsTUFBTSxvQ0FBb0MsSUFBSSxDQUFDQyxTQUFTLENBQUNOO1lBQ3JFO1lBQ0EsSUFBSUcsaUJBQWlCSSxPQUFPLENBQUMsU0FBUyxHQUFHO2dCQUN2Q0osbUJBQW1CLE1BQU1BO1lBQzNCO1lBQ0EsSUFBSSxDQUFDQSxpQkFBaUJLLEtBQUssQ0FBQywyQ0FBMkM7Z0JBQ3JFLE1BQU0sSUFBSUgsTUFBTSxvRkFBb0YsSUFBSSxDQUFDQyxTQUFTLENBQUNOO1lBQ3JIO1lBQ0EsSUFBSUksZ0JBQWdCLENBQUNELGlCQUFpQkssS0FBSyxDQUFDLHdCQUF3QjtnQkFDbEUsTUFBTSxJQUFJSCxNQUFNLHVEQUF1RCxJQUFJLENBQUNDLFNBQVMsQ0FBQ047WUFDeEY7WUFDQSxJQUFJLENBQUNBLFdBQVcsR0FBRyxJQUFJLENBQUNTLFNBQVMsQ0FBQ0MsSUFBSSxDQUFDVjtZQUN2QyxJQUFJLENBQUNXLElBQUksR0FBRzdCLFNBQVM4QixvQkFBb0I7WUFDekMsSUFBSSxDQUFDWCxhQUFhLEdBQUcsSUFBSSxDQUFDUSxTQUFTLENBQUNDLElBQUksQ0FBQ1Q7WUFDekMsSUFBSSxDQUFDQyxhQUFhLEdBQUcsSUFBSSxDQUFDTyxTQUFTLENBQUNJLFVBQVUsQ0FBQ1g7WUFDL0MsSUFBSUUsY0FBYztnQkFDaEIsSUFBSSxDQUFDQSxZQUFZLEdBQUcsSUFBSSxDQUFDSyxTQUFTLENBQUNLLGFBQWEsQ0FBQ1Y7WUFDbkQ7WUFDQSxJQUFJLENBQUNELGdCQUFnQixHQUFHQTtRQUMxQjtRQUVBcEIsY0FBY1UsU0FBUyxDQUFDc0IsUUFBUSxHQUFHLFNBQVNDLE9BQU87WUFDakQsT0FBTyxJQUFJLENBQUNBLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQ0YsT0FBTyxDQUFDQyxNQUFNLENBQUNFLGFBQWEsQ0FBQ0g7UUFDaEY7UUFFQSxPQUFPakM7SUFFVCxFQUFHQztBQUVMLEdBQUdNLElBQUksQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpYmUtY29kZS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEVERBdHRMaXN0LmpzPzczY2QiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxEVERBdHRMaXN0LCBYTUxOb2RlLFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRFREQXR0TGlzdCA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTERUREF0dExpc3QsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MRFREQXR0TGlzdChwYXJlbnQsIGVsZW1lbnROYW1lLCBhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVUeXBlLCBkZWZhdWx0VmFsdWVUeXBlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIFhNTERUREF0dExpc3QuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIGlmIChlbGVtZW50TmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRFREIGVsZW1lbnQgbmFtZS4gXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICAgIGlmIChhdHRyaWJ1dGVOYW1lID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBEVEQgYXR0cmlidXRlIG5hbWUuIFwiICsgdGhpcy5kZWJ1Z0luZm8oZWxlbWVudE5hbWUpKTtcbiAgICAgIH1cbiAgICAgIGlmICghYXR0cmlidXRlVHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIERURCBhdHRyaWJ1dGUgdHlwZS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhlbGVtZW50TmFtZSkpO1xuICAgICAgfVxuICAgICAgaWYgKCFkZWZhdWx0VmFsdWVUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRFREIGF0dHJpYnV0ZSBkZWZhdWx0LiBcIiArIHRoaXMuZGVidWdJbmZvKGVsZW1lbnROYW1lKSk7XG4gICAgICB9XG4gICAgICBpZiAoZGVmYXVsdFZhbHVlVHlwZS5pbmRleE9mKCcjJykgIT09IDApIHtcbiAgICAgICAgZGVmYXVsdFZhbHVlVHlwZSA9ICcjJyArIGRlZmF1bHRWYWx1ZVR5cGU7XG4gICAgICB9XG4gICAgICBpZiAoIWRlZmF1bHRWYWx1ZVR5cGUubWF0Y2goL14oI1JFUVVJUkVEfCNJTVBMSUVEfCNGSVhFRHwjREVGQVVMVCkkLykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBkZWZhdWx0IHZhbHVlIHR5cGU7IGV4cGVjdGVkOiAjUkVRVUlSRUQsICNJTVBMSUVELCAjRklYRUQgb3IgI0RFRkFVTFQuIFwiICsgdGhpcy5kZWJ1Z0luZm8oZWxlbWVudE5hbWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZhdWx0VmFsdWUgJiYgIWRlZmF1bHRWYWx1ZVR5cGUubWF0Y2goL14oI0ZJWEVEfCNERUZBVUxUKSQvKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEZWZhdWx0IHZhbHVlIG9ubHkgYXBwbGllcyB0byAjRklYRUQgb3IgI0RFRkFVTFQuIFwiICsgdGhpcy5kZWJ1Z0luZm8oZWxlbWVudE5hbWUpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZWxlbWVudE5hbWUgPSB0aGlzLnN0cmluZ2lmeS5uYW1lKGVsZW1lbnROYW1lKTtcbiAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLkF0dHJpYnV0ZURlY2xhcmF0aW9uO1xuICAgICAgdGhpcy5hdHRyaWJ1dGVOYW1lID0gdGhpcy5zdHJpbmdpZnkubmFtZShhdHRyaWJ1dGVOYW1lKTtcbiAgICAgIHRoaXMuYXR0cmlidXRlVHlwZSA9IHRoaXMuc3RyaW5naWZ5LmR0ZEF0dFR5cGUoYXR0cmlidXRlVHlwZSk7XG4gICAgICBpZiAoZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gdGhpcy5zdHJpbmdpZnkuZHRkQXR0RGVmYXVsdChkZWZhdWx0VmFsdWUpO1xuICAgICAgfVxuICAgICAgdGhpcy5kZWZhdWx0VmFsdWVUeXBlID0gZGVmYXVsdFZhbHVlVHlwZTtcbiAgICB9XG5cbiAgICBYTUxEVERBdHRMaXN0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLmR0ZEF0dExpc3QodGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTERUREF0dExpc3Q7XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiTm9kZVR5cGUiLCJYTUxEVERBdHRMaXN0IiwiWE1MTm9kZSIsImV4dGVuZCIsImNoaWxkIiwicGFyZW50Iiwia2V5IiwiaGFzUHJvcCIsImNhbGwiLCJjdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfX3N1cGVyX18iLCJoYXNPd25Qcm9wZXJ0eSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic3VwZXJDbGFzcyIsImVsZW1lbnROYW1lIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZVR5cGUiLCJkZWZhdWx0VmFsdWVUeXBlIiwiZGVmYXVsdFZhbHVlIiwiRXJyb3IiLCJkZWJ1Z0luZm8iLCJpbmRleE9mIiwibWF0Y2giLCJzdHJpbmdpZnkiLCJuYW1lIiwidHlwZSIsIkF0dHJpYnV0ZURlY2xhcmF0aW9uIiwiZHRkQXR0VHlwZSIsImR0ZEF0dERlZmF1bHQiLCJ0b1N0cmluZyIsIm9wdGlvbnMiLCJ3cml0ZXIiLCJkdGRBdHRMaXN0IiwiZmlsdGVyT3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLDTDAttList.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLDTDElement.js":
/*!******************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLDTDElement.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLDTDElement, XMLNode, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js\");\n    module.exports = XMLDTDElement = function(superClass) {\n        extend(XMLDTDElement, superClass);\n        function XMLDTDElement(parent, name, value) {\n            XMLDTDElement.__super__.constructor.call(this, parent);\n            if (name == null) {\n                throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n            }\n            if (!value) {\n                value = \"(#PCDATA)\";\n            }\n            if (Array.isArray(value)) {\n                value = \"(\" + value.join(\",\") + \")\";\n            }\n            this.name = this.stringify.name(name);\n            this.type = NodeType.ElementDeclaration;\n            this.value = this.stringify.dtdElementValue(value);\n        }\n        XMLDTDElement.prototype.toString = function(options) {\n            return this.options.writer.dtdElement(this, this.options.writer.filterOptions(options));\n        };\n        return XMLDTDElement;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEVERFbGVtZW50LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxtQ0FBbUM7QUFDbEM7SUFDQyxJQUFJQSxVQUFVQyxlQUFlQyxTQUMzQkMsU0FBUyxTQUFTQyxLQUFLLEVBQUVDLE1BQU07UUFBSSxJQUFLLElBQUlDLE9BQU9ELE9BQVE7WUFBRSxJQUFJRSxRQUFRQyxJQUFJLENBQUNILFFBQVFDLE1BQU1GLEtBQUssQ0FBQ0UsSUFBSSxHQUFHRCxNQUFNLENBQUNDLElBQUk7UUFBRTtRQUFFLFNBQVNHO1lBQVMsSUFBSSxDQUFDQyxXQUFXLEdBQUdOO1FBQU87UUFBRUssS0FBS0UsU0FBUyxHQUFHTixPQUFPTSxTQUFTO1FBQUVQLE1BQU1PLFNBQVMsR0FBRyxJQUFJRjtRQUFRTCxNQUFNUSxTQUFTLEdBQUdQLE9BQU9NLFNBQVM7UUFBRSxPQUFPUDtJQUFPLEdBQ3pSRyxVQUFVLENBQUMsRUFBRU0sY0FBYztJQUU3QlgsVUFBVVksbUJBQU9BLENBQUM7SUFFbEJkLFdBQVdjLG1CQUFPQSxDQUFDO0lBRW5CQyxPQUFPQyxPQUFPLEdBQUdmLGdCQUFnQixTQUFVZ0IsVUFBVTtRQUNuRGQsT0FBT0YsZUFBZWdCO1FBRXRCLFNBQVNoQixjQUFjSSxNQUFNLEVBQUVhLElBQUksRUFBRUMsS0FBSztZQUN4Q2xCLGNBQWNXLFNBQVMsQ0FBQ0YsV0FBVyxDQUFDRixJQUFJLENBQUMsSUFBSSxFQUFFSDtZQUMvQyxJQUFJYSxRQUFRLE1BQU07Z0JBQ2hCLE1BQU0sSUFBSUUsTUFBTSwrQkFBK0IsSUFBSSxDQUFDQyxTQUFTO1lBQy9EO1lBQ0EsSUFBSSxDQUFDRixPQUFPO2dCQUNWQSxRQUFRO1lBQ1Y7WUFDQSxJQUFJRyxNQUFNQyxPQUFPLENBQUNKLFFBQVE7Z0JBQ3hCQSxRQUFRLE1BQU1BLE1BQU1LLElBQUksQ0FBQyxPQUFPO1lBQ2xDO1lBQ0EsSUFBSSxDQUFDTixJQUFJLEdBQUcsSUFBSSxDQUFDTyxTQUFTLENBQUNQLElBQUksQ0FBQ0E7WUFDaEMsSUFBSSxDQUFDUSxJQUFJLEdBQUcxQixTQUFTMkIsa0JBQWtCO1lBQ3ZDLElBQUksQ0FBQ1IsS0FBSyxHQUFHLElBQUksQ0FBQ00sU0FBUyxDQUFDRyxlQUFlLENBQUNUO1FBQzlDO1FBRUFsQixjQUFjVSxTQUFTLENBQUNrQixRQUFRLEdBQUcsU0FBU0MsT0FBTztZQUNqRCxPQUFPLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxNQUFNLENBQUNDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDRixPQUFPLENBQUNDLE1BQU0sQ0FBQ0UsYUFBYSxDQUFDSDtRQUNoRjtRQUVBLE9BQU83QjtJQUVULEVBQUdDO0FBRUwsR0FBR00sSUFBSSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmliZS1jb2RlLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERUREVsZW1lbnQuanM/ZDhjNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFhNTERUREVsZW1lbnQsIFhNTE5vZGUsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEVERFbGVtZW50ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MRFRERWxlbWVudCwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxEVERFbGVtZW50KHBhcmVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgIFhNTERUREVsZW1lbnQuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIGlmIChuYW1lID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBEVEQgZWxlbWVudCBuYW1lLiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9ICcoI1BDREFUQSknO1xuICAgICAgfVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gJygnICsgdmFsdWUuam9pbignLCcpICsgJyknO1xuICAgICAgfVxuICAgICAgdGhpcy5uYW1lID0gdGhpcy5zdHJpbmdpZnkubmFtZShuYW1lKTtcbiAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLkVsZW1lbnREZWNsYXJhdGlvbjtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5kdGRFbGVtZW50VmFsdWUodmFsdWUpO1xuICAgIH1cblxuICAgIFhNTERUREVsZW1lbnQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuZHRkRWxlbWVudCh0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRFRERWxlbWVudDtcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJOb2RlVHlwZSIsIlhNTERUREVsZW1lbnQiLCJYTUxOb2RlIiwiZXh0ZW5kIiwiY2hpbGQiLCJwYXJlbnQiLCJrZXkiLCJoYXNQcm9wIiwiY2FsbCIsImN0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9fc3VwZXJfXyIsImhhc093blByb3BlcnR5IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzdXBlckNsYXNzIiwibmFtZSIsInZhbHVlIiwiRXJyb3IiLCJkZWJ1Z0luZm8iLCJBcnJheSIsImlzQXJyYXkiLCJqb2luIiwic3RyaW5naWZ5IiwidHlwZSIsIkVsZW1lbnREZWNsYXJhdGlvbiIsImR0ZEVsZW1lbnRWYWx1ZSIsInRvU3RyaW5nIiwib3B0aW9ucyIsIndyaXRlciIsImR0ZEVsZW1lbnQiLCJmaWx0ZXJPcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLDTDElement.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLDTDEntity.js":
/*!*****************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLDTDEntity.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLDTDEntity, XMLNode, isObject, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    isObject = (__webpack_require__(/*! ./Utility */ \"(action-browser)/./node_modules/xmlbuilder/lib/Utility.js\").isObject);\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js\");\n    module.exports = XMLDTDEntity = function(superClass) {\n        extend(XMLDTDEntity, superClass);\n        function XMLDTDEntity(parent, pe, name, value) {\n            XMLDTDEntity.__super__.constructor.call(this, parent);\n            if (name == null) {\n                throw new Error(\"Missing DTD entity name. \" + this.debugInfo(name));\n            }\n            if (value == null) {\n                throw new Error(\"Missing DTD entity value. \" + this.debugInfo(name));\n            }\n            this.pe = !!pe;\n            this.name = this.stringify.name(name);\n            this.type = NodeType.EntityDeclaration;\n            if (!isObject(value)) {\n                this.value = this.stringify.dtdEntityValue(value);\n                this.internal = true;\n            } else {\n                if (!value.pubID && !value.sysID) {\n                    throw new Error(\"Public and/or system identifiers are required for an external entity. \" + this.debugInfo(name));\n                }\n                if (value.pubID && !value.sysID) {\n                    throw new Error(\"System identifier is required for a public external entity. \" + this.debugInfo(name));\n                }\n                this.internal = false;\n                if (value.pubID != null) {\n                    this.pubID = this.stringify.dtdPubID(value.pubID);\n                }\n                if (value.sysID != null) {\n                    this.sysID = this.stringify.dtdSysID(value.sysID);\n                }\n                if (value.nData != null) {\n                    this.nData = this.stringify.dtdNData(value.nData);\n                }\n                if (this.pe && this.nData) {\n                    throw new Error(\"Notation declaration is not allowed in a parameter entity. \" + this.debugInfo(name));\n                }\n            }\n        }\n        Object.defineProperty(XMLDTDEntity.prototype, \"publicId\", {\n            get: function() {\n                return this.pubID;\n            }\n        });\n        Object.defineProperty(XMLDTDEntity.prototype, \"systemId\", {\n            get: function() {\n                return this.sysID;\n            }\n        });\n        Object.defineProperty(XMLDTDEntity.prototype, \"notationName\", {\n            get: function() {\n                return this.nData || null;\n            }\n        });\n        Object.defineProperty(XMLDTDEntity.prototype, \"inputEncoding\", {\n            get: function() {\n                return null;\n            }\n        });\n        Object.defineProperty(XMLDTDEntity.prototype, \"xmlEncoding\", {\n            get: function() {\n                return null;\n            }\n        });\n        Object.defineProperty(XMLDTDEntity.prototype, \"xmlVersion\", {\n            get: function() {\n                return null;\n            }\n        });\n        XMLDTDEntity.prototype.toString = function(options) {\n            return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));\n        };\n        return XMLDTDEntity;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLDTDEntity.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLDTDNotation.js":
/*!*******************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLDTDNotation.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLDTDNotation, XMLNode, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js\");\n    module.exports = XMLDTDNotation = function(superClass) {\n        extend(XMLDTDNotation, superClass);\n        function XMLDTDNotation(parent, name, value) {\n            XMLDTDNotation.__super__.constructor.call(this, parent);\n            if (name == null) {\n                throw new Error(\"Missing DTD notation name. \" + this.debugInfo(name));\n            }\n            if (!value.pubID && !value.sysID) {\n                throw new Error(\"Public or system identifiers are required for an external entity. \" + this.debugInfo(name));\n            }\n            this.name = this.stringify.name(name);\n            this.type = NodeType.NotationDeclaration;\n            if (value.pubID != null) {\n                this.pubID = this.stringify.dtdPubID(value.pubID);\n            }\n            if (value.sysID != null) {\n                this.sysID = this.stringify.dtdSysID(value.sysID);\n            }\n        }\n        Object.defineProperty(XMLDTDNotation.prototype, \"publicId\", {\n            get: function() {\n                return this.pubID;\n            }\n        });\n        Object.defineProperty(XMLDTDNotation.prototype, \"systemId\", {\n            get: function() {\n                return this.sysID;\n            }\n        });\n        XMLDTDNotation.prototype.toString = function(options) {\n            return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));\n        };\n        return XMLDTDNotation;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEVEROb3RhdGlvbi5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsbUNBQW1DO0FBQ2xDO0lBQ0MsSUFBSUEsVUFBVUMsZ0JBQWdCQyxTQUM1QkMsU0FBUyxTQUFTQyxLQUFLLEVBQUVDLE1BQU07UUFBSSxJQUFLLElBQUlDLE9BQU9ELE9BQVE7WUFBRSxJQUFJRSxRQUFRQyxJQUFJLENBQUNILFFBQVFDLE1BQU1GLEtBQUssQ0FBQ0UsSUFBSSxHQUFHRCxNQUFNLENBQUNDLElBQUk7UUFBRTtRQUFFLFNBQVNHO1lBQVMsSUFBSSxDQUFDQyxXQUFXLEdBQUdOO1FBQU87UUFBRUssS0FBS0UsU0FBUyxHQUFHTixPQUFPTSxTQUFTO1FBQUVQLE1BQU1PLFNBQVMsR0FBRyxJQUFJRjtRQUFRTCxNQUFNUSxTQUFTLEdBQUdQLE9BQU9NLFNBQVM7UUFBRSxPQUFPUDtJQUFPLEdBQ3pSRyxVQUFVLENBQUMsRUFBRU0sY0FBYztJQUU3QlgsVUFBVVksbUJBQU9BLENBQUM7SUFFbEJkLFdBQVdjLG1CQUFPQSxDQUFDO0lBRW5CQyxPQUFPQyxPQUFPLEdBQUdmLGlCQUFpQixTQUFVZ0IsVUFBVTtRQUNwRGQsT0FBT0YsZ0JBQWdCZ0I7UUFFdkIsU0FBU2hCLGVBQWVJLE1BQU0sRUFBRWEsSUFBSSxFQUFFQyxLQUFLO1lBQ3pDbEIsZUFBZVcsU0FBUyxDQUFDRixXQUFXLENBQUNGLElBQUksQ0FBQyxJQUFJLEVBQUVIO1lBQ2hELElBQUlhLFFBQVEsTUFBTTtnQkFDaEIsTUFBTSxJQUFJRSxNQUFNLGdDQUFnQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0g7WUFDakU7WUFDQSxJQUFJLENBQUNDLE1BQU1HLEtBQUssSUFBSSxDQUFDSCxNQUFNSSxLQUFLLEVBQUU7Z0JBQ2hDLE1BQU0sSUFBSUgsTUFBTSx1RUFBdUUsSUFBSSxDQUFDQyxTQUFTLENBQUNIO1lBQ3hHO1lBQ0EsSUFBSSxDQUFDQSxJQUFJLEdBQUcsSUFBSSxDQUFDTSxTQUFTLENBQUNOLElBQUksQ0FBQ0E7WUFDaEMsSUFBSSxDQUFDTyxJQUFJLEdBQUd6QixTQUFTMEIsbUJBQW1CO1lBQ3hDLElBQUlQLE1BQU1HLEtBQUssSUFBSSxNQUFNO2dCQUN2QixJQUFJLENBQUNBLEtBQUssR0FBRyxJQUFJLENBQUNFLFNBQVMsQ0FBQ0csUUFBUSxDQUFDUixNQUFNRyxLQUFLO1lBQ2xEO1lBQ0EsSUFBSUgsTUFBTUksS0FBSyxJQUFJLE1BQU07Z0JBQ3ZCLElBQUksQ0FBQ0EsS0FBSyxHQUFHLElBQUksQ0FBQ0MsU0FBUyxDQUFDSSxRQUFRLENBQUNULE1BQU1JLEtBQUs7WUFDbEQ7UUFDRjtRQUVBTSxPQUFPQyxjQUFjLENBQUM3QixlQUFlVSxTQUFTLEVBQUUsWUFBWTtZQUMxRG9CLEtBQUs7Z0JBQ0gsT0FBTyxJQUFJLENBQUNULEtBQUs7WUFDbkI7UUFDRjtRQUVBTyxPQUFPQyxjQUFjLENBQUM3QixlQUFlVSxTQUFTLEVBQUUsWUFBWTtZQUMxRG9CLEtBQUs7Z0JBQ0gsT0FBTyxJQUFJLENBQUNSLEtBQUs7WUFDbkI7UUFDRjtRQUVBdEIsZUFBZVUsU0FBUyxDQUFDcUIsUUFBUSxHQUFHLFNBQVNDLE9BQU87WUFDbEQsT0FBTyxJQUFJLENBQUNBLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQ0YsT0FBTyxDQUFDQyxNQUFNLENBQUNFLGFBQWEsQ0FBQ0g7UUFDakY7UUFFQSxPQUFPaEM7SUFFVCxFQUFHQztBQUVMLEdBQUdNLElBQUksQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpYmUtY29kZS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEVEROb3RhdGlvbi5qcz8xOGViIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MRFRETm90YXRpb24sIFhNTE5vZGUsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEVEROb3RhdGlvbiA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTERURE5vdGF0aW9uLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTERURE5vdGF0aW9uKHBhcmVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgIFhNTERURE5vdGF0aW9uLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRFREIG5vdGF0aW9uIG5hbWUuIFwiICsgdGhpcy5kZWJ1Z0luZm8obmFtZSkpO1xuICAgICAgfVxuICAgICAgaWYgKCF2YWx1ZS5wdWJJRCAmJiAhdmFsdWUuc3lzSUQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHVibGljIG9yIHN5c3RlbSBpZGVudGlmaWVycyBhcmUgcmVxdWlyZWQgZm9yIGFuIGV4dGVybmFsIGVudGl0eS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhuYW1lKSk7XG4gICAgICB9XG4gICAgICB0aGlzLm5hbWUgPSB0aGlzLnN0cmluZ2lmeS5uYW1lKG5hbWUpO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuTm90YXRpb25EZWNsYXJhdGlvbjtcbiAgICAgIGlmICh2YWx1ZS5wdWJJRCAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMucHViSUQgPSB0aGlzLnN0cmluZ2lmeS5kdGRQdWJJRCh2YWx1ZS5wdWJJRCk7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUuc3lzSUQgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnN5c0lEID0gdGhpcy5zdHJpbmdpZnkuZHRkU3lzSUQodmFsdWUuc3lzSUQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxEVEROb3RhdGlvbi5wcm90b3R5cGUsICdwdWJsaWNJZCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnB1YklEO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERURE5vdGF0aW9uLnByb3RvdHlwZSwgJ3N5c3RlbUlkJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3lzSUQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxEVEROb3RhdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5kdGROb3RhdGlvbih0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRFRETm90YXRpb247XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiTm9kZVR5cGUiLCJYTUxEVEROb3RhdGlvbiIsIlhNTE5vZGUiLCJleHRlbmQiLCJjaGlsZCIsInBhcmVudCIsImtleSIsImhhc1Byb3AiLCJjYWxsIiwiY3RvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX19zdXBlcl9fIiwiaGFzT3duUHJvcGVydHkiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInN1cGVyQ2xhc3MiLCJuYW1lIiwidmFsdWUiLCJFcnJvciIsImRlYnVnSW5mbyIsInB1YklEIiwic3lzSUQiLCJzdHJpbmdpZnkiLCJ0eXBlIiwiTm90YXRpb25EZWNsYXJhdGlvbiIsImR0ZFB1YklEIiwiZHRkU3lzSUQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsInRvU3RyaW5nIiwib3B0aW9ucyIsIndyaXRlciIsImR0ZE5vdGF0aW9uIiwiZmlsdGVyT3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLDTDNotation.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLDeclaration.js":
/*!*******************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLDeclaration.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLDeclaration, XMLNode, isObject, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    isObject = (__webpack_require__(/*! ./Utility */ \"(action-browser)/./node_modules/xmlbuilder/lib/Utility.js\").isObject);\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js\");\n    module.exports = XMLDeclaration = function(superClass) {\n        extend(XMLDeclaration, superClass);\n        function XMLDeclaration(parent, version, encoding, standalone) {\n            var ref;\n            XMLDeclaration.__super__.constructor.call(this, parent);\n            if (isObject(version)) {\n                ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;\n            }\n            if (!version) {\n                version = \"1.0\";\n            }\n            this.type = NodeType.Declaration;\n            this.version = this.stringify.xmlVersion(version);\n            if (encoding != null) {\n                this.encoding = this.stringify.xmlEncoding(encoding);\n            }\n            if (standalone != null) {\n                this.standalone = this.stringify.xmlStandalone(standalone);\n            }\n        }\n        XMLDeclaration.prototype.toString = function(options) {\n            return this.options.writer.declaration(this, this.options.writer.filterOptions(options));\n        };\n        return XMLDeclaration;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEZWNsYXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsbUNBQW1DO0FBQ2xDO0lBQ0MsSUFBSUEsVUFBVUMsZ0JBQWdCQyxTQUFTQyxVQUNyQ0MsU0FBUyxTQUFTQyxLQUFLLEVBQUVDLE1BQU07UUFBSSxJQUFLLElBQUlDLE9BQU9ELE9BQVE7WUFBRSxJQUFJRSxRQUFRQyxJQUFJLENBQUNILFFBQVFDLE1BQU1GLEtBQUssQ0FBQ0UsSUFBSSxHQUFHRCxNQUFNLENBQUNDLElBQUk7UUFBRTtRQUFFLFNBQVNHO1lBQVMsSUFBSSxDQUFDQyxXQUFXLEdBQUdOO1FBQU87UUFBRUssS0FBS0UsU0FBUyxHQUFHTixPQUFPTSxTQUFTO1FBQUVQLE1BQU1PLFNBQVMsR0FBRyxJQUFJRjtRQUFRTCxNQUFNUSxTQUFTLEdBQUdQLE9BQU9NLFNBQVM7UUFBRSxPQUFPUDtJQUFPLEdBQ3pSRyxVQUFVLENBQUMsRUFBRU0sY0FBYztJQUU3QlgsV0FBV1ksNEdBQTZCO0lBRXhDYixVQUFVYSxtQkFBT0EsQ0FBQztJQUVsQmYsV0FBV2UsbUJBQU9BLENBQUM7SUFFbkJDLE9BQU9DLE9BQU8sR0FBR2hCLGlCQUFpQixTQUFVaUIsVUFBVTtRQUNwRGQsT0FBT0gsZ0JBQWdCaUI7UUFFdkIsU0FBU2pCLGVBQWVLLE1BQU0sRUFBRWEsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLFVBQVU7WUFDM0QsSUFBSUM7WUFDSnJCLGVBQWVZLFNBQVMsQ0FBQ0YsV0FBVyxDQUFDRixJQUFJLENBQUMsSUFBSSxFQUFFSDtZQUNoRCxJQUFJSCxTQUFTZ0IsVUFBVTtnQkFDckJHLE1BQU1ILFNBQVNBLFVBQVVHLElBQUlILE9BQU8sRUFBRUMsV0FBV0UsSUFBSUYsUUFBUSxFQUFFQyxhQUFhQyxJQUFJRCxVQUFVO1lBQzVGO1lBQ0EsSUFBSSxDQUFDRixTQUFTO2dCQUNaQSxVQUFVO1lBQ1o7WUFDQSxJQUFJLENBQUNJLElBQUksR0FBR3ZCLFNBQVN3QixXQUFXO1lBQ2hDLElBQUksQ0FBQ0wsT0FBTyxHQUFHLElBQUksQ0FBQ00sU0FBUyxDQUFDQyxVQUFVLENBQUNQO1lBQ3pDLElBQUlDLFlBQVksTUFBTTtnQkFDcEIsSUFBSSxDQUFDQSxRQUFRLEdBQUcsSUFBSSxDQUFDSyxTQUFTLENBQUNFLFdBQVcsQ0FBQ1A7WUFDN0M7WUFDQSxJQUFJQyxjQUFjLE1BQU07Z0JBQ3RCLElBQUksQ0FBQ0EsVUFBVSxHQUFHLElBQUksQ0FBQ0ksU0FBUyxDQUFDRyxhQUFhLENBQUNQO1lBQ2pEO1FBQ0Y7UUFFQXBCLGVBQWVXLFNBQVMsQ0FBQ2lCLFFBQVEsR0FBRyxTQUFTQyxPQUFPO1lBQ2xELE9BQU8sSUFBSSxDQUFDQSxPQUFPLENBQUNDLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUNGLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDRSxhQUFhLENBQUNIO1FBQ2pGO1FBRUEsT0FBTzdCO0lBRVQsRUFBR0M7QUFFTCxHQUFHTyxJQUFJLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLWNvZGUvLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRGVjbGFyYXRpb24uanM/NzFiYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFhNTERlY2xhcmF0aW9uLCBYTUxOb2RlLCBpc09iamVjdCxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9VdGlsaXR5JykuaXNPYmplY3Q7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRGVjbGFyYXRpb24gPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxEZWNsYXJhdGlvbiwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxEZWNsYXJhdGlvbihwYXJlbnQsIHZlcnNpb24sIGVuY29kaW5nLCBzdGFuZGFsb25lKSB7XG4gICAgICB2YXIgcmVmO1xuICAgICAgWE1MRGVjbGFyYXRpb24uX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIGlmIChpc09iamVjdCh2ZXJzaW9uKSkge1xuICAgICAgICByZWYgPSB2ZXJzaW9uLCB2ZXJzaW9uID0gcmVmLnZlcnNpb24sIGVuY29kaW5nID0gcmVmLmVuY29kaW5nLCBzdGFuZGFsb25lID0gcmVmLnN0YW5kYWxvbmU7XG4gICAgICB9XG4gICAgICBpZiAoIXZlcnNpb24pIHtcbiAgICAgICAgdmVyc2lvbiA9ICcxLjAnO1xuICAgICAgfVxuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuRGVjbGFyYXRpb247XG4gICAgICB0aGlzLnZlcnNpb24gPSB0aGlzLnN0cmluZ2lmeS54bWxWZXJzaW9uKHZlcnNpb24pO1xuICAgICAgaWYgKGVuY29kaW5nICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5lbmNvZGluZyA9IHRoaXMuc3RyaW5naWZ5LnhtbEVuY29kaW5nKGVuY29kaW5nKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFuZGFsb25lICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5zdGFuZGFsb25lID0gdGhpcy5zdHJpbmdpZnkueG1sU3RhbmRhbG9uZShzdGFuZGFsb25lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBYTUxEZWNsYXJhdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5kZWNsYXJhdGlvbih0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRGVjbGFyYXRpb247XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiTm9kZVR5cGUiLCJYTUxEZWNsYXJhdGlvbiIsIlhNTE5vZGUiLCJpc09iamVjdCIsImV4dGVuZCIsImNoaWxkIiwicGFyZW50Iiwia2V5IiwiaGFzUHJvcCIsImNhbGwiLCJjdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfX3N1cGVyX18iLCJoYXNPd25Qcm9wZXJ0eSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic3VwZXJDbGFzcyIsInZlcnNpb24iLCJlbmNvZGluZyIsInN0YW5kYWxvbmUiLCJyZWYiLCJ0eXBlIiwiRGVjbGFyYXRpb24iLCJzdHJpbmdpZnkiLCJ4bWxWZXJzaW9uIiwieG1sRW5jb2RpbmciLCJ4bWxTdGFuZGFsb25lIiwidG9TdHJpbmciLCJvcHRpb25zIiwid3JpdGVyIiwiZGVjbGFyYXRpb24iLCJmaWx0ZXJPcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLDeclaration.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLDocType.js":
/*!***************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLDocType.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNamedNodeMap, XMLNode, isObject, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    isObject = (__webpack_require__(/*! ./Utility */ \"(action-browser)/./node_modules/xmlbuilder/lib/Utility.js\").isObject);\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLDTDAttList = __webpack_require__(/*! ./XMLDTDAttList */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDTDAttList.js\");\n    XMLDTDEntity = __webpack_require__(/*! ./XMLDTDEntity */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDTDEntity.js\");\n    XMLDTDElement = __webpack_require__(/*! ./XMLDTDElement */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDTDElement.js\");\n    XMLDTDNotation = __webpack_require__(/*! ./XMLDTDNotation */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDTDNotation.js\");\n    XMLNamedNodeMap = __webpack_require__(/*! ./XMLNamedNodeMap */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLNamedNodeMap.js\");\n    module.exports = XMLDocType = function(superClass) {\n        extend(XMLDocType, superClass);\n        function XMLDocType(parent, pubID, sysID) {\n            var child, i, len, ref, ref1, ref2;\n            XMLDocType.__super__.constructor.call(this, parent);\n            this.type = NodeType.DocType;\n            if (parent.children) {\n                ref = parent.children;\n                for(i = 0, len = ref.length; i < len; i++){\n                    child = ref[i];\n                    if (child.type === NodeType.Element) {\n                        this.name = child.name;\n                        break;\n                    }\n                }\n            }\n            this.documentObject = parent;\n            if (isObject(pubID)) {\n                ref1 = pubID, pubID = ref1.pubID, sysID = ref1.sysID;\n            }\n            if (sysID == null) {\n                ref2 = [\n                    pubID,\n                    sysID\n                ], sysID = ref2[0], pubID = ref2[1];\n            }\n            if (pubID != null) {\n                this.pubID = this.stringify.dtdPubID(pubID);\n            }\n            if (sysID != null) {\n                this.sysID = this.stringify.dtdSysID(sysID);\n            }\n        }\n        Object.defineProperty(XMLDocType.prototype, \"entities\", {\n            get: function() {\n                var child, i, len, nodes, ref;\n                nodes = {};\n                ref = this.children;\n                for(i = 0, len = ref.length; i < len; i++){\n                    child = ref[i];\n                    if (child.type === NodeType.EntityDeclaration && !child.pe) {\n                        nodes[child.name] = child;\n                    }\n                }\n                return new XMLNamedNodeMap(nodes);\n            }\n        });\n        Object.defineProperty(XMLDocType.prototype, \"notations\", {\n            get: function() {\n                var child, i, len, nodes, ref;\n                nodes = {};\n                ref = this.children;\n                for(i = 0, len = ref.length; i < len; i++){\n                    child = ref[i];\n                    if (child.type === NodeType.NotationDeclaration) {\n                        nodes[child.name] = child;\n                    }\n                }\n                return new XMLNamedNodeMap(nodes);\n            }\n        });\n        Object.defineProperty(XMLDocType.prototype, \"publicId\", {\n            get: function() {\n                return this.pubID;\n            }\n        });\n        Object.defineProperty(XMLDocType.prototype, \"systemId\", {\n            get: function() {\n                return this.sysID;\n            }\n        });\n        Object.defineProperty(XMLDocType.prototype, \"internalSubset\", {\n            get: function() {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n        });\n        XMLDocType.prototype.element = function(name, value) {\n            var child;\n            child = new XMLDTDElement(this, name, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n            var child;\n            child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n            this.children.push(child);\n            return this;\n        };\n        XMLDocType.prototype.entity = function(name, value) {\n            var child;\n            child = new XMLDTDEntity(this, false, name, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLDocType.prototype.pEntity = function(name, value) {\n            var child;\n            child = new XMLDTDEntity(this, true, name, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLDocType.prototype.notation = function(name, value) {\n            var child;\n            child = new XMLDTDNotation(this, name, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLDocType.prototype.toString = function(options) {\n            return this.options.writer.docType(this, this.options.writer.filterOptions(options));\n        };\n        XMLDocType.prototype.ele = function(name, value) {\n            return this.element(name, value);\n        };\n        XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n            return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);\n        };\n        XMLDocType.prototype.ent = function(name, value) {\n            return this.entity(name, value);\n        };\n        XMLDocType.prototype.pent = function(name, value) {\n            return this.pEntity(name, value);\n        };\n        XMLDocType.prototype.not = function(name, value) {\n            return this.notation(name, value);\n        };\n        XMLDocType.prototype.up = function() {\n            return this.root() || this.documentObject;\n        };\n        XMLDocType.prototype.isEqualNode = function(node) {\n            if (!XMLDocType.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n                return false;\n            }\n            if (node.name !== this.name) {\n                return false;\n            }\n            if (node.publicId !== this.publicId) {\n                return false;\n            }\n            if (node.systemId !== this.systemId) {\n                return false;\n            }\n            return true;\n        };\n        return XMLDocType;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLDocType.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLDocument.js":
/*!****************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLDocument.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLDOMConfiguration, XMLDOMImplementation, XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    isPlainObject = (__webpack_require__(/*! ./Utility */ \"(action-browser)/./node_modules/xmlbuilder/lib/Utility.js\").isPlainObject);\n    XMLDOMImplementation = __webpack_require__(/*! ./XMLDOMImplementation */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDOMImplementation.js\");\n    XMLDOMConfiguration = __webpack_require__(/*! ./XMLDOMConfiguration */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDOMConfiguration.js\");\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLStringifier = __webpack_require__(/*! ./XMLStringifier */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLStringifier.js\");\n    XMLStringWriter = __webpack_require__(/*! ./XMLStringWriter */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLStringWriter.js\");\n    module.exports = XMLDocument = function(superClass) {\n        extend(XMLDocument, superClass);\n        function XMLDocument(options) {\n            XMLDocument.__super__.constructor.call(this, null);\n            this.name = \"#document\";\n            this.type = NodeType.Document;\n            this.documentURI = null;\n            this.domConfig = new XMLDOMConfiguration();\n            options || (options = {});\n            if (!options.writer) {\n                options.writer = new XMLStringWriter();\n            }\n            this.options = options;\n            this.stringify = new XMLStringifier(options);\n        }\n        Object.defineProperty(XMLDocument.prototype, \"implementation\", {\n            value: new XMLDOMImplementation()\n        });\n        Object.defineProperty(XMLDocument.prototype, \"doctype\", {\n            get: function() {\n                var child, i, len, ref;\n                ref = this.children;\n                for(i = 0, len = ref.length; i < len; i++){\n                    child = ref[i];\n                    if (child.type === NodeType.DocType) {\n                        return child;\n                    }\n                }\n                return null;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"documentElement\", {\n            get: function() {\n                return this.rootObject || null;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"inputEncoding\", {\n            get: function() {\n                return null;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"strictErrorChecking\", {\n            get: function() {\n                return false;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"xmlEncoding\", {\n            get: function() {\n                if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n                    return this.children[0].encoding;\n                } else {\n                    return null;\n                }\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"xmlStandalone\", {\n            get: function() {\n                if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n                    return this.children[0].standalone === \"yes\";\n                } else {\n                    return false;\n                }\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"xmlVersion\", {\n            get: function() {\n                if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n                    return this.children[0].version;\n                } else {\n                    return \"1.0\";\n                }\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"URL\", {\n            get: function() {\n                return this.documentURI;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"origin\", {\n            get: function() {\n                return null;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"compatMode\", {\n            get: function() {\n                return null;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"characterSet\", {\n            get: function() {\n                return null;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"contentType\", {\n            get: function() {\n                return null;\n            }\n        });\n        XMLDocument.prototype.end = function(writer) {\n            var writerOptions;\n            writerOptions = {};\n            if (!writer) {\n                writer = this.options.writer;\n            } else if (isPlainObject(writer)) {\n                writerOptions = writer;\n                writer = this.options.writer;\n            }\n            return writer.document(this, writer.filterOptions(writerOptions));\n        };\n        XMLDocument.prototype.toString = function(options) {\n            return this.options.writer.document(this, this.options.writer.filterOptions(options));\n        };\n        XMLDocument.prototype.createElement = function(tagName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createDocumentFragment = function() {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createTextNode = function(data) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createComment = function(data) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createCDATASection = function(data) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createProcessingInstruction = function(target, data) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createAttribute = function(name) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createEntityReference = function(name) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.getElementsByTagName = function(tagname) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.importNode = function(importedNode, deep) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createElementNS = function(namespaceURI, qualifiedName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createAttributeNS = function(namespaceURI, qualifiedName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.getElementById = function(elementId) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.adoptNode = function(source) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.normalizeDocument = function() {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.renameNode = function(node, namespaceURI, qualifiedName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.getElementsByClassName = function(classNames) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createEvent = function(eventInterface) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createRange = function() {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createNodeIterator = function(root, whatToShow, filter) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createTreeWalker = function(root, whatToShow, filter) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        return XMLDocument;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLDocument.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLDocumentCB.js":
/*!******************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLDocumentCB.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, WriterState, XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocument, XMLDocumentCB, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, getValue, isFunction, isObject, isPlainObject, ref, hasProp = {}.hasOwnProperty;\n    ref = __webpack_require__(/*! ./Utility */ \"(action-browser)/./node_modules/xmlbuilder/lib/Utility.js\"), isObject = ref.isObject, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject, getValue = ref.getValue;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLDocument = __webpack_require__(/*! ./XMLDocument */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDocument.js\");\n    XMLElement = __webpack_require__(/*! ./XMLElement */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLElement.js\");\n    XMLCData = __webpack_require__(/*! ./XMLCData */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLCData.js\");\n    XMLComment = __webpack_require__(/*! ./XMLComment */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLComment.js\");\n    XMLRaw = __webpack_require__(/*! ./XMLRaw */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLRaw.js\");\n    XMLText = __webpack_require__(/*! ./XMLText */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLText.js\");\n    XMLProcessingInstruction = __webpack_require__(/*! ./XMLProcessingInstruction */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLProcessingInstruction.js\");\n    XMLDeclaration = __webpack_require__(/*! ./XMLDeclaration */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDeclaration.js\");\n    XMLDocType = __webpack_require__(/*! ./XMLDocType */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDocType.js\");\n    XMLDTDAttList = __webpack_require__(/*! ./XMLDTDAttList */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDTDAttList.js\");\n    XMLDTDEntity = __webpack_require__(/*! ./XMLDTDEntity */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDTDEntity.js\");\n    XMLDTDElement = __webpack_require__(/*! ./XMLDTDElement */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDTDElement.js\");\n    XMLDTDNotation = __webpack_require__(/*! ./XMLDTDNotation */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDTDNotation.js\");\n    XMLAttribute = __webpack_require__(/*! ./XMLAttribute */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLAttribute.js\");\n    XMLStringifier = __webpack_require__(/*! ./XMLStringifier */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLStringifier.js\");\n    XMLStringWriter = __webpack_require__(/*! ./XMLStringWriter */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLStringWriter.js\");\n    WriterState = __webpack_require__(/*! ./WriterState */ \"(action-browser)/./node_modules/xmlbuilder/lib/WriterState.js\");\n    module.exports = XMLDocumentCB = function() {\n        function XMLDocumentCB(options, onData, onEnd) {\n            var writerOptions;\n            this.name = \"?xml\";\n            this.type = NodeType.Document;\n            options || (options = {});\n            writerOptions = {};\n            if (!options.writer) {\n                options.writer = new XMLStringWriter();\n            } else if (isPlainObject(options.writer)) {\n                writerOptions = options.writer;\n                options.writer = new XMLStringWriter();\n            }\n            this.options = options;\n            this.writer = options.writer;\n            this.writerOptions = this.writer.filterOptions(writerOptions);\n            this.stringify = new XMLStringifier(options);\n            this.onDataCallback = onData || function() {};\n            this.onEndCallback = onEnd || function() {};\n            this.currentNode = null;\n            this.currentLevel = -1;\n            this.openTags = {};\n            this.documentStarted = false;\n            this.documentCompleted = false;\n            this.root = null;\n        }\n        XMLDocumentCB.prototype.createChildNode = function(node) {\n            var att, attName, attributes, child, i, len, ref1, ref2;\n            switch(node.type){\n                case NodeType.CData:\n                    this.cdata(node.value);\n                    break;\n                case NodeType.Comment:\n                    this.comment(node.value);\n                    break;\n                case NodeType.Element:\n                    attributes = {};\n                    ref1 = node.attribs;\n                    for(attName in ref1){\n                        if (!hasProp.call(ref1, attName)) continue;\n                        att = ref1[attName];\n                        attributes[attName] = att.value;\n                    }\n                    this.node(node.name, attributes);\n                    break;\n                case NodeType.Dummy:\n                    this.dummy();\n                    break;\n                case NodeType.Raw:\n                    this.raw(node.value);\n                    break;\n                case NodeType.Text:\n                    this.text(node.value);\n                    break;\n                case NodeType.ProcessingInstruction:\n                    this.instruction(node.target, node.value);\n                    break;\n                default:\n                    throw new Error(\"This XML node type is not supported in a JS object: \" + node.constructor.name);\n            }\n            ref2 = node.children;\n            for(i = 0, len = ref2.length; i < len; i++){\n                child = ref2[i];\n                this.createChildNode(child);\n                if (child.type === NodeType.Element) {\n                    this.up();\n                }\n            }\n            return this;\n        };\n        XMLDocumentCB.prototype.dummy = function() {\n            return this;\n        };\n        XMLDocumentCB.prototype.node = function(name, attributes, text) {\n            var ref1;\n            if (name == null) {\n                throw new Error(\"Missing node name.\");\n            }\n            if (this.root && this.currentLevel === -1) {\n                throw new Error(\"Document can only have one root node. \" + this.debugInfo(name));\n            }\n            this.openCurrent();\n            name = getValue(name);\n            if (attributes == null) {\n                attributes = {};\n            }\n            attributes = getValue(attributes);\n            if (!isObject(attributes)) {\n                ref1 = [\n                    attributes,\n                    text\n                ], text = ref1[0], attributes = ref1[1];\n            }\n            this.currentNode = new XMLElement(this, name, attributes);\n            this.currentNode.children = false;\n            this.currentLevel++;\n            this.openTags[this.currentLevel] = this.currentNode;\n            if (text != null) {\n                this.text(text);\n            }\n            return this;\n        };\n        XMLDocumentCB.prototype.element = function(name, attributes, text) {\n            var child, i, len, oldValidationFlag, ref1, root;\n            if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n                this.dtdElement.apply(this, arguments);\n            } else {\n                if (Array.isArray(name) || isObject(name) || isFunction(name)) {\n                    oldValidationFlag = this.options.noValidation;\n                    this.options.noValidation = true;\n                    root = new XMLDocument(this.options).element(\"TEMP_ROOT\");\n                    root.element(name);\n                    this.options.noValidation = oldValidationFlag;\n                    ref1 = root.children;\n                    for(i = 0, len = ref1.length; i < len; i++){\n                        child = ref1[i];\n                        this.createChildNode(child);\n                        if (child.type === NodeType.Element) {\n                            this.up();\n                        }\n                    }\n                } else {\n                    this.node(name, attributes, text);\n                }\n            }\n            return this;\n        };\n        XMLDocumentCB.prototype.attribute = function(name, value) {\n            var attName, attValue;\n            if (!this.currentNode || this.currentNode.children) {\n                throw new Error(\"att() can only be used immediately after an ele() call in callback mode. \" + this.debugInfo(name));\n            }\n            if (name != null) {\n                name = getValue(name);\n            }\n            if (isObject(name)) {\n                for(attName in name){\n                    if (!hasProp.call(name, attName)) continue;\n                    attValue = name[attName];\n                    this.attribute(attName, attValue);\n                }\n            } else {\n                if (isFunction(value)) {\n                    value = value.apply();\n                }\n                if (this.options.keepNullAttributes && value == null) {\n                    this.currentNode.attribs[name] = new XMLAttribute(this, name, \"\");\n                } else if (value != null) {\n                    this.currentNode.attribs[name] = new XMLAttribute(this, name, value);\n                }\n            }\n            return this;\n        };\n        XMLDocumentCB.prototype.text = function(value) {\n            var node;\n            this.openCurrent();\n            node = new XMLText(this, value);\n            this.onData(this.writer.text(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        };\n        XMLDocumentCB.prototype.cdata = function(value) {\n            var node;\n            this.openCurrent();\n            node = new XMLCData(this, value);\n            this.onData(this.writer.cdata(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        };\n        XMLDocumentCB.prototype.comment = function(value) {\n            var node;\n            this.openCurrent();\n            node = new XMLComment(this, value);\n            this.onData(this.writer.comment(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        };\n        XMLDocumentCB.prototype.raw = function(value) {\n            var node;\n            this.openCurrent();\n            node = new XMLRaw(this, value);\n            this.onData(this.writer.raw(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        };\n        XMLDocumentCB.prototype.instruction = function(target, value) {\n            var i, insTarget, insValue, len, node;\n            this.openCurrent();\n            if (target != null) {\n                target = getValue(target);\n            }\n            if (value != null) {\n                value = getValue(value);\n            }\n            if (Array.isArray(target)) {\n                for(i = 0, len = target.length; i < len; i++){\n                    insTarget = target[i];\n                    this.instruction(insTarget);\n                }\n            } else if (isObject(target)) {\n                for(insTarget in target){\n                    if (!hasProp.call(target, insTarget)) continue;\n                    insValue = target[insTarget];\n                    this.instruction(insTarget, insValue);\n                }\n            } else {\n                if (isFunction(value)) {\n                    value = value.apply();\n                }\n                node = new XMLProcessingInstruction(this, target, value);\n                this.onData(this.writer.processingInstruction(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            }\n            return this;\n        };\n        XMLDocumentCB.prototype.declaration = function(version, encoding, standalone) {\n            var node;\n            this.openCurrent();\n            if (this.documentStarted) {\n                throw new Error(\"declaration() must be the first node.\");\n            }\n            node = new XMLDeclaration(this, version, encoding, standalone);\n            this.onData(this.writer.declaration(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        };\n        XMLDocumentCB.prototype.doctype = function(root, pubID, sysID) {\n            this.openCurrent();\n            if (root == null) {\n                throw new Error(\"Missing root node name.\");\n            }\n            if (this.root) {\n                throw new Error(\"dtd() must come before the root node.\");\n            }\n            this.currentNode = new XMLDocType(this, pubID, sysID);\n            this.currentNode.rootNodeName = root;\n            this.currentNode.children = false;\n            this.currentLevel++;\n            this.openTags[this.currentLevel] = this.currentNode;\n            return this;\n        };\n        XMLDocumentCB.prototype.dtdElement = function(name, value) {\n            var node;\n            this.openCurrent();\n            node = new XMLDTDElement(this, name, value);\n            this.onData(this.writer.dtdElement(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        };\n        XMLDocumentCB.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n            var node;\n            this.openCurrent();\n            node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n            this.onData(this.writer.dtdAttList(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        };\n        XMLDocumentCB.prototype.entity = function(name, value) {\n            var node;\n            this.openCurrent();\n            node = new XMLDTDEntity(this, false, name, value);\n            this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        };\n        XMLDocumentCB.prototype.pEntity = function(name, value) {\n            var node;\n            this.openCurrent();\n            node = new XMLDTDEntity(this, true, name, value);\n            this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        };\n        XMLDocumentCB.prototype.notation = function(name, value) {\n            var node;\n            this.openCurrent();\n            node = new XMLDTDNotation(this, name, value);\n            this.onData(this.writer.dtdNotation(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        };\n        XMLDocumentCB.prototype.up = function() {\n            if (this.currentLevel < 0) {\n                throw new Error(\"The document node has no parent.\");\n            }\n            if (this.currentNode) {\n                if (this.currentNode.children) {\n                    this.closeNode(this.currentNode);\n                } else {\n                    this.openNode(this.currentNode);\n                }\n                this.currentNode = null;\n            } else {\n                this.closeNode(this.openTags[this.currentLevel]);\n            }\n            delete this.openTags[this.currentLevel];\n            this.currentLevel--;\n            return this;\n        };\n        XMLDocumentCB.prototype.end = function() {\n            while(this.currentLevel >= 0){\n                this.up();\n            }\n            return this.onEnd();\n        };\n        XMLDocumentCB.prototype.openCurrent = function() {\n            if (this.currentNode) {\n                this.currentNode.children = true;\n                return this.openNode(this.currentNode);\n            }\n        };\n        XMLDocumentCB.prototype.openNode = function(node) {\n            var att, chunk, name, ref1;\n            if (!node.isOpen) {\n                if (!this.root && this.currentLevel === 0 && node.type === NodeType.Element) {\n                    this.root = node;\n                }\n                chunk = \"\";\n                if (node.type === NodeType.Element) {\n                    this.writerOptions.state = WriterState.OpenTag;\n                    chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + \"<\" + node.name;\n                    ref1 = node.attribs;\n                    for(name in ref1){\n                        if (!hasProp.call(ref1, name)) continue;\n                        att = ref1[name];\n                        chunk += this.writer.attribute(att, this.writerOptions, this.currentLevel);\n                    }\n                    chunk += (node.children ? \">\" : \"/>\") + this.writer.endline(node, this.writerOptions, this.currentLevel);\n                    this.writerOptions.state = WriterState.InsideTag;\n                } else {\n                    this.writerOptions.state = WriterState.OpenTag;\n                    chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + \"<!DOCTYPE \" + node.rootNodeName;\n                    if (node.pubID && node.sysID) {\n                        chunk += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n                    } else if (node.sysID) {\n                        chunk += ' SYSTEM \"' + node.sysID + '\"';\n                    }\n                    if (node.children) {\n                        chunk += \" [\";\n                        this.writerOptions.state = WriterState.InsideTag;\n                    } else {\n                        this.writerOptions.state = WriterState.CloseTag;\n                        chunk += \">\";\n                    }\n                    chunk += this.writer.endline(node, this.writerOptions, this.currentLevel);\n                }\n                this.onData(chunk, this.currentLevel);\n                return node.isOpen = true;\n            }\n        };\n        XMLDocumentCB.prototype.closeNode = function(node) {\n            var chunk;\n            if (!node.isClosed) {\n                chunk = \"\";\n                this.writerOptions.state = WriterState.CloseTag;\n                if (node.type === NodeType.Element) {\n                    chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + \"</\" + node.name + \">\" + this.writer.endline(node, this.writerOptions, this.currentLevel);\n                } else {\n                    chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + \"]>\" + this.writer.endline(node, this.writerOptions, this.currentLevel);\n                }\n                this.writerOptions.state = WriterState.None;\n                this.onData(chunk, this.currentLevel);\n                return node.isClosed = true;\n            }\n        };\n        XMLDocumentCB.prototype.onData = function(chunk, level) {\n            this.documentStarted = true;\n            return this.onDataCallback(chunk, level + 1);\n        };\n        XMLDocumentCB.prototype.onEnd = function() {\n            this.documentCompleted = true;\n            return this.onEndCallback();\n        };\n        XMLDocumentCB.prototype.debugInfo = function(name) {\n            if (name == null) {\n                return \"\";\n            } else {\n                return \"node: <\" + name + \">\";\n            }\n        };\n        XMLDocumentCB.prototype.ele = function() {\n            return this.element.apply(this, arguments);\n        };\n        XMLDocumentCB.prototype.nod = function(name, attributes, text) {\n            return this.node(name, attributes, text);\n        };\n        XMLDocumentCB.prototype.txt = function(value) {\n            return this.text(value);\n        };\n        XMLDocumentCB.prototype.dat = function(value) {\n            return this.cdata(value);\n        };\n        XMLDocumentCB.prototype.com = function(value) {\n            return this.comment(value);\n        };\n        XMLDocumentCB.prototype.ins = function(target, value) {\n            return this.instruction(target, value);\n        };\n        XMLDocumentCB.prototype.dec = function(version, encoding, standalone) {\n            return this.declaration(version, encoding, standalone);\n        };\n        XMLDocumentCB.prototype.dtd = function(root, pubID, sysID) {\n            return this.doctype(root, pubID, sysID);\n        };\n        XMLDocumentCB.prototype.e = function(name, attributes, text) {\n            return this.element(name, attributes, text);\n        };\n        XMLDocumentCB.prototype.n = function(name, attributes, text) {\n            return this.node(name, attributes, text);\n        };\n        XMLDocumentCB.prototype.t = function(value) {\n            return this.text(value);\n        };\n        XMLDocumentCB.prototype.d = function(value) {\n            return this.cdata(value);\n        };\n        XMLDocumentCB.prototype.c = function(value) {\n            return this.comment(value);\n        };\n        XMLDocumentCB.prototype.r = function(value) {\n            return this.raw(value);\n        };\n        XMLDocumentCB.prototype.i = function(target, value) {\n            return this.instruction(target, value);\n        };\n        XMLDocumentCB.prototype.att = function() {\n            if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n                return this.attList.apply(this, arguments);\n            } else {\n                return this.attribute.apply(this, arguments);\n            }\n        };\n        XMLDocumentCB.prototype.a = function() {\n            if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n                return this.attList.apply(this, arguments);\n            } else {\n                return this.attribute.apply(this, arguments);\n            }\n        };\n        XMLDocumentCB.prototype.ent = function(name, value) {\n            return this.entity(name, value);\n        };\n        XMLDocumentCB.prototype.pent = function(name, value) {\n            return this.pEntity(name, value);\n        };\n        XMLDocumentCB.prototype.not = function(name, value) {\n            return this.notation(name, value);\n        };\n        return XMLDocumentCB;\n    }();\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLDocumentCB.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLDummy.js":
/*!*************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLDummy.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLDummy, XMLNode, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js\");\n    module.exports = XMLDummy = function(superClass) {\n        extend(XMLDummy, superClass);\n        function XMLDummy(parent) {\n            XMLDummy.__super__.constructor.call(this, parent);\n            this.type = NodeType.Dummy;\n        }\n        XMLDummy.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLDummy.prototype.toString = function(options) {\n            return \"\";\n        };\n        return XMLDummy;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEdW1teS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsbUNBQW1DO0FBQ2xDO0lBQ0MsSUFBSUEsVUFBVUMsVUFBVUMsU0FDdEJDLFNBQVMsU0FBU0MsS0FBSyxFQUFFQyxNQUFNO1FBQUksSUFBSyxJQUFJQyxPQUFPRCxPQUFRO1lBQUUsSUFBSUUsUUFBUUMsSUFBSSxDQUFDSCxRQUFRQyxNQUFNRixLQUFLLENBQUNFLElBQUksR0FBR0QsTUFBTSxDQUFDQyxJQUFJO1FBQUU7UUFBRSxTQUFTRztZQUFTLElBQUksQ0FBQ0MsV0FBVyxHQUFHTjtRQUFPO1FBQUVLLEtBQUtFLFNBQVMsR0FBR04sT0FBT00sU0FBUztRQUFFUCxNQUFNTyxTQUFTLEdBQUcsSUFBSUY7UUFBUUwsTUFBTVEsU0FBUyxHQUFHUCxPQUFPTSxTQUFTO1FBQUUsT0FBT1A7SUFBTyxHQUN6UkcsVUFBVSxDQUFDLEVBQUVNLGNBQWM7SUFFN0JYLFVBQVVZLG1CQUFPQSxDQUFDO0lBRWxCZCxXQUFXYyxtQkFBT0EsQ0FBQztJQUVuQkMsT0FBT0MsT0FBTyxHQUFHZixXQUFXLFNBQVVnQixVQUFVO1FBQzlDZCxPQUFPRixVQUFVZ0I7UUFFakIsU0FBU2hCLFNBQVNJLE1BQU07WUFDdEJKLFNBQVNXLFNBQVMsQ0FBQ0YsV0FBVyxDQUFDRixJQUFJLENBQUMsSUFBSSxFQUFFSDtZQUMxQyxJQUFJLENBQUNhLElBQUksR0FBR2xCLFNBQVNtQixLQUFLO1FBQzVCO1FBRUFsQixTQUFTVSxTQUFTLENBQUNTLEtBQUssR0FBRztZQUN6QixPQUFPQyxPQUFPQyxNQUFNLENBQUMsSUFBSTtRQUMzQjtRQUVBckIsU0FBU1UsU0FBUyxDQUFDWSxRQUFRLEdBQUcsU0FBU0MsT0FBTztZQUM1QyxPQUFPO1FBQ1Q7UUFFQSxPQUFPdkI7SUFFVCxFQUFHQztBQUVMLEdBQUdNLElBQUksQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpYmUtY29kZS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEdW1teS5qcz8wZDBlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MRHVtbXksIFhNTE5vZGUsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEdW1teSA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTER1bW15LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTER1bW15KHBhcmVudCkge1xuICAgICAgWE1MRHVtbXkuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLkR1bW15O1xuICAgIH1cblxuICAgIFhNTER1bW15LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfTtcblxuICAgIFhNTER1bW15LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTER1bW15O1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIk5vZGVUeXBlIiwiWE1MRHVtbXkiLCJYTUxOb2RlIiwiZXh0ZW5kIiwiY2hpbGQiLCJwYXJlbnQiLCJrZXkiLCJoYXNQcm9wIiwiY2FsbCIsImN0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9fc3VwZXJfXyIsImhhc093blByb3BlcnR5IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzdXBlckNsYXNzIiwidHlwZSIsIkR1bW15IiwiY2xvbmUiLCJPYmplY3QiLCJjcmVhdGUiLCJ0b1N0cmluZyIsIm9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLDummy.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLElement.js":
/*!***************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLElement.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLAttribute, XMLElement, XMLNamedNodeMap, XMLNode, getValue, isFunction, isObject, ref, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    ref = __webpack_require__(/*! ./Utility */ \"(action-browser)/./node_modules/xmlbuilder/lib/Utility.js\"), isObject = ref.isObject, isFunction = ref.isFunction, getValue = ref.getValue;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLAttribute = __webpack_require__(/*! ./XMLAttribute */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLAttribute.js\");\n    XMLNamedNodeMap = __webpack_require__(/*! ./XMLNamedNodeMap */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLNamedNodeMap.js\");\n    module.exports = XMLElement = function(superClass) {\n        extend(XMLElement, superClass);\n        function XMLElement(parent, name, attributes) {\n            var child, j, len, ref1;\n            XMLElement.__super__.constructor.call(this, parent);\n            if (name == null) {\n                throw new Error(\"Missing element name. \" + this.debugInfo());\n            }\n            this.name = this.stringify.name(name);\n            this.type = NodeType.Element;\n            this.attribs = {};\n            this.schemaTypeInfo = null;\n            if (attributes != null) {\n                this.attribute(attributes);\n            }\n            if (parent.type === NodeType.Document) {\n                this.isRoot = true;\n                this.documentObject = parent;\n                parent.rootObject = this;\n                if (parent.children) {\n                    ref1 = parent.children;\n                    for(j = 0, len = ref1.length; j < len; j++){\n                        child = ref1[j];\n                        if (child.type === NodeType.DocType) {\n                            child.name = this.name;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        Object.defineProperty(XMLElement.prototype, \"tagName\", {\n            get: function() {\n                return this.name;\n            }\n        });\n        Object.defineProperty(XMLElement.prototype, \"namespaceURI\", {\n            get: function() {\n                return \"\";\n            }\n        });\n        Object.defineProperty(XMLElement.prototype, \"prefix\", {\n            get: function() {\n                return \"\";\n            }\n        });\n        Object.defineProperty(XMLElement.prototype, \"localName\", {\n            get: function() {\n                return this.name;\n            }\n        });\n        Object.defineProperty(XMLElement.prototype, \"id\", {\n            get: function() {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n        });\n        Object.defineProperty(XMLElement.prototype, \"className\", {\n            get: function() {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n        });\n        Object.defineProperty(XMLElement.prototype, \"classList\", {\n            get: function() {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n        });\n        Object.defineProperty(XMLElement.prototype, \"attributes\", {\n            get: function() {\n                if (!this.attributeMap || !this.attributeMap.nodes) {\n                    this.attributeMap = new XMLNamedNodeMap(this.attribs);\n                }\n                return this.attributeMap;\n            }\n        });\n        XMLElement.prototype.clone = function() {\n            var att, attName, clonedSelf, ref1;\n            clonedSelf = Object.create(this);\n            if (clonedSelf.isRoot) {\n                clonedSelf.documentObject = null;\n            }\n            clonedSelf.attribs = {};\n            ref1 = this.attribs;\n            for(attName in ref1){\n                if (!hasProp.call(ref1, attName)) continue;\n                att = ref1[attName];\n                clonedSelf.attribs[attName] = att.clone();\n            }\n            clonedSelf.children = [];\n            this.children.forEach(function(child) {\n                var clonedChild;\n                clonedChild = child.clone();\n                clonedChild.parent = clonedSelf;\n                return clonedSelf.children.push(clonedChild);\n            });\n            return clonedSelf;\n        };\n        XMLElement.prototype.attribute = function(name, value) {\n            var attName, attValue;\n            if (name != null) {\n                name = getValue(name);\n            }\n            if (isObject(name)) {\n                for(attName in name){\n                    if (!hasProp.call(name, attName)) continue;\n                    attValue = name[attName];\n                    this.attribute(attName, attValue);\n                }\n            } else {\n                if (isFunction(value)) {\n                    value = value.apply();\n                }\n                if (this.options.keepNullAttributes && value == null) {\n                    this.attribs[name] = new XMLAttribute(this, name, \"\");\n                } else if (value != null) {\n                    this.attribs[name] = new XMLAttribute(this, name, value);\n                }\n            }\n            return this;\n        };\n        XMLElement.prototype.removeAttribute = function(name) {\n            var attName, j, len;\n            if (name == null) {\n                throw new Error(\"Missing attribute name. \" + this.debugInfo());\n            }\n            name = getValue(name);\n            if (Array.isArray(name)) {\n                for(j = 0, len = name.length; j < len; j++){\n                    attName = name[j];\n                    delete this.attribs[attName];\n                }\n            } else {\n                delete this.attribs[name];\n            }\n            return this;\n        };\n        XMLElement.prototype.toString = function(options) {\n            return this.options.writer.element(this, this.options.writer.filterOptions(options));\n        };\n        XMLElement.prototype.att = function(name, value) {\n            return this.attribute(name, value);\n        };\n        XMLElement.prototype.a = function(name, value) {\n            return this.attribute(name, value);\n        };\n        XMLElement.prototype.getAttribute = function(name) {\n            if (this.attribs.hasOwnProperty(name)) {\n                return this.attribs[name].value;\n            } else {\n                return null;\n            }\n        };\n        XMLElement.prototype.setAttribute = function(name, value) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.getAttributeNode = function(name) {\n            if (this.attribs.hasOwnProperty(name)) {\n                return this.attribs[name];\n            } else {\n                return null;\n            }\n        };\n        XMLElement.prototype.setAttributeNode = function(newAttr) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.removeAttributeNode = function(oldAttr) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.getElementsByTagName = function(name) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.getAttributeNS = function(namespaceURI, localName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.setAttributeNS = function(namespaceURI, qualifiedName, value) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.removeAttributeNS = function(namespaceURI, localName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.getAttributeNodeNS = function(namespaceURI, localName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.setAttributeNodeNS = function(newAttr) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.hasAttribute = function(name) {\n            return this.attribs.hasOwnProperty(name);\n        };\n        XMLElement.prototype.hasAttributeNS = function(namespaceURI, localName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.setIdAttribute = function(name, isId) {\n            if (this.attribs.hasOwnProperty(name)) {\n                return this.attribs[name].isId;\n            } else {\n                return isId;\n            }\n        };\n        XMLElement.prototype.setIdAttributeNS = function(namespaceURI, localName, isId) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.setIdAttributeNode = function(idAttr, isId) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.getElementsByTagName = function(tagname) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.getElementsByClassName = function(classNames) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.isEqualNode = function(node) {\n            var i, j, ref1;\n            if (!XMLElement.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n                return false;\n            }\n            if (node.namespaceURI !== this.namespaceURI) {\n                return false;\n            }\n            if (node.prefix !== this.prefix) {\n                return false;\n            }\n            if (node.localName !== this.localName) {\n                return false;\n            }\n            if (node.attribs.length !== this.attribs.length) {\n                return false;\n            }\n            for(i = j = 0, ref1 = this.attribs.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j){\n                if (!this.attribs[i].isEqualNode(node.attribs[i])) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        return XMLElement;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLElement.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLNamedNodeMap.js":
/*!********************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLNamedNodeMap.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var XMLNamedNodeMap;\n    module.exports = XMLNamedNodeMap = function() {\n        function XMLNamedNodeMap(nodes) {\n            this.nodes = nodes;\n        }\n        Object.defineProperty(XMLNamedNodeMap.prototype, \"length\", {\n            get: function() {\n                return Object.keys(this.nodes).length || 0;\n            }\n        });\n        XMLNamedNodeMap.prototype.clone = function() {\n            return this.nodes = null;\n        };\n        XMLNamedNodeMap.prototype.getNamedItem = function(name) {\n            return this.nodes[name];\n        };\n        XMLNamedNodeMap.prototype.setNamedItem = function(node) {\n            var oldNode;\n            oldNode = this.nodes[node.nodeName];\n            this.nodes[node.nodeName] = node;\n            return oldNode || null;\n        };\n        XMLNamedNodeMap.prototype.removeNamedItem = function(name) {\n            var oldNode;\n            oldNode = this.nodes[name];\n            delete this.nodes[name];\n            return oldNode || null;\n        };\n        XMLNamedNodeMap.prototype.item = function(index) {\n            return this.nodes[Object.keys(this.nodes)[index]] || null;\n        };\n        XMLNamedNodeMap.prototype.getNamedItemNS = function(namespaceURI, localName) {\n            throw new Error(\"This DOM method is not implemented.\");\n        };\n        XMLNamedNodeMap.prototype.setNamedItemNS = function(node) {\n            throw new Error(\"This DOM method is not implemented.\");\n        };\n        XMLNamedNodeMap.prototype.removeNamedItemNS = function(namespaceURI, localName) {\n            throw new Error(\"This DOM method is not implemented.\");\n        };\n        return XMLNamedNodeMap;\n    }();\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxOYW1lZE5vZGVNYXAuanMiLCJtYXBwaW5ncyI6IjtBQUFBLG1DQUFtQztBQUNsQztJQUNDLElBQUlBO0lBRUpDLE9BQU9DLE9BQU8sR0FBR0Ysa0JBQWtCO1FBQ2pDLFNBQVNBLGdCQUFnQkcsS0FBSztZQUM1QixJQUFJLENBQUNBLEtBQUssR0FBR0E7UUFDZjtRQUVBQyxPQUFPQyxjQUFjLENBQUNMLGdCQUFnQk0sU0FBUyxFQUFFLFVBQVU7WUFDekRDLEtBQUs7Z0JBQ0gsT0FBT0gsT0FBT0ksSUFBSSxDQUFDLElBQUksQ0FBQ0wsS0FBSyxFQUFFTSxNQUFNLElBQUk7WUFDM0M7UUFDRjtRQUVBVCxnQkFBZ0JNLFNBQVMsQ0FBQ0ksS0FBSyxHQUFHO1lBQ2hDLE9BQU8sSUFBSSxDQUFDUCxLQUFLLEdBQUc7UUFDdEI7UUFFQUgsZ0JBQWdCTSxTQUFTLENBQUNLLFlBQVksR0FBRyxTQUFTQyxJQUFJO1lBQ3BELE9BQU8sSUFBSSxDQUFDVCxLQUFLLENBQUNTLEtBQUs7UUFDekI7UUFFQVosZ0JBQWdCTSxTQUFTLENBQUNPLFlBQVksR0FBRyxTQUFTQyxJQUFJO1lBQ3BELElBQUlDO1lBQ0pBLFVBQVUsSUFBSSxDQUFDWixLQUFLLENBQUNXLEtBQUtFLFFBQVEsQ0FBQztZQUNuQyxJQUFJLENBQUNiLEtBQUssQ0FBQ1csS0FBS0UsUUFBUSxDQUFDLEdBQUdGO1lBQzVCLE9BQU9DLFdBQVc7UUFDcEI7UUFFQWYsZ0JBQWdCTSxTQUFTLENBQUNXLGVBQWUsR0FBRyxTQUFTTCxJQUFJO1lBQ3ZELElBQUlHO1lBQ0pBLFVBQVUsSUFBSSxDQUFDWixLQUFLLENBQUNTLEtBQUs7WUFDMUIsT0FBTyxJQUFJLENBQUNULEtBQUssQ0FBQ1MsS0FBSztZQUN2QixPQUFPRyxXQUFXO1FBQ3BCO1FBRUFmLGdCQUFnQk0sU0FBUyxDQUFDWSxJQUFJLEdBQUcsU0FBU0MsS0FBSztZQUM3QyxPQUFPLElBQUksQ0FBQ2hCLEtBQUssQ0FBQ0MsT0FBT0ksSUFBSSxDQUFDLElBQUksQ0FBQ0wsS0FBSyxDQUFDLENBQUNnQixNQUFNLENBQUMsSUFBSTtRQUN2RDtRQUVBbkIsZ0JBQWdCTSxTQUFTLENBQUNjLGNBQWMsR0FBRyxTQUFTQyxZQUFZLEVBQUVDLFNBQVM7WUFDekUsTUFBTSxJQUFJQyxNQUFNO1FBQ2xCO1FBRUF2QixnQkFBZ0JNLFNBQVMsQ0FBQ2tCLGNBQWMsR0FBRyxTQUFTVixJQUFJO1lBQ3RELE1BQU0sSUFBSVMsTUFBTTtRQUNsQjtRQUVBdkIsZ0JBQWdCTSxTQUFTLENBQUNtQixpQkFBaUIsR0FBRyxTQUFTSixZQUFZLEVBQUVDLFNBQVM7WUFDNUUsTUFBTSxJQUFJQyxNQUFNO1FBQ2xCO1FBRUEsT0FBT3ZCO0lBRVQ7QUFFRixHQUFHMEIsSUFBSSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmliZS1jb2RlLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTE5hbWVkTm9kZU1hcC5qcz8wNDk1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxOYW1lZE5vZGVNYXA7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxOYW1lZE5vZGVNYXAgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MTmFtZWROb2RlTWFwKG5vZGVzKSB7XG4gICAgICB0aGlzLm5vZGVzID0gbm9kZXM7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTE5hbWVkTm9kZU1hcC5wcm90b3R5cGUsICdsZW5ndGgnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5ub2RlcykubGVuZ3RoIHx8IDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxOYW1lZE5vZGVNYXAucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlcyA9IG51bGw7XG4gICAgfTtcblxuICAgIFhNTE5hbWVkTm9kZU1hcC5wcm90b3R5cGUuZ2V0TmFtZWRJdGVtID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZXNbbmFtZV07XG4gICAgfTtcblxuICAgIFhNTE5hbWVkTm9kZU1hcC5wcm90b3R5cGUuc2V0TmFtZWRJdGVtID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIG9sZE5vZGU7XG4gICAgICBvbGROb2RlID0gdGhpcy5ub2Rlc1tub2RlLm5vZGVOYW1lXTtcbiAgICAgIHRoaXMubm9kZXNbbm9kZS5ub2RlTmFtZV0gPSBub2RlO1xuICAgICAgcmV0dXJuIG9sZE5vZGUgfHwgbnVsbDtcbiAgICB9O1xuXG4gICAgWE1MTmFtZWROb2RlTWFwLnByb3RvdHlwZS5yZW1vdmVOYW1lZEl0ZW0gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICB2YXIgb2xkTm9kZTtcbiAgICAgIG9sZE5vZGUgPSB0aGlzLm5vZGVzW25hbWVdO1xuICAgICAgZGVsZXRlIHRoaXMubm9kZXNbbmFtZV07XG4gICAgICByZXR1cm4gb2xkTm9kZSB8fCBudWxsO1xuICAgIH07XG5cbiAgICBYTUxOYW1lZE5vZGVNYXAucHJvdG90eXBlLml0ZW0gPSBmdW5jdGlvbihpbmRleCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZXNbT2JqZWN0LmtleXModGhpcy5ub2RlcylbaW5kZXhdXSB8fCBudWxsO1xuICAgIH07XG5cbiAgICBYTUxOYW1lZE5vZGVNYXAucHJvdG90eXBlLmdldE5hbWVkSXRlbU5TID0gZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH07XG5cbiAgICBYTUxOYW1lZE5vZGVNYXAucHJvdG90eXBlLnNldE5hbWVkSXRlbU5TID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfTtcblxuICAgIFhNTE5hbWVkTm9kZU1hcC5wcm90b3R5cGUucmVtb3ZlTmFtZWRJdGVtTlMgPSBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxOYW1lZE5vZGVNYXA7XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJYTUxOYW1lZE5vZGVNYXAiLCJtb2R1bGUiLCJleHBvcnRzIiwibm9kZXMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvdHlwZSIsImdldCIsImtleXMiLCJsZW5ndGgiLCJjbG9uZSIsImdldE5hbWVkSXRlbSIsIm5hbWUiLCJzZXROYW1lZEl0ZW0iLCJub2RlIiwib2xkTm9kZSIsIm5vZGVOYW1lIiwicmVtb3ZlTmFtZWRJdGVtIiwiaXRlbSIsImluZGV4IiwiZ2V0TmFtZWRJdGVtTlMiLCJuYW1lc3BhY2VVUkkiLCJsb2NhbE5hbWUiLCJFcnJvciIsInNldE5hbWVkSXRlbU5TIiwicmVtb3ZlTmFtZWRJdGVtTlMiLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLNamedNodeMap.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLNode.js":
/*!************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLNode.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var DocumentPosition, NodeType, XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLNamedNodeMap, XMLNode, XMLNodeList, XMLProcessingInstruction, XMLRaw, XMLText, getValue, isEmpty, isFunction, isObject, ref1, hasProp = {}.hasOwnProperty;\n    ref1 = __webpack_require__(/*! ./Utility */ \"(action-browser)/./node_modules/xmlbuilder/lib/Utility.js\"), isObject = ref1.isObject, isFunction = ref1.isFunction, isEmpty = ref1.isEmpty, getValue = ref1.getValue;\n    XMLElement = null;\n    XMLCData = null;\n    XMLComment = null;\n    XMLDeclaration = null;\n    XMLDocType = null;\n    XMLRaw = null;\n    XMLText = null;\n    XMLProcessingInstruction = null;\n    XMLDummy = null;\n    NodeType = null;\n    XMLNodeList = null;\n    XMLNamedNodeMap = null;\n    DocumentPosition = null;\n    module.exports = XMLNode = function() {\n        function XMLNode(parent1) {\n            this.parent = parent1;\n            if (this.parent) {\n                this.options = this.parent.options;\n                this.stringify = this.parent.stringify;\n            }\n            this.value = null;\n            this.children = [];\n            this.baseURI = null;\n            if (!XMLElement) {\n                XMLElement = __webpack_require__(/*! ./XMLElement */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLElement.js\");\n                XMLCData = __webpack_require__(/*! ./XMLCData */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLCData.js\");\n                XMLComment = __webpack_require__(/*! ./XMLComment */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLComment.js\");\n                XMLDeclaration = __webpack_require__(/*! ./XMLDeclaration */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDeclaration.js\");\n                XMLDocType = __webpack_require__(/*! ./XMLDocType */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDocType.js\");\n                XMLRaw = __webpack_require__(/*! ./XMLRaw */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLRaw.js\");\n                XMLText = __webpack_require__(/*! ./XMLText */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLText.js\");\n                XMLProcessingInstruction = __webpack_require__(/*! ./XMLProcessingInstruction */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLProcessingInstruction.js\");\n                XMLDummy = __webpack_require__(/*! ./XMLDummy */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDummy.js\");\n                NodeType = __webpack_require__(/*! ./NodeType */ \"(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js\");\n                XMLNodeList = __webpack_require__(/*! ./XMLNodeList */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLNodeList.js\");\n                XMLNamedNodeMap = __webpack_require__(/*! ./XMLNamedNodeMap */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLNamedNodeMap.js\");\n                DocumentPosition = __webpack_require__(/*! ./DocumentPosition */ \"(action-browser)/./node_modules/xmlbuilder/lib/DocumentPosition.js\");\n            }\n        }\n        Object.defineProperty(XMLNode.prototype, \"nodeName\", {\n            get: function() {\n                return this.name;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"nodeType\", {\n            get: function() {\n                return this.type;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"nodeValue\", {\n            get: function() {\n                return this.value;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"parentNode\", {\n            get: function() {\n                return this.parent;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"childNodes\", {\n            get: function() {\n                if (!this.childNodeList || !this.childNodeList.nodes) {\n                    this.childNodeList = new XMLNodeList(this.children);\n                }\n                return this.childNodeList;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"firstChild\", {\n            get: function() {\n                return this.children[0] || null;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"lastChild\", {\n            get: function() {\n                return this.children[this.children.length - 1] || null;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"previousSibling\", {\n            get: function() {\n                var i;\n                i = this.parent.children.indexOf(this);\n                return this.parent.children[i - 1] || null;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"nextSibling\", {\n            get: function() {\n                var i;\n                i = this.parent.children.indexOf(this);\n                return this.parent.children[i + 1] || null;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"ownerDocument\", {\n            get: function() {\n                return this.document() || null;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"textContent\", {\n            get: function() {\n                var child, j, len, ref2, str;\n                if (this.nodeType === NodeType.Element || this.nodeType === NodeType.DocumentFragment) {\n                    str = \"\";\n                    ref2 = this.children;\n                    for(j = 0, len = ref2.length; j < len; j++){\n                        child = ref2[j];\n                        if (child.textContent) {\n                            str += child.textContent;\n                        }\n                    }\n                    return str;\n                } else {\n                    return null;\n                }\n            },\n            set: function(value) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n        });\n        XMLNode.prototype.setParent = function(parent) {\n            var child, j, len, ref2, results;\n            this.parent = parent;\n            if (parent) {\n                this.options = parent.options;\n                this.stringify = parent.stringify;\n            }\n            ref2 = this.children;\n            results = [];\n            for(j = 0, len = ref2.length; j < len; j++){\n                child = ref2[j];\n                results.push(child.setParent(this));\n            }\n            return results;\n        };\n        XMLNode.prototype.element = function(name, attributes, text) {\n            var childNode, item, j, k, key, lastChild, len, len1, ref2, ref3, val;\n            lastChild = null;\n            if (attributes === null && text == null) {\n                ref2 = [\n                    {},\n                    null\n                ], attributes = ref2[0], text = ref2[1];\n            }\n            if (attributes == null) {\n                attributes = {};\n            }\n            attributes = getValue(attributes);\n            if (!isObject(attributes)) {\n                ref3 = [\n                    attributes,\n                    text\n                ], text = ref3[0], attributes = ref3[1];\n            }\n            if (name != null) {\n                name = getValue(name);\n            }\n            if (Array.isArray(name)) {\n                for(j = 0, len = name.length; j < len; j++){\n                    item = name[j];\n                    lastChild = this.element(item);\n                }\n            } else if (isFunction(name)) {\n                lastChild = this.element(name.apply());\n            } else if (isObject(name)) {\n                for(key in name){\n                    if (!hasProp.call(name, key)) continue;\n                    val = name[key];\n                    if (isFunction(val)) {\n                        val = val.apply();\n                    }\n                    if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {\n                        lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);\n                    } else if (!this.options.separateArrayItems && Array.isArray(val) && isEmpty(val)) {\n                        lastChild = this.dummy();\n                    } else if (isObject(val) && isEmpty(val)) {\n                        lastChild = this.element(key);\n                    } else if (!this.options.keepNullNodes && val == null) {\n                        lastChild = this.dummy();\n                    } else if (!this.options.separateArrayItems && Array.isArray(val)) {\n                        for(k = 0, len1 = val.length; k < len1; k++){\n                            item = val[k];\n                            childNode = {};\n                            childNode[key] = item;\n                            lastChild = this.element(childNode);\n                        }\n                    } else if (isObject(val)) {\n                        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && key.indexOf(this.stringify.convertTextKey) === 0) {\n                            lastChild = this.element(val);\n                        } else {\n                            lastChild = this.element(key);\n                            lastChild.element(val);\n                        }\n                    } else {\n                        lastChild = this.element(key, val);\n                    }\n                }\n            } else if (!this.options.keepNullNodes && text === null) {\n                lastChild = this.dummy();\n            } else {\n                if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {\n                    lastChild = this.text(text);\n                } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {\n                    lastChild = this.cdata(text);\n                } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {\n                    lastChild = this.comment(text);\n                } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {\n                    lastChild = this.raw(text);\n                } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {\n                    lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);\n                } else {\n                    lastChild = this.node(name, attributes, text);\n                }\n            }\n            if (lastChild == null) {\n                throw new Error(\"Could not create any elements with: \" + name + \". \" + this.debugInfo());\n            }\n            return lastChild;\n        };\n        XMLNode.prototype.insertBefore = function(name, attributes, text) {\n            var child, i, newChild, refChild, removed;\n            if (name != null ? name.type : void 0) {\n                newChild = name;\n                refChild = attributes;\n                newChild.setParent(this);\n                if (refChild) {\n                    i = children.indexOf(refChild);\n                    removed = children.splice(i);\n                    children.push(newChild);\n                    Array.prototype.push.apply(children, removed);\n                } else {\n                    children.push(newChild);\n                }\n                return newChild;\n            } else {\n                if (this.isRoot) {\n                    throw new Error(\"Cannot insert elements at root level. \" + this.debugInfo(name));\n                }\n                i = this.parent.children.indexOf(this);\n                removed = this.parent.children.splice(i);\n                child = this.parent.element(name, attributes, text);\n                Array.prototype.push.apply(this.parent.children, removed);\n                return child;\n            }\n        };\n        XMLNode.prototype.insertAfter = function(name, attributes, text) {\n            var child, i, removed;\n            if (this.isRoot) {\n                throw new Error(\"Cannot insert elements at root level. \" + this.debugInfo(name));\n            }\n            i = this.parent.children.indexOf(this);\n            removed = this.parent.children.splice(i + 1);\n            child = this.parent.element(name, attributes, text);\n            Array.prototype.push.apply(this.parent.children, removed);\n            return child;\n        };\n        XMLNode.prototype.remove = function() {\n            var i, ref2;\n            if (this.isRoot) {\n                throw new Error(\"Cannot remove the root element. \" + this.debugInfo());\n            }\n            i = this.parent.children.indexOf(this);\n            [].splice.apply(this.parent.children, [\n                i,\n                i - i + 1\n            ].concat(ref2 = [])), ref2;\n            return this.parent;\n        };\n        XMLNode.prototype.node = function(name, attributes, text) {\n            var child, ref2;\n            if (name != null) {\n                name = getValue(name);\n            }\n            attributes || (attributes = {});\n            attributes = getValue(attributes);\n            if (!isObject(attributes)) {\n                ref2 = [\n                    attributes,\n                    text\n                ], text = ref2[0], attributes = ref2[1];\n            }\n            child = new XMLElement(this, name, attributes);\n            if (text != null) {\n                child.text(text);\n            }\n            this.children.push(child);\n            return child;\n        };\n        XMLNode.prototype.text = function(value) {\n            var child;\n            if (isObject(value)) {\n                this.element(value);\n            }\n            child = new XMLText(this, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLNode.prototype.cdata = function(value) {\n            var child;\n            child = new XMLCData(this, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLNode.prototype.comment = function(value) {\n            var child;\n            child = new XMLComment(this, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLNode.prototype.commentBefore = function(value) {\n            var child, i, removed;\n            i = this.parent.children.indexOf(this);\n            removed = this.parent.children.splice(i);\n            child = this.parent.comment(value);\n            Array.prototype.push.apply(this.parent.children, removed);\n            return this;\n        };\n        XMLNode.prototype.commentAfter = function(value) {\n            var child, i, removed;\n            i = this.parent.children.indexOf(this);\n            removed = this.parent.children.splice(i + 1);\n            child = this.parent.comment(value);\n            Array.prototype.push.apply(this.parent.children, removed);\n            return this;\n        };\n        XMLNode.prototype.raw = function(value) {\n            var child;\n            child = new XMLRaw(this, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLNode.prototype.dummy = function() {\n            var child;\n            child = new XMLDummy(this);\n            return child;\n        };\n        XMLNode.prototype.instruction = function(target, value) {\n            var insTarget, insValue, instruction, j, len;\n            if (target != null) {\n                target = getValue(target);\n            }\n            if (value != null) {\n                value = getValue(value);\n            }\n            if (Array.isArray(target)) {\n                for(j = 0, len = target.length; j < len; j++){\n                    insTarget = target[j];\n                    this.instruction(insTarget);\n                }\n            } else if (isObject(target)) {\n                for(insTarget in target){\n                    if (!hasProp.call(target, insTarget)) continue;\n                    insValue = target[insTarget];\n                    this.instruction(insTarget, insValue);\n                }\n            } else {\n                if (isFunction(value)) {\n                    value = value.apply();\n                }\n                instruction = new XMLProcessingInstruction(this, target, value);\n                this.children.push(instruction);\n            }\n            return this;\n        };\n        XMLNode.prototype.instructionBefore = function(target, value) {\n            var child, i, removed;\n            i = this.parent.children.indexOf(this);\n            removed = this.parent.children.splice(i);\n            child = this.parent.instruction(target, value);\n            Array.prototype.push.apply(this.parent.children, removed);\n            return this;\n        };\n        XMLNode.prototype.instructionAfter = function(target, value) {\n            var child, i, removed;\n            i = this.parent.children.indexOf(this);\n            removed = this.parent.children.splice(i + 1);\n            child = this.parent.instruction(target, value);\n            Array.prototype.push.apply(this.parent.children, removed);\n            return this;\n        };\n        XMLNode.prototype.declaration = function(version, encoding, standalone) {\n            var doc, xmldec;\n            doc = this.document();\n            xmldec = new XMLDeclaration(doc, version, encoding, standalone);\n            if (doc.children.length === 0) {\n                doc.children.unshift(xmldec);\n            } else if (doc.children[0].type === NodeType.Declaration) {\n                doc.children[0] = xmldec;\n            } else {\n                doc.children.unshift(xmldec);\n            }\n            return doc.root() || doc;\n        };\n        XMLNode.prototype.dtd = function(pubID, sysID) {\n            var child, doc, doctype, i, j, k, len, len1, ref2, ref3;\n            doc = this.document();\n            doctype = new XMLDocType(doc, pubID, sysID);\n            ref2 = doc.children;\n            for(i = j = 0, len = ref2.length; j < len; i = ++j){\n                child = ref2[i];\n                if (child.type === NodeType.DocType) {\n                    doc.children[i] = doctype;\n                    return doctype;\n                }\n            }\n            ref3 = doc.children;\n            for(i = k = 0, len1 = ref3.length; k < len1; i = ++k){\n                child = ref3[i];\n                if (child.isRoot) {\n                    doc.children.splice(i, 0, doctype);\n                    return doctype;\n                }\n            }\n            doc.children.push(doctype);\n            return doctype;\n        };\n        XMLNode.prototype.up = function() {\n            if (this.isRoot) {\n                throw new Error(\"The root node has no parent. Use doc() if you need to get the document object.\");\n            }\n            return this.parent;\n        };\n        XMLNode.prototype.root = function() {\n            var node;\n            node = this;\n            while(node){\n                if (node.type === NodeType.Document) {\n                    return node.rootObject;\n                } else if (node.isRoot) {\n                    return node;\n                } else {\n                    node = node.parent;\n                }\n            }\n        };\n        XMLNode.prototype.document = function() {\n            var node;\n            node = this;\n            while(node){\n                if (node.type === NodeType.Document) {\n                    return node;\n                } else {\n                    node = node.parent;\n                }\n            }\n        };\n        XMLNode.prototype.end = function(options) {\n            return this.document().end(options);\n        };\n        XMLNode.prototype.prev = function() {\n            var i;\n            i = this.parent.children.indexOf(this);\n            if (i < 1) {\n                throw new Error(\"Already at the first node. \" + this.debugInfo());\n            }\n            return this.parent.children[i - 1];\n        };\n        XMLNode.prototype.next = function() {\n            var i;\n            i = this.parent.children.indexOf(this);\n            if (i === -1 || i === this.parent.children.length - 1) {\n                throw new Error(\"Already at the last node. \" + this.debugInfo());\n            }\n            return this.parent.children[i + 1];\n        };\n        XMLNode.prototype.importDocument = function(doc) {\n            var clonedRoot;\n            clonedRoot = doc.root().clone();\n            clonedRoot.parent = this;\n            clonedRoot.isRoot = false;\n            this.children.push(clonedRoot);\n            return this;\n        };\n        XMLNode.prototype.debugInfo = function(name) {\n            var ref2, ref3;\n            name = name || this.name;\n            if (name == null && !((ref2 = this.parent) != null ? ref2.name : void 0)) {\n                return \"\";\n            } else if (name == null) {\n                return \"parent: <\" + this.parent.name + \">\";\n            } else if (!((ref3 = this.parent) != null ? ref3.name : void 0)) {\n                return \"node: <\" + name + \">\";\n            } else {\n                return \"node: <\" + name + \">, parent: <\" + this.parent.name + \">\";\n            }\n        };\n        XMLNode.prototype.ele = function(name, attributes, text) {\n            return this.element(name, attributes, text);\n        };\n        XMLNode.prototype.nod = function(name, attributes, text) {\n            return this.node(name, attributes, text);\n        };\n        XMLNode.prototype.txt = function(value) {\n            return this.text(value);\n        };\n        XMLNode.prototype.dat = function(value) {\n            return this.cdata(value);\n        };\n        XMLNode.prototype.com = function(value) {\n            return this.comment(value);\n        };\n        XMLNode.prototype.ins = function(target, value) {\n            return this.instruction(target, value);\n        };\n        XMLNode.prototype.doc = function() {\n            return this.document();\n        };\n        XMLNode.prototype.dec = function(version, encoding, standalone) {\n            return this.declaration(version, encoding, standalone);\n        };\n        XMLNode.prototype.e = function(name, attributes, text) {\n            return this.element(name, attributes, text);\n        };\n        XMLNode.prototype.n = function(name, attributes, text) {\n            return this.node(name, attributes, text);\n        };\n        XMLNode.prototype.t = function(value) {\n            return this.text(value);\n        };\n        XMLNode.prototype.d = function(value) {\n            return this.cdata(value);\n        };\n        XMLNode.prototype.c = function(value) {\n            return this.comment(value);\n        };\n        XMLNode.prototype.r = function(value) {\n            return this.raw(value);\n        };\n        XMLNode.prototype.i = function(target, value) {\n            return this.instruction(target, value);\n        };\n        XMLNode.prototype.u = function() {\n            return this.up();\n        };\n        XMLNode.prototype.importXMLBuilder = function(doc) {\n            return this.importDocument(doc);\n        };\n        XMLNode.prototype.replaceChild = function(newChild, oldChild) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.removeChild = function(oldChild) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.appendChild = function(newChild) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.hasChildNodes = function() {\n            return this.children.length !== 0;\n        };\n        XMLNode.prototype.cloneNode = function(deep) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.normalize = function() {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.isSupported = function(feature, version) {\n            return true;\n        };\n        XMLNode.prototype.hasAttributes = function() {\n            return this.attribs.length !== 0;\n        };\n        XMLNode.prototype.compareDocumentPosition = function(other) {\n            var ref, res;\n            ref = this;\n            if (ref === other) {\n                return 0;\n            } else if (this.document() !== other.document()) {\n                res = DocumentPosition.Disconnected | DocumentPosition.ImplementationSpecific;\n                if (Math.random() < 0.5) {\n                    res |= DocumentPosition.Preceding;\n                } else {\n                    res |= DocumentPosition.Following;\n                }\n                return res;\n            } else if (ref.isAncestor(other)) {\n                return DocumentPosition.Contains | DocumentPosition.Preceding;\n            } else if (ref.isDescendant(other)) {\n                return DocumentPosition.Contains | DocumentPosition.Following;\n            } else if (ref.isPreceding(other)) {\n                return DocumentPosition.Preceding;\n            } else {\n                return DocumentPosition.Following;\n            }\n        };\n        XMLNode.prototype.isSameNode = function(other) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.lookupPrefix = function(namespaceURI) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.isDefaultNamespace = function(namespaceURI) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.lookupNamespaceURI = function(prefix) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.isEqualNode = function(node) {\n            var i, j, ref2;\n            if (node.nodeType !== this.nodeType) {\n                return false;\n            }\n            if (node.children.length !== this.children.length) {\n                return false;\n            }\n            for(i = j = 0, ref2 = this.children.length - 1; 0 <= ref2 ? j <= ref2 : j >= ref2; i = 0 <= ref2 ? ++j : --j){\n                if (!this.children[i].isEqualNode(node.children[i])) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        XMLNode.prototype.getFeature = function(feature, version) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.setUserData = function(key, data, handler) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.getUserData = function(key) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.contains = function(other) {\n            if (!other) {\n                return false;\n            }\n            return other === this || this.isDescendant(other);\n        };\n        XMLNode.prototype.isDescendant = function(node) {\n            var child, isDescendantChild, j, len, ref2;\n            ref2 = this.children;\n            for(j = 0, len = ref2.length; j < len; j++){\n                child = ref2[j];\n                if (node === child) {\n                    return true;\n                }\n                isDescendantChild = child.isDescendant(node);\n                if (isDescendantChild) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        XMLNode.prototype.isAncestor = function(node) {\n            return node.isDescendant(this);\n        };\n        XMLNode.prototype.isPreceding = function(node) {\n            var nodePos, thisPos;\n            nodePos = this.treePosition(node);\n            thisPos = this.treePosition(this);\n            if (nodePos === -1 || thisPos === -1) {\n                return false;\n            } else {\n                return nodePos < thisPos;\n            }\n        };\n        XMLNode.prototype.isFollowing = function(node) {\n            var nodePos, thisPos;\n            nodePos = this.treePosition(node);\n            thisPos = this.treePosition(this);\n            if (nodePos === -1 || thisPos === -1) {\n                return false;\n            } else {\n                return nodePos > thisPos;\n            }\n        };\n        XMLNode.prototype.treePosition = function(node) {\n            var found, pos;\n            pos = 0;\n            found = false;\n            this.foreachTreeNode(this.document(), function(childNode) {\n                pos++;\n                if (!found && childNode === node) {\n                    return found = true;\n                }\n            });\n            if (found) {\n                return pos;\n            } else {\n                return -1;\n            }\n        };\n        XMLNode.prototype.foreachTreeNode = function(node, func) {\n            var child, j, len, ref2, res;\n            node || (node = this.document());\n            ref2 = node.children;\n            for(j = 0, len = ref2.length; j < len; j++){\n                child = ref2[j];\n                if (res = func(child)) {\n                    return res;\n                } else {\n                    res = this.foreachTreeNode(child, func);\n                    if (res) {\n                        return res;\n                    }\n                }\n            }\n        };\n        return XMLNode;\n    }();\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLNode.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLNodeList.js":
/*!****************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLNodeList.js ***!
  \****************************************************/
/***/ ((module) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var XMLNodeList;\n    module.exports = XMLNodeList = function() {\n        function XMLNodeList(nodes) {\n            this.nodes = nodes;\n        }\n        Object.defineProperty(XMLNodeList.prototype, \"length\", {\n            get: function() {\n                return this.nodes.length || 0;\n            }\n        });\n        XMLNodeList.prototype.clone = function() {\n            return this.nodes = null;\n        };\n        XMLNodeList.prototype.item = function(index) {\n            return this.nodes[index] || null;\n        };\n        return XMLNodeList;\n    }();\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxOb2RlTGlzdC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsbUNBQW1DO0FBQ2xDO0lBQ0MsSUFBSUE7SUFFSkMsT0FBT0MsT0FBTyxHQUFHRixjQUFjO1FBQzdCLFNBQVNBLFlBQVlHLEtBQUs7WUFDeEIsSUFBSSxDQUFDQSxLQUFLLEdBQUdBO1FBQ2Y7UUFFQUMsT0FBT0MsY0FBYyxDQUFDTCxZQUFZTSxTQUFTLEVBQUUsVUFBVTtZQUNyREMsS0FBSztnQkFDSCxPQUFPLElBQUksQ0FBQ0osS0FBSyxDQUFDSyxNQUFNLElBQUk7WUFDOUI7UUFDRjtRQUVBUixZQUFZTSxTQUFTLENBQUNHLEtBQUssR0FBRztZQUM1QixPQUFPLElBQUksQ0FBQ04sS0FBSyxHQUFHO1FBQ3RCO1FBRUFILFlBQVlNLFNBQVMsQ0FBQ0ksSUFBSSxHQUFHLFNBQVNDLEtBQUs7WUFDekMsT0FBTyxJQUFJLENBQUNSLEtBQUssQ0FBQ1EsTUFBTSxJQUFJO1FBQzlCO1FBRUEsT0FBT1g7SUFFVDtBQUVGLEdBQUdZLElBQUksQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpYmUtY29kZS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxOb2RlTGlzdC5qcz9mMTYzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxOb2RlTGlzdDtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTE5vZGVMaXN0ID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFhNTE5vZGVMaXN0KG5vZGVzKSB7XG4gICAgICB0aGlzLm5vZGVzID0gbm9kZXM7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTE5vZGVMaXN0LnByb3RvdHlwZSwgJ2xlbmd0aCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVzLmxlbmd0aCB8fCAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgWE1MTm9kZUxpc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlcyA9IG51bGw7XG4gICAgfTtcblxuICAgIFhNTE5vZGVMaXN0LnByb3RvdHlwZS5pdGVtID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vZGVzW2luZGV4XSB8fCBudWxsO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MTm9kZUxpc3Q7XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJYTUxOb2RlTGlzdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJub2RlcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwicHJvdG90eXBlIiwiZ2V0IiwibGVuZ3RoIiwiY2xvbmUiLCJpdGVtIiwiaW5kZXgiLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLNodeList.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLProcessingInstruction.js":
/*!*****************************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLProcessingInstruction.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLCharacterData, XMLProcessingInstruction, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLCharacterData = __webpack_require__(/*! ./XMLCharacterData */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLCharacterData.js\");\n    module.exports = XMLProcessingInstruction = function(superClass) {\n        extend(XMLProcessingInstruction, superClass);\n        function XMLProcessingInstruction(parent, target, value) {\n            XMLProcessingInstruction.__super__.constructor.call(this, parent);\n            if (target == null) {\n                throw new Error(\"Missing instruction target. \" + this.debugInfo());\n            }\n            this.type = NodeType.ProcessingInstruction;\n            this.target = this.stringify.insTarget(target);\n            this.name = this.target;\n            if (value) {\n                this.value = this.stringify.insValue(value);\n            }\n        }\n        XMLProcessingInstruction.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLProcessingInstruction.prototype.toString = function(options) {\n            return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));\n        };\n        XMLProcessingInstruction.prototype.isEqualNode = function(node) {\n            if (!XMLProcessingInstruction.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n                return false;\n            }\n            if (node.target !== this.target) {\n                return false;\n            }\n            return true;\n        };\n        return XMLProcessingInstruction;\n    }(XMLCharacterData);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24uanMiLCJtYXBwaW5ncyI6IjtBQUFBLG1DQUFtQztBQUNsQztJQUNDLElBQUlBLFVBQVVDLGtCQUFrQkMsMEJBQzlCQyxTQUFTLFNBQVNDLEtBQUssRUFBRUMsTUFBTTtRQUFJLElBQUssSUFBSUMsT0FBT0QsT0FBUTtZQUFFLElBQUlFLFFBQVFDLElBQUksQ0FBQ0gsUUFBUUMsTUFBTUYsS0FBSyxDQUFDRSxJQUFJLEdBQUdELE1BQU0sQ0FBQ0MsSUFBSTtRQUFFO1FBQUUsU0FBU0c7WUFBUyxJQUFJLENBQUNDLFdBQVcsR0FBR047UUFBTztRQUFFSyxLQUFLRSxTQUFTLEdBQUdOLE9BQU9NLFNBQVM7UUFBRVAsTUFBTU8sU0FBUyxHQUFHLElBQUlGO1FBQVFMLE1BQU1RLFNBQVMsR0FBR1AsT0FBT00sU0FBUztRQUFFLE9BQU9QO0lBQU8sR0FDelJHLFVBQVUsQ0FBQyxFQUFFTSxjQUFjO0lBRTdCYixXQUFXYyxtQkFBT0EsQ0FBQztJQUVuQmIsbUJBQW1CYSxtQkFBT0EsQ0FBQztJQUUzQkMsT0FBT0MsT0FBTyxHQUFHZCwyQkFBMkIsU0FBVWUsVUFBVTtRQUM5RGQsT0FBT0QsMEJBQTBCZTtRQUVqQyxTQUFTZix5QkFBeUJHLE1BQU0sRUFBRWEsTUFBTSxFQUFFQyxLQUFLO1lBQ3JEakIseUJBQXlCVSxTQUFTLENBQUNGLFdBQVcsQ0FBQ0YsSUFBSSxDQUFDLElBQUksRUFBRUg7WUFDMUQsSUFBSWEsVUFBVSxNQUFNO2dCQUNsQixNQUFNLElBQUlFLE1BQU0saUNBQWlDLElBQUksQ0FBQ0MsU0FBUztZQUNqRTtZQUNBLElBQUksQ0FBQ0MsSUFBSSxHQUFHdEIsU0FBU3VCLHFCQUFxQjtZQUMxQyxJQUFJLENBQUNMLE1BQU0sR0FBRyxJQUFJLENBQUNNLFNBQVMsQ0FBQ0MsU0FBUyxDQUFDUDtZQUN2QyxJQUFJLENBQUNRLElBQUksR0FBRyxJQUFJLENBQUNSLE1BQU07WUFDdkIsSUFBSUMsT0FBTztnQkFDVCxJQUFJLENBQUNBLEtBQUssR0FBRyxJQUFJLENBQUNLLFNBQVMsQ0FBQ0csUUFBUSxDQUFDUjtZQUN2QztRQUNGO1FBRUFqQix5QkFBeUJTLFNBQVMsQ0FBQ2lCLEtBQUssR0FBRztZQUN6QyxPQUFPQyxPQUFPQyxNQUFNLENBQUMsSUFBSTtRQUMzQjtRQUVBNUIseUJBQXlCUyxTQUFTLENBQUNvQixRQUFRLEdBQUcsU0FBU0MsT0FBTztZQUM1RCxPQUFPLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxNQUFNLENBQUNDLHFCQUFxQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUNGLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDRSxhQUFhLENBQUNIO1FBQzNGO1FBRUE5Qix5QkFBeUJTLFNBQVMsQ0FBQ3lCLFdBQVcsR0FBRyxTQUFTQyxJQUFJO1lBQzVELElBQUksQ0FBQ25DLHlCQUF5QlUsU0FBUyxDQUFDd0IsV0FBVyxDQUFDRSxLQUFLLENBQUMsSUFBSSxFQUFFQyxXQUFXSCxXQUFXLENBQUNDLE9BQU87Z0JBQzVGLE9BQU87WUFDVDtZQUNBLElBQUlBLEtBQUtuQixNQUFNLEtBQUssSUFBSSxDQUFDQSxNQUFNLEVBQUU7Z0JBQy9CLE9BQU87WUFDVDtZQUNBLE9BQU87UUFDVDtRQUVBLE9BQU9oQjtJQUVULEVBQUdEO0FBRUwsR0FBR08sSUFBSSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmliZS1jb2RlLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbi5qcz9jOGYxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MQ2hhcmFjdGVyRGF0YSwgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MQ2hhcmFjdGVyRGF0YSA9IHJlcXVpcmUoJy4vWE1MQ2hhcmFjdGVyRGF0YScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbihwYXJlbnQsIHRhcmdldCwgdmFsdWUpIHtcbiAgICAgIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKHRhcmdldCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgaW5zdHJ1Y3Rpb24gdGFyZ2V0LiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuUHJvY2Vzc2luZ0luc3RydWN0aW9uO1xuICAgICAgdGhpcy50YXJnZXQgPSB0aGlzLnN0cmluZ2lmeS5pbnNUYXJnZXQodGFyZ2V0KTtcbiAgICAgIHRoaXMubmFtZSA9IHRoaXMudGFyZ2V0O1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5pbnNWYWx1ZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfTtcblxuICAgIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5wcm9jZXNzaW5nSW5zdHJ1Y3Rpb24odGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLnByb3RvdHlwZS5pc0VxdWFsTm9kZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmICghWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLl9fc3VwZXJfXy5pc0VxdWFsTm9kZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLmlzRXF1YWxOb2RlKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLnRhcmdldCAhPT0gdGhpcy50YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb247XG5cbiAgfSkoWE1MQ2hhcmFjdGVyRGF0YSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiTm9kZVR5cGUiLCJYTUxDaGFyYWN0ZXJEYXRhIiwiWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwiZXh0ZW5kIiwiY2hpbGQiLCJwYXJlbnQiLCJrZXkiLCJoYXNQcm9wIiwiY2FsbCIsImN0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9fc3VwZXJfXyIsImhhc093blByb3BlcnR5IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzdXBlckNsYXNzIiwidGFyZ2V0IiwidmFsdWUiLCJFcnJvciIsImRlYnVnSW5mbyIsInR5cGUiLCJQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCJzdHJpbmdpZnkiLCJpbnNUYXJnZXQiLCJuYW1lIiwiaW5zVmFsdWUiLCJjbG9uZSIsIk9iamVjdCIsImNyZWF0ZSIsInRvU3RyaW5nIiwib3B0aW9ucyIsIndyaXRlciIsInByb2Nlc3NpbmdJbnN0cnVjdGlvbiIsImZpbHRlck9wdGlvbnMiLCJpc0VxdWFsTm9kZSIsIm5vZGUiLCJhcHBseSIsImFyZ3VtZW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLProcessingInstruction.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLRaw.js":
/*!***********************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLRaw.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLNode, XMLRaw, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    module.exports = XMLRaw = function(superClass) {\n        extend(XMLRaw, superClass);\n        function XMLRaw(parent, text) {\n            XMLRaw.__super__.constructor.call(this, parent);\n            if (text == null) {\n                throw new Error(\"Missing raw text. \" + this.debugInfo());\n            }\n            this.type = NodeType.Raw;\n            this.value = this.stringify.raw(text);\n        }\n        XMLRaw.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLRaw.prototype.toString = function(options) {\n            return this.options.writer.raw(this, this.options.writer.filterOptions(options));\n        };\n        return XMLRaw;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxSYXcuanMiLCJtYXBwaW5ncyI6IjtBQUFBLG1DQUFtQztBQUNsQztJQUNDLElBQUlBLFVBQVVDLFNBQVNDLFFBQ3JCQyxTQUFTLFNBQVNDLEtBQUssRUFBRUMsTUFBTTtRQUFJLElBQUssSUFBSUMsT0FBT0QsT0FBUTtZQUFFLElBQUlFLFFBQVFDLElBQUksQ0FBQ0gsUUFBUUMsTUFBTUYsS0FBSyxDQUFDRSxJQUFJLEdBQUdELE1BQU0sQ0FBQ0MsSUFBSTtRQUFFO1FBQUUsU0FBU0c7WUFBUyxJQUFJLENBQUNDLFdBQVcsR0FBR047UUFBTztRQUFFSyxLQUFLRSxTQUFTLEdBQUdOLE9BQU9NLFNBQVM7UUFBRVAsTUFBTU8sU0FBUyxHQUFHLElBQUlGO1FBQVFMLE1BQU1RLFNBQVMsR0FBR1AsT0FBT00sU0FBUztRQUFFLE9BQU9QO0lBQU8sR0FDelJHLFVBQVUsQ0FBQyxFQUFFTSxjQUFjO0lBRTdCYixXQUFXYyxtQkFBT0EsQ0FBQztJQUVuQmIsVUFBVWEsbUJBQU9BLENBQUM7SUFFbEJDLE9BQU9DLE9BQU8sR0FBR2QsU0FBUyxTQUFVZSxVQUFVO1FBQzVDZCxPQUFPRCxRQUFRZTtRQUVmLFNBQVNmLE9BQU9HLE1BQU0sRUFBRWEsSUFBSTtZQUMxQmhCLE9BQU9VLFNBQVMsQ0FBQ0YsV0FBVyxDQUFDRixJQUFJLENBQUMsSUFBSSxFQUFFSDtZQUN4QyxJQUFJYSxRQUFRLE1BQU07Z0JBQ2hCLE1BQU0sSUFBSUMsTUFBTSx1QkFBdUIsSUFBSSxDQUFDQyxTQUFTO1lBQ3ZEO1lBQ0EsSUFBSSxDQUFDQyxJQUFJLEdBQUdyQixTQUFTc0IsR0FBRztZQUN4QixJQUFJLENBQUNDLEtBQUssR0FBRyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDUDtRQUNsQztRQUVBaEIsT0FBT1MsU0FBUyxDQUFDZSxLQUFLLEdBQUc7WUFDdkIsT0FBT0MsT0FBT0MsTUFBTSxDQUFDLElBQUk7UUFDM0I7UUFFQTFCLE9BQU9TLFNBQVMsQ0FBQ2tCLFFBQVEsR0FBRyxTQUFTQyxPQUFPO1lBQzFDLE9BQU8sSUFBSSxDQUFDQSxPQUFPLENBQUNDLE1BQU0sQ0FBQ04sR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUNLLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxhQUFhLENBQUNGO1FBQ3pFO1FBRUEsT0FBTzVCO0lBRVQsRUFBR0Q7QUFFTCxHQUFHTyxJQUFJLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLWNvZGUvLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MUmF3LmpzP2QzMjUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxOb2RlLCBYTUxSYXcsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxSYXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxSYXcsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MUmF3KHBhcmVudCwgdGV4dCkge1xuICAgICAgWE1MUmF3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAodGV4dCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgcmF3IHRleHQuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5SYXc7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5zdHJpbmdpZnkucmF3KHRleHQpO1xuICAgIH1cblxuICAgIFhNTFJhdy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH07XG5cbiAgICBYTUxSYXcucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIucmF3KHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxSYXc7XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiTm9kZVR5cGUiLCJYTUxOb2RlIiwiWE1MUmF3IiwiZXh0ZW5kIiwiY2hpbGQiLCJwYXJlbnQiLCJrZXkiLCJoYXNQcm9wIiwiY2FsbCIsImN0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9fc3VwZXJfXyIsImhhc093blByb3BlcnR5IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzdXBlckNsYXNzIiwidGV4dCIsIkVycm9yIiwiZGVidWdJbmZvIiwidHlwZSIsIlJhdyIsInZhbHVlIiwic3RyaW5naWZ5IiwicmF3IiwiY2xvbmUiLCJPYmplY3QiLCJjcmVhdGUiLCJ0b1N0cmluZyIsIm9wdGlvbnMiLCJ3cml0ZXIiLCJmaWx0ZXJPcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLRaw.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLStreamWriter.js":
/*!********************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLStreamWriter.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, WriterState, XMLStreamWriter, XMLWriterBase, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLWriterBase = __webpack_require__(/*! ./XMLWriterBase */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLWriterBase.js\");\n    WriterState = __webpack_require__(/*! ./WriterState */ \"(action-browser)/./node_modules/xmlbuilder/lib/WriterState.js\");\n    module.exports = XMLStreamWriter = function(superClass) {\n        extend(XMLStreamWriter, superClass);\n        function XMLStreamWriter(stream, options) {\n            this.stream = stream;\n            XMLStreamWriter.__super__.constructor.call(this, options);\n        }\n        XMLStreamWriter.prototype.endline = function(node, options, level) {\n            if (node.isLastRootNode && options.state === WriterState.CloseTag) {\n                return \"\";\n            } else {\n                return XMLStreamWriter.__super__.endline.call(this, node, options, level);\n            }\n        };\n        XMLStreamWriter.prototype.document = function(doc, options) {\n            var child, i, j, k, len, len1, ref, ref1, results;\n            ref = doc.children;\n            for(i = j = 0, len = ref.length; j < len; i = ++j){\n                child = ref[i];\n                child.isLastRootNode = i === doc.children.length - 1;\n            }\n            options = this.filterOptions(options);\n            ref1 = doc.children;\n            results = [];\n            for(k = 0, len1 = ref1.length; k < len1; k++){\n                child = ref1[k];\n                results.push(this.writeChildNode(child, options, 0));\n            }\n            return results;\n        };\n        XMLStreamWriter.prototype.attribute = function(att, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.attribute.call(this, att, options, level));\n        };\n        XMLStreamWriter.prototype.cdata = function(node, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.cdata.call(this, node, options, level));\n        };\n        XMLStreamWriter.prototype.comment = function(node, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.comment.call(this, node, options, level));\n        };\n        XMLStreamWriter.prototype.declaration = function(node, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.declaration.call(this, node, options, level));\n        };\n        XMLStreamWriter.prototype.docType = function(node, options, level) {\n            var child, j, len, ref;\n            level || (level = 0);\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            this.stream.write(this.indent(node, options, level));\n            this.stream.write(\"<!DOCTYPE \" + node.root().name);\n            if (node.pubID && node.sysID) {\n                this.stream.write(' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"');\n            } else if (node.sysID) {\n                this.stream.write(' SYSTEM \"' + node.sysID + '\"');\n            }\n            if (node.children.length > 0) {\n                this.stream.write(\" [\");\n                this.stream.write(this.endline(node, options, level));\n                options.state = WriterState.InsideTag;\n                ref = node.children;\n                for(j = 0, len = ref.length; j < len; j++){\n                    child = ref[j];\n                    this.writeChildNode(child, options, level + 1);\n                }\n                options.state = WriterState.CloseTag;\n                this.stream.write(\"]\");\n            }\n            options.state = WriterState.CloseTag;\n            this.stream.write(options.spaceBeforeSlash + \">\");\n            this.stream.write(this.endline(node, options, level));\n            options.state = WriterState.None;\n            return this.closeNode(node, options, level);\n        };\n        XMLStreamWriter.prototype.element = function(node, options, level) {\n            var att, child, childNodeCount, firstChildNode, j, len, name, prettySuppressed, ref, ref1;\n            level || (level = 0);\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            this.stream.write(this.indent(node, options, level) + \"<\" + node.name);\n            ref = node.attribs;\n            for(name in ref){\n                if (!hasProp.call(ref, name)) continue;\n                att = ref[name];\n                this.attribute(att, options, level);\n            }\n            childNodeCount = node.children.length;\n            firstChildNode = childNodeCount === 0 ? null : node.children[0];\n            if (childNodeCount === 0 || node.children.every(function(e) {\n                return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === \"\";\n            })) {\n                if (options.allowEmpty) {\n                    this.stream.write(\">\");\n                    options.state = WriterState.CloseTag;\n                    this.stream.write(\"</\" + node.name + \">\");\n                } else {\n                    options.state = WriterState.CloseTag;\n                    this.stream.write(options.spaceBeforeSlash + \"/>\");\n                }\n            } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {\n                this.stream.write(\">\");\n                options.state = WriterState.InsideTag;\n                options.suppressPrettyCount++;\n                prettySuppressed = true;\n                this.writeChildNode(firstChildNode, options, level + 1);\n                options.suppressPrettyCount--;\n                prettySuppressed = false;\n                options.state = WriterState.CloseTag;\n                this.stream.write(\"</\" + node.name + \">\");\n            } else {\n                this.stream.write(\">\" + this.endline(node, options, level));\n                options.state = WriterState.InsideTag;\n                ref1 = node.children;\n                for(j = 0, len = ref1.length; j < len; j++){\n                    child = ref1[j];\n                    this.writeChildNode(child, options, level + 1);\n                }\n                options.state = WriterState.CloseTag;\n                this.stream.write(this.indent(node, options, level) + \"</\" + node.name + \">\");\n            }\n            this.stream.write(this.endline(node, options, level));\n            options.state = WriterState.None;\n            return this.closeNode(node, options, level);\n        };\n        XMLStreamWriter.prototype.processingInstruction = function(node, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.processingInstruction.call(this, node, options, level));\n        };\n        XMLStreamWriter.prototype.raw = function(node, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.raw.call(this, node, options, level));\n        };\n        XMLStreamWriter.prototype.text = function(node, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.text.call(this, node, options, level));\n        };\n        XMLStreamWriter.prototype.dtdAttList = function(node, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.dtdAttList.call(this, node, options, level));\n        };\n        XMLStreamWriter.prototype.dtdElement = function(node, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.dtdElement.call(this, node, options, level));\n        };\n        XMLStreamWriter.prototype.dtdEntity = function(node, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.dtdEntity.call(this, node, options, level));\n        };\n        XMLStreamWriter.prototype.dtdNotation = function(node, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.dtdNotation.call(this, node, options, level));\n        };\n        return XMLStreamWriter;\n    }(XMLWriterBase);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLStreamWriter.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLStringWriter.js":
/*!********************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLStringWriter.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var XMLStringWriter, XMLWriterBase, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLWriterBase = __webpack_require__(/*! ./XMLWriterBase */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLWriterBase.js\");\n    module.exports = XMLStringWriter = function(superClass) {\n        extend(XMLStringWriter, superClass);\n        function XMLStringWriter(options) {\n            XMLStringWriter.__super__.constructor.call(this, options);\n        }\n        XMLStringWriter.prototype.document = function(doc, options) {\n            var child, i, len, r, ref;\n            options = this.filterOptions(options);\n            r = \"\";\n            ref = doc.children;\n            for(i = 0, len = ref.length; i < len; i++){\n                child = ref[i];\n                r += this.writeChildNode(child, options, 0);\n            }\n            if (options.pretty && r.slice(-options.newline.length) === options.newline) {\n                r = r.slice(0, -options.newline.length);\n            }\n            return r;\n        };\n        return XMLStringWriter;\n    }(XMLWriterBase);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxTdHJpbmdXcml0ZXIuanMiLCJtYXBwaW5ncyI6IjtBQUFBLG1DQUFtQztBQUNsQztJQUNDLElBQUlBLGlCQUFpQkMsZUFDbkJDLFNBQVMsU0FBU0MsS0FBSyxFQUFFQyxNQUFNO1FBQUksSUFBSyxJQUFJQyxPQUFPRCxPQUFRO1lBQUUsSUFBSUUsUUFBUUMsSUFBSSxDQUFDSCxRQUFRQyxNQUFNRixLQUFLLENBQUNFLElBQUksR0FBR0QsTUFBTSxDQUFDQyxJQUFJO1FBQUU7UUFBRSxTQUFTRztZQUFTLElBQUksQ0FBQ0MsV0FBVyxHQUFHTjtRQUFPO1FBQUVLLEtBQUtFLFNBQVMsR0FBR04sT0FBT00sU0FBUztRQUFFUCxNQUFNTyxTQUFTLEdBQUcsSUFBSUY7UUFBUUwsTUFBTVEsU0FBUyxHQUFHUCxPQUFPTSxTQUFTO1FBQUUsT0FBT1A7SUFBTyxHQUN6UkcsVUFBVSxDQUFDLEVBQUVNLGNBQWM7SUFFN0JYLGdCQUFnQlksbUJBQU9BLENBQUM7SUFFeEJDLE9BQU9DLE9BQU8sR0FBR2Ysa0JBQWtCLFNBQVVnQixVQUFVO1FBQ3JEZCxPQUFPRixpQkFBaUJnQjtRQUV4QixTQUFTaEIsZ0JBQWdCaUIsT0FBTztZQUM5QmpCLGdCQUFnQlcsU0FBUyxDQUFDRixXQUFXLENBQUNGLElBQUksQ0FBQyxJQUFJLEVBQUVVO1FBQ25EO1FBRUFqQixnQkFBZ0JVLFNBQVMsQ0FBQ1EsUUFBUSxHQUFHLFNBQVNDLEdBQUcsRUFBRUYsT0FBTztZQUN4RCxJQUFJZCxPQUFPaUIsR0FBR0MsS0FBS0MsR0FBR0M7WUFDdEJOLFVBQVUsSUFBSSxDQUFDTyxhQUFhLENBQUNQO1lBQzdCSyxJQUFJO1lBQ0pDLE1BQU1KLElBQUlNLFFBQVE7WUFDbEIsSUFBS0wsSUFBSSxHQUFHQyxNQUFNRSxJQUFJRyxNQUFNLEVBQUVOLElBQUlDLEtBQUtELElBQUs7Z0JBQzFDakIsUUFBUW9CLEdBQUcsQ0FBQ0gsRUFBRTtnQkFDZEUsS0FBSyxJQUFJLENBQUNLLGNBQWMsQ0FBQ3hCLE9BQU9jLFNBQVM7WUFDM0M7WUFDQSxJQUFJQSxRQUFRVyxNQUFNLElBQUlOLEVBQUVPLEtBQUssQ0FBQyxDQUFDWixRQUFRYSxPQUFPLENBQUNKLE1BQU0sTUFBTVQsUUFBUWEsT0FBTyxFQUFFO2dCQUMxRVIsSUFBSUEsRUFBRU8sS0FBSyxDQUFDLEdBQUcsQ0FBQ1osUUFBUWEsT0FBTyxDQUFDSixNQUFNO1lBQ3hDO1lBQ0EsT0FBT0o7UUFDVDtRQUVBLE9BQU90QjtJQUVULEVBQUdDO0FBRUwsR0FBR00sSUFBSSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmliZS1jb2RlLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFN0cmluZ1dyaXRlci5qcz82ZTJlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxTdHJpbmdXcml0ZXIsIFhNTFdyaXRlckJhc2UsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxXcml0ZXJCYXNlID0gcmVxdWlyZSgnLi9YTUxXcml0ZXJCYXNlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxTdHJpbmdXcml0ZXIgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxTdHJpbmdXcml0ZXIsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MU3RyaW5nV3JpdGVyKG9wdGlvbnMpIHtcbiAgICAgIFhNTFN0cmluZ1dyaXRlci5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBYTUxTdHJpbmdXcml0ZXIucHJvdG90eXBlLmRvY3VtZW50ID0gZnVuY3Rpb24oZG9jLCBvcHRpb25zKSB7XG4gICAgICB2YXIgY2hpbGQsIGksIGxlbiwgciwgcmVmO1xuICAgICAgb3B0aW9ucyA9IHRoaXMuZmlsdGVyT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIHIgPSAnJztcbiAgICAgIHJlZiA9IGRvYy5jaGlsZHJlbjtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjaGlsZCA9IHJlZltpXTtcbiAgICAgICAgciArPSB0aGlzLndyaXRlQ2hpbGROb2RlKGNoaWxkLCBvcHRpb25zLCAwKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLnByZXR0eSAmJiByLnNsaWNlKC1vcHRpb25zLm5ld2xpbmUubGVuZ3RoKSA9PT0gb3B0aW9ucy5uZXdsaW5lKSB7XG4gICAgICAgIHIgPSByLnNsaWNlKDAsIC1vcHRpb25zLm5ld2xpbmUubGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MU3RyaW5nV3JpdGVyO1xuXG4gIH0pKFhNTFdyaXRlckJhc2UpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIlhNTFN0cmluZ1dyaXRlciIsIlhNTFdyaXRlckJhc2UiLCJleHRlbmQiLCJjaGlsZCIsInBhcmVudCIsImtleSIsImhhc1Byb3AiLCJjYWxsIiwiY3RvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX19zdXBlcl9fIiwiaGFzT3duUHJvcGVydHkiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInN1cGVyQ2xhc3MiLCJvcHRpb25zIiwiZG9jdW1lbnQiLCJkb2MiLCJpIiwibGVuIiwiciIsInJlZiIsImZpbHRlck9wdGlvbnMiLCJjaGlsZHJlbiIsImxlbmd0aCIsIndyaXRlQ2hpbGROb2RlIiwicHJldHR5Iiwic2xpY2UiLCJuZXdsaW5lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLStringWriter.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLStringifier.js":
/*!*******************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLStringifier.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var XMLStringifier, bind = function(fn, me) {\n        return function() {\n            return fn.apply(me, arguments);\n        };\n    }, hasProp = {}.hasOwnProperty;\n    module.exports = XMLStringifier = function() {\n        function XMLStringifier(options) {\n            this.assertLegalName = bind(this.assertLegalName, this);\n            this.assertLegalChar = bind(this.assertLegalChar, this);\n            var key, ref, value;\n            options || (options = {});\n            this.options = options;\n            if (!this.options.version) {\n                this.options.version = \"1.0\";\n            }\n            ref = options.stringify || {};\n            for(key in ref){\n                if (!hasProp.call(ref, key)) continue;\n                value = ref[key];\n                this[key] = value;\n            }\n        }\n        XMLStringifier.prototype.name = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalName(\"\" + val || \"\");\n        };\n        XMLStringifier.prototype.text = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalChar(this.textEscape(\"\" + val || \"\"));\n        };\n        XMLStringifier.prototype.cdata = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            val = \"\" + val || \"\";\n            val = val.replace(\"]]>\", \"]]]]><![CDATA[>\");\n            return this.assertLegalChar(val);\n        };\n        XMLStringifier.prototype.comment = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            val = \"\" + val || \"\";\n            if (val.match(/--/)) {\n                throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n            }\n            return this.assertLegalChar(val);\n        };\n        XMLStringifier.prototype.raw = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return \"\" + val || \"\";\n        };\n        XMLStringifier.prototype.attValue = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalChar(this.attEscape(val = \"\" + val || \"\"));\n        };\n        XMLStringifier.prototype.insTarget = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalChar(\"\" + val || \"\");\n        };\n        XMLStringifier.prototype.insValue = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            val = \"\" + val || \"\";\n            if (val.match(/\\?>/)) {\n                throw new Error(\"Invalid processing instruction value: \" + val);\n            }\n            return this.assertLegalChar(val);\n        };\n        XMLStringifier.prototype.xmlVersion = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            val = \"\" + val || \"\";\n            if (!val.match(/1\\.[0-9]+/)) {\n                throw new Error(\"Invalid version number: \" + val);\n            }\n            return val;\n        };\n        XMLStringifier.prototype.xmlEncoding = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            val = \"\" + val || \"\";\n            if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {\n                throw new Error(\"Invalid encoding: \" + val);\n            }\n            return this.assertLegalChar(val);\n        };\n        XMLStringifier.prototype.xmlStandalone = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            if (val) {\n                return \"yes\";\n            } else {\n                return \"no\";\n            }\n        };\n        XMLStringifier.prototype.dtdPubID = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalChar(\"\" + val || \"\");\n        };\n        XMLStringifier.prototype.dtdSysID = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalChar(\"\" + val || \"\");\n        };\n        XMLStringifier.prototype.dtdElementValue = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalChar(\"\" + val || \"\");\n        };\n        XMLStringifier.prototype.dtdAttType = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalChar(\"\" + val || \"\");\n        };\n        XMLStringifier.prototype.dtdAttDefault = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalChar(\"\" + val || \"\");\n        };\n        XMLStringifier.prototype.dtdEntityValue = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalChar(\"\" + val || \"\");\n        };\n        XMLStringifier.prototype.dtdNData = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalChar(\"\" + val || \"\");\n        };\n        XMLStringifier.prototype.convertAttKey = \"@\";\n        XMLStringifier.prototype.convertPIKey = \"?\";\n        XMLStringifier.prototype.convertTextKey = \"#text\";\n        XMLStringifier.prototype.convertCDataKey = \"#cdata\";\n        XMLStringifier.prototype.convertCommentKey = \"#comment\";\n        XMLStringifier.prototype.convertRawKey = \"#raw\";\n        XMLStringifier.prototype.assertLegalChar = function(str) {\n            var regex, res;\n            if (this.options.noValidation) {\n                return str;\n            }\n            regex = \"\";\n            if (this.options.version === \"1.0\") {\n                regex = /[\\0-\\x08\\x0B\\f\\x0E-\\x1F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n                if (res = str.match(regex)) {\n                    throw new Error(\"Invalid character in string: \" + str + \" at index \" + res.index);\n                }\n            } else if (this.options.version === \"1.1\") {\n                regex = /[\\0\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n                if (res = str.match(regex)) {\n                    throw new Error(\"Invalid character in string: \" + str + \" at index \" + res.index);\n                }\n            }\n            return str;\n        };\n        XMLStringifier.prototype.assertLegalName = function(str) {\n            var regex;\n            if (this.options.noValidation) {\n                return str;\n            }\n            this.assertLegalChar(str);\n            regex = /^([:A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])([\\x2D\\.0-:A-Z_a-z\\xB7\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203F\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])*$/;\n            if (!str.match(regex)) {\n                throw new Error(\"Invalid character in name\");\n            }\n            return str;\n        };\n        XMLStringifier.prototype.textEscape = function(str) {\n            var ampregex;\n            if (this.options.noValidation) {\n                return str;\n            }\n            ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n            return str.replace(ampregex, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\\r/g, \"&#xD;\");\n        };\n        XMLStringifier.prototype.attEscape = function(str) {\n            var ampregex;\n            if (this.options.noValidation) {\n                return str;\n            }\n            ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n            return str.replace(ampregex, \"&amp;\").replace(/</g, \"&lt;\").replace(/\"/g, \"&quot;\").replace(/\\t/g, \"&#x9;\").replace(/\\n/g, \"&#xA;\").replace(/\\r/g, \"&#xD;\");\n        };\n        return XMLStringifier;\n    }();\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLStringifier.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLText.js":
/*!************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLText.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLCharacterData, XMLText, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLCharacterData = __webpack_require__(/*! ./XMLCharacterData */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLCharacterData.js\");\n    module.exports = XMLText = function(superClass) {\n        extend(XMLText, superClass);\n        function XMLText(parent, text) {\n            XMLText.__super__.constructor.call(this, parent);\n            if (text == null) {\n                throw new Error(\"Missing element text. \" + this.debugInfo());\n            }\n            this.name = \"#text\";\n            this.type = NodeType.Text;\n            this.value = this.stringify.text(text);\n        }\n        Object.defineProperty(XMLText.prototype, \"isElementContentWhitespace\", {\n            get: function() {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n        });\n        Object.defineProperty(XMLText.prototype, \"wholeText\", {\n            get: function() {\n                var next, prev, str;\n                str = \"\";\n                prev = this.previousSibling;\n                while(prev){\n                    str = prev.data + str;\n                    prev = prev.previousSibling;\n                }\n                str += this.data;\n                next = this.nextSibling;\n                while(next){\n                    str = str + next.data;\n                    next = next.nextSibling;\n                }\n                return str;\n            }\n        });\n        XMLText.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLText.prototype.toString = function(options) {\n            return this.options.writer.text(this, this.options.writer.filterOptions(options));\n        };\n        XMLText.prototype.splitText = function(offset) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLText.prototype.replaceWholeText = function(content) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        return XMLText;\n    }(XMLCharacterData);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxUZXh0LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxtQ0FBbUM7QUFDbEM7SUFDQyxJQUFJQSxVQUFVQyxrQkFBa0JDLFNBQzlCQyxTQUFTLFNBQVNDLEtBQUssRUFBRUMsTUFBTTtRQUFJLElBQUssSUFBSUMsT0FBT0QsT0FBUTtZQUFFLElBQUlFLFFBQVFDLElBQUksQ0FBQ0gsUUFBUUMsTUFBTUYsS0FBSyxDQUFDRSxJQUFJLEdBQUdELE1BQU0sQ0FBQ0MsSUFBSTtRQUFFO1FBQUUsU0FBU0c7WUFBUyxJQUFJLENBQUNDLFdBQVcsR0FBR047UUFBTztRQUFFSyxLQUFLRSxTQUFTLEdBQUdOLE9BQU9NLFNBQVM7UUFBRVAsTUFBTU8sU0FBUyxHQUFHLElBQUlGO1FBQVFMLE1BQU1RLFNBQVMsR0FBR1AsT0FBT00sU0FBUztRQUFFLE9BQU9QO0lBQU8sR0FDelJHLFVBQVUsQ0FBQyxFQUFFTSxjQUFjO0lBRTdCYixXQUFXYyxtQkFBT0EsQ0FBQztJQUVuQmIsbUJBQW1CYSxtQkFBT0EsQ0FBQztJQUUzQkMsT0FBT0MsT0FBTyxHQUFHZCxVQUFVLFNBQVVlLFVBQVU7UUFDN0NkLE9BQU9ELFNBQVNlO1FBRWhCLFNBQVNmLFFBQVFHLE1BQU0sRUFBRWEsSUFBSTtZQUMzQmhCLFFBQVFVLFNBQVMsQ0FBQ0YsV0FBVyxDQUFDRixJQUFJLENBQUMsSUFBSSxFQUFFSDtZQUN6QyxJQUFJYSxRQUFRLE1BQU07Z0JBQ2hCLE1BQU0sSUFBSUMsTUFBTSwyQkFBMkIsSUFBSSxDQUFDQyxTQUFTO1lBQzNEO1lBQ0EsSUFBSSxDQUFDQyxJQUFJLEdBQUc7WUFDWixJQUFJLENBQUNDLElBQUksR0FBR3RCLFNBQVN1QixJQUFJO1lBQ3pCLElBQUksQ0FBQ0MsS0FBSyxHQUFHLElBQUksQ0FBQ0MsU0FBUyxDQUFDUCxJQUFJLENBQUNBO1FBQ25DO1FBRUFRLE9BQU9DLGNBQWMsQ0FBQ3pCLFFBQVFTLFNBQVMsRUFBRSw4QkFBOEI7WUFDckVpQixLQUFLO2dCQUNILE1BQU0sSUFBSVQsTUFBTSx3Q0FBd0MsSUFBSSxDQUFDQyxTQUFTO1lBQ3hFO1FBQ0Y7UUFFQU0sT0FBT0MsY0FBYyxDQUFDekIsUUFBUVMsU0FBUyxFQUFFLGFBQWE7WUFDcERpQixLQUFLO2dCQUNILElBQUlDLE1BQU1DLE1BQU1DO2dCQUNoQkEsTUFBTTtnQkFDTkQsT0FBTyxJQUFJLENBQUNFLGVBQWU7Z0JBQzNCLE1BQU9GLEtBQU07b0JBQ1hDLE1BQU1ELEtBQUtHLElBQUksR0FBR0Y7b0JBQ2xCRCxPQUFPQSxLQUFLRSxlQUFlO2dCQUM3QjtnQkFDQUQsT0FBTyxJQUFJLENBQUNFLElBQUk7Z0JBQ2hCSixPQUFPLElBQUksQ0FBQ0ssV0FBVztnQkFDdkIsTUFBT0wsS0FBTTtvQkFDWEUsTUFBTUEsTUFBTUYsS0FBS0ksSUFBSTtvQkFDckJKLE9BQU9BLEtBQUtLLFdBQVc7Z0JBQ3pCO2dCQUNBLE9BQU9IO1lBQ1Q7UUFDRjtRQUVBN0IsUUFBUVMsU0FBUyxDQUFDd0IsS0FBSyxHQUFHO1lBQ3hCLE9BQU9ULE9BQU9VLE1BQU0sQ0FBQyxJQUFJO1FBQzNCO1FBRUFsQyxRQUFRUyxTQUFTLENBQUMwQixRQUFRLEdBQUcsU0FBU0MsT0FBTztZQUMzQyxPQUFPLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxNQUFNLENBQUNyQixJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQ29CLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxhQUFhLENBQUNGO1FBQzFFO1FBRUFwQyxRQUFRUyxTQUFTLENBQUM4QixTQUFTLEdBQUcsU0FBU0MsTUFBTTtZQUMzQyxNQUFNLElBQUl2QixNQUFNLHdDQUF3QyxJQUFJLENBQUNDLFNBQVM7UUFDeEU7UUFFQWxCLFFBQVFTLFNBQVMsQ0FBQ2dDLGdCQUFnQixHQUFHLFNBQVNDLE9BQU87WUFDbkQsTUFBTSxJQUFJekIsTUFBTSx3Q0FBd0MsSUFBSSxDQUFDQyxTQUFTO1FBQ3hFO1FBRUEsT0FBT2xCO0lBRVQsRUFBR0Q7QUFFTCxHQUFHTyxJQUFJLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLWNvZGUvLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MVGV4dC5qcz9hZDcxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MQ2hhcmFjdGVyRGF0YSwgWE1MVGV4dCxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIFhNTENoYXJhY3RlckRhdGEgPSByZXF1aXJlKCcuL1hNTENoYXJhY3RlckRhdGEnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTFRleHQgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxUZXh0LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTFRleHQocGFyZW50LCB0ZXh0KSB7XG4gICAgICBYTUxUZXh0Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAodGV4dCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgZWxlbWVudCB0ZXh0LiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgdGhpcy5uYW1lID0gXCIjdGV4dFwiO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuVGV4dDtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS50ZXh0KHRleHQpO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxUZXh0LnByb3RvdHlwZSwgJ2lzRWxlbWVudENvbnRlbnRXaGl0ZXNwYWNlJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTFRleHQucHJvdG90eXBlLCAnd2hvbGVUZXh0Jywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG5leHQsIHByZXYsIHN0cjtcbiAgICAgICAgc3RyID0gJyc7XG4gICAgICAgIHByZXYgPSB0aGlzLnByZXZpb3VzU2libGluZztcbiAgICAgICAgd2hpbGUgKHByZXYpIHtcbiAgICAgICAgICBzdHIgPSBwcmV2LmRhdGEgKyBzdHI7XG4gICAgICAgICAgcHJldiA9IHByZXYucHJldmlvdXNTaWJsaW5nO1xuICAgICAgICB9XG4gICAgICAgIHN0ciArPSB0aGlzLmRhdGE7XG4gICAgICAgIG5leHQgPSB0aGlzLm5leHRTaWJsaW5nO1xuICAgICAgICB3aGlsZSAobmV4dCkge1xuICAgICAgICAgIHN0ciA9IHN0ciArIG5leHQuZGF0YTtcbiAgICAgICAgICBuZXh0ID0gbmV4dC5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgWE1MVGV4dC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH07XG5cbiAgICBYTUxUZXh0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLnRleHQodGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgWE1MVGV4dC5wcm90b3R5cGUuc3BsaXRUZXh0ID0gZnVuY3Rpb24ob2Zmc2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIFhNTFRleHQucHJvdG90eXBlLnJlcGxhY2VXaG9sZVRleHQgPSBmdW5jdGlvbihjb250ZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxUZXh0O1xuXG4gIH0pKFhNTENoYXJhY3RlckRhdGEpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIk5vZGVUeXBlIiwiWE1MQ2hhcmFjdGVyRGF0YSIsIlhNTFRleHQiLCJleHRlbmQiLCJjaGlsZCIsInBhcmVudCIsImtleSIsImhhc1Byb3AiLCJjYWxsIiwiY3RvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX19zdXBlcl9fIiwiaGFzT3duUHJvcGVydHkiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInN1cGVyQ2xhc3MiLCJ0ZXh0IiwiRXJyb3IiLCJkZWJ1Z0luZm8iLCJuYW1lIiwidHlwZSIsIlRleHQiLCJ2YWx1ZSIsInN0cmluZ2lmeSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwibmV4dCIsInByZXYiLCJzdHIiLCJwcmV2aW91c1NpYmxpbmciLCJkYXRhIiwibmV4dFNpYmxpbmciLCJjbG9uZSIsImNyZWF0ZSIsInRvU3RyaW5nIiwib3B0aW9ucyIsIndyaXRlciIsImZpbHRlck9wdGlvbnMiLCJzcGxpdFRleHQiLCJvZmZzZXQiLCJyZXBsYWNlV2hvbGVUZXh0IiwiY29udGVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLText.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/XMLWriterBase.js":
/*!******************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLWriterBase.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, WriterState, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLProcessingInstruction, XMLRaw, XMLText, XMLWriterBase, assign, hasProp = {}.hasOwnProperty;\n    assign = (__webpack_require__(/*! ./Utility */ \"(action-browser)/./node_modules/xmlbuilder/lib/Utility.js\").assign);\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLDeclaration = __webpack_require__(/*! ./XMLDeclaration */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDeclaration.js\");\n    XMLDocType = __webpack_require__(/*! ./XMLDocType */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDocType.js\");\n    XMLCData = __webpack_require__(/*! ./XMLCData */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLCData.js\");\n    XMLComment = __webpack_require__(/*! ./XMLComment */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLComment.js\");\n    XMLElement = __webpack_require__(/*! ./XMLElement */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLElement.js\");\n    XMLRaw = __webpack_require__(/*! ./XMLRaw */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLRaw.js\");\n    XMLText = __webpack_require__(/*! ./XMLText */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLText.js\");\n    XMLProcessingInstruction = __webpack_require__(/*! ./XMLProcessingInstruction */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLProcessingInstruction.js\");\n    XMLDummy = __webpack_require__(/*! ./XMLDummy */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDummy.js\");\n    XMLDTDAttList = __webpack_require__(/*! ./XMLDTDAttList */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDTDAttList.js\");\n    XMLDTDElement = __webpack_require__(/*! ./XMLDTDElement */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDTDElement.js\");\n    XMLDTDEntity = __webpack_require__(/*! ./XMLDTDEntity */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDTDEntity.js\");\n    XMLDTDNotation = __webpack_require__(/*! ./XMLDTDNotation */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDTDNotation.js\");\n    WriterState = __webpack_require__(/*! ./WriterState */ \"(action-browser)/./node_modules/xmlbuilder/lib/WriterState.js\");\n    module.exports = XMLWriterBase = function() {\n        function XMLWriterBase(options) {\n            var key, ref, value;\n            options || (options = {});\n            this.options = options;\n            ref = options.writer || {};\n            for(key in ref){\n                if (!hasProp.call(ref, key)) continue;\n                value = ref[key];\n                this[\"_\" + key] = this[key];\n                this[key] = value;\n            }\n        }\n        XMLWriterBase.prototype.filterOptions = function(options) {\n            var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6;\n            options || (options = {});\n            options = assign({}, this.options, options);\n            filteredOptions = {\n                writer: this\n            };\n            filteredOptions.pretty = options.pretty || false;\n            filteredOptions.allowEmpty = options.allowEmpty || false;\n            filteredOptions.indent = (ref = options.indent) != null ? ref : \"  \";\n            filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : \"\\n\";\n            filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;\n            filteredOptions.dontPrettyTextNodes = (ref3 = (ref4 = options.dontPrettyTextNodes) != null ? ref4 : options.dontprettytextnodes) != null ? ref3 : 0;\n            filteredOptions.spaceBeforeSlash = (ref5 = (ref6 = options.spaceBeforeSlash) != null ? ref6 : options.spacebeforeslash) != null ? ref5 : \"\";\n            if (filteredOptions.spaceBeforeSlash === true) {\n                filteredOptions.spaceBeforeSlash = \" \";\n            }\n            filteredOptions.suppressPrettyCount = 0;\n            filteredOptions.user = {};\n            filteredOptions.state = WriterState.None;\n            return filteredOptions;\n        };\n        XMLWriterBase.prototype.indent = function(node, options, level) {\n            var indentLevel;\n            if (!options.pretty || options.suppressPrettyCount) {\n                return \"\";\n            } else if (options.pretty) {\n                indentLevel = (level || 0) + options.offset + 1;\n                if (indentLevel > 0) {\n                    return new Array(indentLevel).join(options.indent);\n                }\n            }\n            return \"\";\n        };\n        XMLWriterBase.prototype.endline = function(node, options, level) {\n            if (!options.pretty || options.suppressPrettyCount) {\n                return \"\";\n            } else {\n                return options.newline;\n            }\n        };\n        XMLWriterBase.prototype.attribute = function(att, options, level) {\n            var r;\n            this.openAttribute(att, options, level);\n            r = \" \" + att.name + '=\"' + att.value + '\"';\n            this.closeAttribute(att, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.cdata = function(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<![CDATA[\";\n            options.state = WriterState.InsideTag;\n            r += node.value;\n            options.state = WriterState.CloseTag;\n            r += \"]]>\" + this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.comment = function(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<!-- \";\n            options.state = WriterState.InsideTag;\n            r += node.value;\n            options.state = WriterState.CloseTag;\n            r += \" -->\" + this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.declaration = function(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<?xml\";\n            options.state = WriterState.InsideTag;\n            r += ' version=\"' + node.version + '\"';\n            if (node.encoding != null) {\n                r += ' encoding=\"' + node.encoding + '\"';\n            }\n            if (node.standalone != null) {\n                r += ' standalone=\"' + node.standalone + '\"';\n            }\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + \"?>\";\n            r += this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.docType = function(node, options, level) {\n            var child, i, len, r, ref;\n            level || (level = 0);\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level);\n            r += \"<!DOCTYPE \" + node.root().name;\n            if (node.pubID && node.sysID) {\n                r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n            } else if (node.sysID) {\n                r += ' SYSTEM \"' + node.sysID + '\"';\n            }\n            if (node.children.length > 0) {\n                r += \" [\";\n                r += this.endline(node, options, level);\n                options.state = WriterState.InsideTag;\n                ref = node.children;\n                for(i = 0, len = ref.length; i < len; i++){\n                    child = ref[i];\n                    r += this.writeChildNode(child, options, level + 1);\n                }\n                options.state = WriterState.CloseTag;\n                r += \"]\";\n            }\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + \">\";\n            r += this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.element = function(node, options, level) {\n            var att, child, childNodeCount, firstChildNode, i, j, len, len1, name, prettySuppressed, r, ref, ref1, ref2;\n            level || (level = 0);\n            prettySuppressed = false;\n            r = \"\";\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r += this.indent(node, options, level) + \"<\" + node.name;\n            ref = node.attribs;\n            for(name in ref){\n                if (!hasProp.call(ref, name)) continue;\n                att = ref[name];\n                r += this.attribute(att, options, level);\n            }\n            childNodeCount = node.children.length;\n            firstChildNode = childNodeCount === 0 ? null : node.children[0];\n            if (childNodeCount === 0 || node.children.every(function(e) {\n                return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === \"\";\n            })) {\n                if (options.allowEmpty) {\n                    r += \">\";\n                    options.state = WriterState.CloseTag;\n                    r += \"</\" + node.name + \">\" + this.endline(node, options, level);\n                } else {\n                    options.state = WriterState.CloseTag;\n                    r += options.spaceBeforeSlash + \"/>\" + this.endline(node, options, level);\n                }\n            } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {\n                r += \">\";\n                options.state = WriterState.InsideTag;\n                options.suppressPrettyCount++;\n                prettySuppressed = true;\n                r += this.writeChildNode(firstChildNode, options, level + 1);\n                options.suppressPrettyCount--;\n                prettySuppressed = false;\n                options.state = WriterState.CloseTag;\n                r += \"</\" + node.name + \">\" + this.endline(node, options, level);\n            } else {\n                if (options.dontPrettyTextNodes) {\n                    ref1 = node.children;\n                    for(i = 0, len = ref1.length; i < len; i++){\n                        child = ref1[i];\n                        if ((child.type === NodeType.Text || child.type === NodeType.Raw) && child.value != null) {\n                            options.suppressPrettyCount++;\n                            prettySuppressed = true;\n                            break;\n                        }\n                    }\n                }\n                r += \">\" + this.endline(node, options, level);\n                options.state = WriterState.InsideTag;\n                ref2 = node.children;\n                for(j = 0, len1 = ref2.length; j < len1; j++){\n                    child = ref2[j];\n                    r += this.writeChildNode(child, options, level + 1);\n                }\n                options.state = WriterState.CloseTag;\n                r += this.indent(node, options, level) + \"</\" + node.name + \">\";\n                if (prettySuppressed) {\n                    options.suppressPrettyCount--;\n                }\n                r += this.endline(node, options, level);\n                options.state = WriterState.None;\n            }\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.writeChildNode = function(node, options, level) {\n            switch(node.type){\n                case NodeType.CData:\n                    return this.cdata(node, options, level);\n                case NodeType.Comment:\n                    return this.comment(node, options, level);\n                case NodeType.Element:\n                    return this.element(node, options, level);\n                case NodeType.Raw:\n                    return this.raw(node, options, level);\n                case NodeType.Text:\n                    return this.text(node, options, level);\n                case NodeType.ProcessingInstruction:\n                    return this.processingInstruction(node, options, level);\n                case NodeType.Dummy:\n                    return \"\";\n                case NodeType.Declaration:\n                    return this.declaration(node, options, level);\n                case NodeType.DocType:\n                    return this.docType(node, options, level);\n                case NodeType.AttributeDeclaration:\n                    return this.dtdAttList(node, options, level);\n                case NodeType.ElementDeclaration:\n                    return this.dtdElement(node, options, level);\n                case NodeType.EntityDeclaration:\n                    return this.dtdEntity(node, options, level);\n                case NodeType.NotationDeclaration:\n                    return this.dtdNotation(node, options, level);\n                default:\n                    throw new Error(\"Unknown XML node type: \" + node.constructor.name);\n            }\n        };\n        XMLWriterBase.prototype.processingInstruction = function(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<?\";\n            options.state = WriterState.InsideTag;\n            r += node.target;\n            if (node.value) {\n                r += \" \" + node.value;\n            }\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + \"?>\";\n            r += this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.raw = function(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level);\n            options.state = WriterState.InsideTag;\n            r += node.value;\n            options.state = WriterState.CloseTag;\n            r += this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.text = function(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level);\n            options.state = WriterState.InsideTag;\n            r += node.value;\n            options.state = WriterState.CloseTag;\n            r += this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.dtdAttList = function(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<!ATTLIST\";\n            options.state = WriterState.InsideTag;\n            r += \" \" + node.elementName + \" \" + node.attributeName + \" \" + node.attributeType;\n            if (node.defaultValueType !== \"#DEFAULT\") {\n                r += \" \" + node.defaultValueType;\n            }\n            if (node.defaultValue) {\n                r += ' \"' + node.defaultValue + '\"';\n            }\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + \">\" + this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.dtdElement = function(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<!ELEMENT\";\n            options.state = WriterState.InsideTag;\n            r += \" \" + node.name + \" \" + node.value;\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + \">\" + this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.dtdEntity = function(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<!ENTITY\";\n            options.state = WriterState.InsideTag;\n            if (node.pe) {\n                r += \" %\";\n            }\n            r += \" \" + node.name;\n            if (node.value) {\n                r += ' \"' + node.value + '\"';\n            } else {\n                if (node.pubID && node.sysID) {\n                    r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n                } else if (node.sysID) {\n                    r += ' SYSTEM \"' + node.sysID + '\"';\n                }\n                if (node.nData) {\n                    r += \" NDATA \" + node.nData;\n                }\n            }\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + \">\" + this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.dtdNotation = function(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<!NOTATION\";\n            options.state = WriterState.InsideTag;\n            r += \" \" + node.name;\n            if (node.pubID && node.sysID) {\n                r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n            } else if (node.pubID) {\n                r += ' PUBLIC \"' + node.pubID + '\"';\n            } else if (node.sysID) {\n                r += ' SYSTEM \"' + node.sysID + '\"';\n            }\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + \">\" + this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.openNode = function(node, options, level) {};\n        XMLWriterBase.prototype.closeNode = function(node, options, level) {};\n        XMLWriterBase.prototype.openAttribute = function(att, options, level) {};\n        XMLWriterBase.prototype.closeAttribute = function(att, options, level) {};\n        return XMLWriterBase;\n    }();\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/XMLWriterBase.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xmlbuilder/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/xmlbuilder/lib/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, WriterState, XMLDOMImplementation, XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction, ref;\n    ref = __webpack_require__(/*! ./Utility */ \"(action-browser)/./node_modules/xmlbuilder/lib/Utility.js\"), assign = ref.assign, isFunction = ref.isFunction;\n    XMLDOMImplementation = __webpack_require__(/*! ./XMLDOMImplementation */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDOMImplementation.js\");\n    XMLDocument = __webpack_require__(/*! ./XMLDocument */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDocument.js\");\n    XMLDocumentCB = __webpack_require__(/*! ./XMLDocumentCB */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLDocumentCB.js\");\n    XMLStringWriter = __webpack_require__(/*! ./XMLStringWriter */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLStringWriter.js\");\n    XMLStreamWriter = __webpack_require__(/*! ./XMLStreamWriter */ \"(action-browser)/./node_modules/xmlbuilder/lib/XMLStreamWriter.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(action-browser)/./node_modules/xmlbuilder/lib/NodeType.js\");\n    WriterState = __webpack_require__(/*! ./WriterState */ \"(action-browser)/./node_modules/xmlbuilder/lib/WriterState.js\");\n    module.exports.create = function(name, xmldec, doctype, options) {\n        var doc, root;\n        if (name == null) {\n            throw new Error(\"Root element needs a name.\");\n        }\n        options = assign({}, xmldec, doctype, options);\n        doc = new XMLDocument(options);\n        root = doc.element(name);\n        if (!options.headless) {\n            doc.declaration(options);\n            if (options.pubID != null || options.sysID != null) {\n                doc.dtd(options);\n            }\n        }\n        return root;\n    };\n    module.exports.begin = function(options, onData, onEnd) {\n        var ref1;\n        if (isFunction(options)) {\n            ref1 = [\n                options,\n                onData\n            ], onData = ref1[0], onEnd = ref1[1];\n            options = {};\n        }\n        if (onData) {\n            return new XMLDocumentCB(options, onData, onEnd);\n        } else {\n            return new XMLDocument(options);\n        }\n    };\n    module.exports.stringWriter = function(options) {\n        return new XMLStringWriter(options);\n    };\n    module.exports.streamWriter = function(stream, options) {\n        return new XMLStreamWriter(stream, options);\n    };\n    module.exports.implementation = new XMLDOMImplementation();\n    module.exports.nodeType = NodeType;\n    module.exports.writerState = WriterState;\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsbUNBQW1DO0FBQ2xDO0lBQ0MsSUFBSUEsVUFBVUMsYUFBYUMsc0JBQXNCQyxhQUFhQyxlQUFlQyxpQkFBaUJDLGlCQUFpQkMsUUFBUUMsWUFBWUM7SUFFbklBLE1BQU1DLG1CQUFPQSxDQUFDLCtFQUFjSCxTQUFTRSxJQUFJRixNQUFNLEVBQUVDLGFBQWFDLElBQUlELFVBQVU7SUFFNUVOLHVCQUF1QlEsbUJBQU9BLENBQUM7SUFFL0JQLGNBQWNPLG1CQUFPQSxDQUFDO0lBRXRCTixnQkFBZ0JNLG1CQUFPQSxDQUFDO0lBRXhCSixrQkFBa0JJLG1CQUFPQSxDQUFDO0lBRTFCTCxrQkFBa0JLLG1CQUFPQSxDQUFDO0lBRTFCVixXQUFXVSxtQkFBT0EsQ0FBQztJQUVuQlQsY0FBY1MsbUJBQU9BLENBQUM7SUFFdEJDLHFCQUFxQixHQUFHLFNBQVNHLElBQUksRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLE9BQU87UUFDN0QsSUFBSUMsS0FBS0M7UUFDVCxJQUFJTCxRQUFRLE1BQU07WUFDaEIsTUFBTSxJQUFJTSxNQUFNO1FBQ2xCO1FBQ0FILFVBQVVWLE9BQU8sQ0FBQyxHQUFHUSxRQUFRQyxTQUFTQztRQUN0Q0MsTUFBTSxJQUFJZixZQUFZYztRQUN0QkUsT0FBT0QsSUFBSUcsT0FBTyxDQUFDUDtRQUNuQixJQUFJLENBQUNHLFFBQVFLLFFBQVEsRUFBRTtZQUNyQkosSUFBSUssV0FBVyxDQUFDTjtZQUNoQixJQUFJLFFBQVNPLEtBQUssSUFBSSxRQUFVUCxRQUFRUSxLQUFLLElBQUksTUFBTztnQkFDdERQLElBQUlRLEdBQUcsQ0FBQ1Q7WUFDVjtRQUNGO1FBQ0EsT0FBT0U7SUFDVDtJQUVBUixvQkFBb0IsR0FBRyxTQUFTTSxPQUFPLEVBQUVXLE1BQU0sRUFBRUMsS0FBSztRQUNwRCxJQUFJQztRQUNKLElBQUl0QixXQUFXUyxVQUFVO1lBQ3ZCYSxPQUFPO2dCQUFDYjtnQkFBU1c7YUFBTyxFQUFFQSxTQUFTRSxJQUFJLENBQUMsRUFBRSxFQUFFRCxRQUFRQyxJQUFJLENBQUMsRUFBRTtZQUMzRGIsVUFBVSxDQUFDO1FBQ2I7UUFDQSxJQUFJVyxRQUFRO1lBQ1YsT0FBTyxJQUFJeEIsY0FBY2EsU0FBU1csUUFBUUM7UUFDNUMsT0FBTztZQUNMLE9BQU8sSUFBSTFCLFlBQVljO1FBQ3pCO0lBQ0Y7SUFFQU4sMkJBQTJCLEdBQUcsU0FBU00sT0FBTztRQUM1QyxPQUFPLElBQUlYLGdCQUFnQlc7SUFDN0I7SUFFQU4sMkJBQTJCLEdBQUcsU0FBU3NCLE1BQU0sRUFBRWhCLE9BQU87UUFDcEQsT0FBTyxJQUFJWixnQkFBZ0I0QixRQUFRaEI7SUFDckM7SUFFQU4sNkJBQTZCLEdBQUcsSUFBSVQ7SUFFcENTLHVCQUF1QixHQUFHWDtJQUUxQlcsMEJBQTBCLEdBQUdWO0FBRS9CLEdBQUdvQyxJQUFJLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWJlLWNvZGUvLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvaW5kZXguanM/NjFlOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFdyaXRlclN0YXRlLCBYTUxET01JbXBsZW1lbnRhdGlvbiwgWE1MRG9jdW1lbnQsIFhNTERvY3VtZW50Q0IsIFhNTFN0cmVhbVdyaXRlciwgWE1MU3RyaW5nV3JpdGVyLCBhc3NpZ24sIGlzRnVuY3Rpb24sIHJlZjtcblxuICByZWYgPSByZXF1aXJlKCcuL1V0aWxpdHknKSwgYXNzaWduID0gcmVmLmFzc2lnbiwgaXNGdW5jdGlvbiA9IHJlZi5pc0Z1bmN0aW9uO1xuXG4gIFhNTERPTUltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9YTUxET01JbXBsZW1lbnRhdGlvbicpO1xuXG4gIFhNTERvY3VtZW50ID0gcmVxdWlyZSgnLi9YTUxEb2N1bWVudCcpO1xuXG4gIFhNTERvY3VtZW50Q0IgPSByZXF1aXJlKCcuL1hNTERvY3VtZW50Q0InKTtcblxuICBYTUxTdHJpbmdXcml0ZXIgPSByZXF1aXJlKCcuL1hNTFN0cmluZ1dyaXRlcicpO1xuXG4gIFhNTFN0cmVhbVdyaXRlciA9IHJlcXVpcmUoJy4vWE1MU3RyZWFtV3JpdGVyJyk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgV3JpdGVyU3RhdGUgPSByZXF1aXJlKCcuL1dyaXRlclN0YXRlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMuY3JlYXRlID0gZnVuY3Rpb24obmFtZSwgeG1sZGVjLCBkb2N0eXBlLCBvcHRpb25zKSB7XG4gICAgdmFyIGRvYywgcm9vdDtcbiAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSb290IGVsZW1lbnQgbmVlZHMgYSBuYW1lLlwiKTtcbiAgICB9XG4gICAgb3B0aW9ucyA9IGFzc2lnbih7fSwgeG1sZGVjLCBkb2N0eXBlLCBvcHRpb25zKTtcbiAgICBkb2MgPSBuZXcgWE1MRG9jdW1lbnQob3B0aW9ucyk7XG4gICAgcm9vdCA9IGRvYy5lbGVtZW50KG5hbWUpO1xuICAgIGlmICghb3B0aW9ucy5oZWFkbGVzcykge1xuICAgICAgZG9jLmRlY2xhcmF0aW9uKG9wdGlvbnMpO1xuICAgICAgaWYgKChvcHRpb25zLnB1YklEICE9IG51bGwpIHx8IChvcHRpb25zLnN5c0lEICE9IG51bGwpKSB7XG4gICAgICAgIGRvYy5kdGQob3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByb290O1xuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzLmJlZ2luID0gZnVuY3Rpb24ob3B0aW9ucywgb25EYXRhLCBvbkVuZCkge1xuICAgIHZhciByZWYxO1xuICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG4gICAgICByZWYxID0gW29wdGlvbnMsIG9uRGF0YV0sIG9uRGF0YSA9IHJlZjFbMF0sIG9uRW5kID0gcmVmMVsxXTtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgaWYgKG9uRGF0YSkge1xuICAgICAgcmV0dXJuIG5ldyBYTUxEb2N1bWVudENCKG9wdGlvbnMsIG9uRGF0YSwgb25FbmQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IFhNTERvY3VtZW50KG9wdGlvbnMpO1xuICAgIH1cbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0cy5zdHJpbmdXcml0ZXIgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBYTUxTdHJpbmdXcml0ZXIob3B0aW9ucyk7XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHMuc3RyZWFtV3JpdGVyID0gZnVuY3Rpb24oc3RyZWFtLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBYTUxTdHJlYW1Xcml0ZXIoc3RyZWFtLCBvcHRpb25zKTtcbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0cy5pbXBsZW1lbnRhdGlvbiA9IG5ldyBYTUxET01JbXBsZW1lbnRhdGlvbigpO1xuXG4gIG1vZHVsZS5leHBvcnRzLm5vZGVUeXBlID0gTm9kZVR5cGU7XG5cbiAgbW9kdWxlLmV4cG9ydHMud3JpdGVyU3RhdGUgPSBXcml0ZXJTdGF0ZTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJOb2RlVHlwZSIsIldyaXRlclN0YXRlIiwiWE1MRE9NSW1wbGVtZW50YXRpb24iLCJYTUxEb2N1bWVudCIsIlhNTERvY3VtZW50Q0IiLCJYTUxTdHJlYW1Xcml0ZXIiLCJYTUxTdHJpbmdXcml0ZXIiLCJhc3NpZ24iLCJpc0Z1bmN0aW9uIiwicmVmIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjcmVhdGUiLCJuYW1lIiwieG1sZGVjIiwiZG9jdHlwZSIsIm9wdGlvbnMiLCJkb2MiLCJyb290IiwiRXJyb3IiLCJlbGVtZW50IiwiaGVhZGxlc3MiLCJkZWNsYXJhdGlvbiIsInB1YklEIiwic3lzSUQiLCJkdGQiLCJiZWdpbiIsIm9uRGF0YSIsIm9uRW5kIiwicmVmMSIsInN0cmluZ1dyaXRlciIsInN0cmVhbVdyaXRlciIsInN0cmVhbSIsImltcGxlbWVudGF0aW9uIiwibm9kZVR5cGUiLCJ3cml0ZXJTdGF0ZSIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xmlbuilder/lib/index.js\n");

/***/ })

};
;